{"version":3,"sources":["components/Wallet/Gas/GasDetails/GasDetails.js","../node_modules/ambire-common/src/helpers/sendTxnHelpers/sendTxnHelpers.ts","../node_modules/ambire-common/src/services/isFeeCollectorTxn/isFeeCollectorTxn.ts","../node_modules/ambire-common/src/hooks/useGasTankData/index.ts","../node_modules/ambire-common/src/hooks/useGasTankData/useGasTankData.ts","components/Modals/GasTankBalanceByTokensModal/GasTankBalanceByTokensModal.js","components/Wallet/Gas/GasTank/GasTank.js","components/Wallet/Gas/Gas.js","lib/icons.js","lib/formatters.js","../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/ambire-common/src/constants/gasSpeeds.ts"],"names":["GasDetails","gasData","GAS_PRICES","GAS_SPEEDS","reduce","acc","speed","gasPrice","maxPriorityFeePerGas","id","className","Date","updated","toDateString","toTimeString","substr","map","index","Math","round","ACTION_GAS_COSTS","a","name","rowIndex","gas","AMBIRE_OVERHEAD_COST","gasFeeAssets","native","toFixed","getAddedGas","token","address","ERC20AbiInterface","Interface","ERC20ABI","TRANSFER_SIGHASH","getSighash","getFunction","format","feeCollector","accountPresets","isFeeCollectorTxn","txn","startsWith","res","decodeFunctionData","value","BigNumber","from","_value","e","console","error","getTxnTransferInfo","_to","useGasTankData","relayerURL","selectedAcc","network","portfolio","useRelayerData","cacheBreak","useCacheBreak","tokens","urlGetBalance","urlGetFeeAssets","urlGetTransactions","url","balancesRes","data","isLoading","feeAssetsRes","executedTxnsRes","gasTankBalances","useMemo","length","balanceInUSD","b","gasTankTxns","txns","filter","item","gasTankFee","feeAssetsPerNetwork","executedTxns","gasTankFilledTxns","transactions","depositTxns","forEach","txId","submittedAt","identity","rest","filteredTxns","txnCall","i","fillTxn","push","getGasTankFilledTxns","availableFeeAssets","isFound","find","x","toLowerCase","tokenImageUrl","icon","decimals","symbol","balance","disableGasTankDeposit","balanceUSD","parseFloat","price","toUpperCase","totalSavedResult","feeTokenDetails","feeToken","savedGas","saved","feeInUSDPerGas","cashback","formatUnits","toString","GasTankBalanceByTokensModal","hideModal","useModals","buttons","clear","onClick","title","sort","key","width","height","alt","src","getTokenIcon","formatFloatTokenAmount","GasTank","account","userSorting","setUserSorting","gasTankState","setGasTankState","showModal","addToast","useToasts","gasTankBalancesFormatted","totalSaved","totalCashBack","isBalanceLoading","sortType","isMobileScreen","useCheckMobileScreen","useState","failedImg","setFailedImg","sortedTokens","items","chainId","indexOf","decreasing","localeCompare","useDragAndDrop","list","prev","dragStart","dragEnter","target","handle","dragTarget","drop","currentAccGasTankState","isEnabled","style","cursor","checked","onChange","updatedGasTankDetails","toggleGasTank","label","color","img","send","category","sortedTokensLength","logo","includes","disabled","draggable","onDragStart","current","contains","preventDefault","onMouseDown","onDragEnter","onDragEnd","onDragOver","size","onError","failed","to","pathname","state","gasTankMsg","small","tokenItem","date","tokenDetails","toLocaleDateString","toLocaleTimeString","href","explorerUrl","rel","stopPropagation","r","Gas","selectedNetwork","selectedAccount","now","setCacheBreak","useEffect","intvl","setTimeout","clearTimeout","errMsg","isGasTankAvailable","customIcons","zapperStorageTokenIcons","networkId","addr","net","amount","useGrouping","maximumFractionDigits","isNaN","minimumFractionDigits","min","toLocaleString","undefined","max","err","_objectWithoutProperties","source","excluded","Object","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call"],"mappings":"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","file":"static/js/17.d1debff0.chunk.js","sourcesContent":["import './GasDetails.scss'\n\nimport { GAS_SPEEDS } from 'ambire-common/src/constants/gasSpeeds'\nimport { ACTION_GAS_COSTS, AMBIRE_OVERHEAD_COST } from 'ambire-common/src/constants/actionGasCosts'\n\nconst GasDetails = ({ gasData }) => {\n  const GAS_PRICES = GAS_SPEEDS.reduce((acc, speed) => {\n    acc[speed] =\n        gasData.gasPrice.maxPriorityFeePerGas\n          ? (gasData.gasPrice.maxPriorityFeePerGas[speed] + gasData.gasPrice[speed])\n          : gasData.gasPrice[speed]\n    return acc\n  }, {})\n\n  return (\n    <div id='gas-details-modal'>\n      <div className='gas-details-date'>\n        Last updated: { new Date(gasData.gasPrice.updated).toDateString() + ' ' + new Date(gasData.gasPrice.updated).toTimeString().substr(0, 8) }\n      </div>\n      <div className='gas-speed-row'>\n        {\n          GAS_SPEEDS.map((speed, index) => {\n            return (\n              <div className='gas-speed-block' key={index}>\n                <div className='gas-speed-name'>{speed}</div>\n                <div className='gas-speed-price'>\n                  {Math.round(GAS_PRICES[speed] / 10 ** 9)} Gwei\n                </div>\n              </div>\n            )\n          })\n        }\n      </div>\n      <h4>Estimated Cost of Transaction Actions</h4>\n     <div className='table-wrapper'>\n      <table className='gas-action-costs'>\n          <thead>\n          <tr>\n            <th>Action</th>\n            {GAS_SPEEDS.map((speed, index) => <th key={index}>{speed}</th>)}\n          </tr>\n          </thead>\n          <tbody>\n          {\n            ACTION_GAS_COSTS.map((a, index) => <tr key={index}>\n              <td>{a.name}</td>\n              {GAS_SPEEDS.map((speed, rowIndex) => <td key={rowIndex}>${(GAS_PRICES[speed] * (a.gas + AMBIRE_OVERHEAD_COST) / 10 ** 18 * gasData.gasFeeAssets.native).toFixed(2)}</td>)}\n            </tr>)\n          }\n          </tbody>\n        </table>\n      </div>\n    </div>\n  )\n}\n\nexport default GasDetails\n","// @ts-nocheck TODO: Fill in all missing types before enabling the TS check again\n// It costs around 19k to send a token, if that token was interacted with before in the same transaction,\n// because of SLOAD costs - they depend on whether a slot has been read\n// however, it costs 30k if the token has not been interacted with\n// we may decrease it a bit and lean on the relayer failsafe values (cfg.gasAddedOnEstimate) later on\nconst ADDED_GAS_TOKEN = 30000\nconst ADDED_GAS_NATIVE = 12000\n\nexport function getAddedGas(token) {\n  return !token?.address || token?.address === '0x0000000000000000000000000000000000000000'\n    ? ADDED_GAS_NATIVE\n    : ADDED_GAS_TOKEN\n}\n\n// can't think of a less funny name for that\nexport function getFeePaymentConsequences(token, estimation, isGasTankEnabled) {\n  // Relayerless mode\n  if (!estimation?.feeInUSD || !token) return { multiplier: 1, addedGas: 0 }\n  // Relayer mode\n  const addedGas = getAddedGas(token)\n  // If Gas Tank enabled\n  if (isGasTankEnabled) return { addedGas: 0, multiplier: 1 }\n\n  return {\n    // otherwise we get very long floating point numbers with trailing .999999\n    multiplier: parseFloat(((estimation.gasLimit + addedGas) / estimation.gasLimit).toFixed(4)),\n    addedGas\n  }\n}\n\n// Returns feeToken data with all multipliers applied\nexport function getFeesData(feeToken, estimation, speed, isGasTankEnabled, network) {\n  const { addedGas, multiplier } = getFeePaymentConsequences(feeToken, estimation, isGasTankEnabled)\n  const savedGas = getAddedGas(feeToken)\n  const discountMultiplier = 1 - (feeToken?.discount || 0)\n  const totalMultiplier = multiplier * discountMultiplier\n  const nativeRate = feeToken?.nativeRate || 1\n  const isCrossChainNativeSelected =\n    isGasTankEnabled &&\n    feeToken.address === '0x0000000000000000000000000000000000000000' &&\n    network.id !== feeToken.network\n  // eslint-disable-next-line no-nested-ternary\n  const feeInNative = estimation.customFee\n    ? (estimation.customFee * discountMultiplier) / nativeRate\n    : !isCrossChainNativeSelected\n    ? estimation.feeInNative[speed] * totalMultiplier\n    : (((estimation.feeInNative[speed] * totalMultiplier) / nativeRate) *\n        estimation.nativeAssetPriceInUSD) /\n      feeToken.price\n  // eslint-disable-next-line no-nested-ternary\n  const feeInUSD = !Number.isNaN(estimation.nativeAssetPriceInUSD)\n    ? !isCrossChainNativeSelected\n      ? feeInNative * estimation.nativeAssetPriceInUSD\n      : feeInNative * feeToken.price\n    : undefined\n  const feeInFeeToken = feeInNative * nativeRate\n\n  return {\n    feeInNative,\n    feeInUSD,\n    feeInFeeToken,\n    addedGas, // use it bundle data\n    savedGas\n  }\n}\nexport function isTokenEligible(token, speed, estimation, isGasTankEnabled, network) {\n  if (estimation?.relayerless && token?.address === '0x0000000000000000000000000000000000000000')\n    return true\n  if (!token) return false\n  const { feeInFeeToken } = getFeesData(token, estimation, speed, isGasTankEnabled, network)\n  const balanceInFeeToken = parseInt(token.balance) / 10 ** token.decimals\n  return balanceInFeeToken > feeInFeeToken\n}\n\nconst contractErrors = [\n  'caller is a contract',\n  'contract not allowed',\n  'contract not supported',\n  'No contractz allowed',\n  /* no */ 'contracts allowed',\n  /* c or C */ 'ontract is not allowed'\n]\n\nexport function mapTxnErrMsg(msg: any) {\n  if (!msg) return\n  if (msg.includes('Router: EXPIRED')) return 'Swap expired'\n  if (msg.includes('Router: INSUFFICIENT_OUTPUT_AMOUNT'))\n    return 'Swap will suffer slippage higher than your requirements'\n  if (msg.includes('INSUFFICIENT_PRIVILEGE')) return 'Your signer address is not authorized.'\n  if (contractErrors.find((contractMsg) => msg.includes(contractMsg)))\n    return 'This dApp does not support smart wallets.'\n  return msg\n}\n\nexport function getErrHint(msg: any) {\n  if (!msg) return\n  if (msg.includes('Router: EXPIRED')) return 'Try performing the swap again'\n  if (msg.includes('Router: INSUFFICIENT_OUTPUT_AMOUNT'))\n    return 'Try performing the swap again or increase your slippage requirements'\n  if (msg.includes('INSUFFICIENT_PRIVILEGE'))\n    return 'If you set a new signer for this account, try re-adding the account.'\n  if (contractErrors.find((contractMsg) => msg.includes(contractMsg)))\n    return 'Contact the dApp developers to tell them to implement smart wallet support by not blocking contract interactions and/or implementing EIP1271.'\n  return 'Sending this transaction batch would have resulted in an error, so we prevented it.'\n}\n\nexport function toHexAmount(amnt: any, decimals: any) {\n  return `0x${Math.round(amnt * 10 ** decimals).toString(16)}`\n}\n\nexport function getDiscountApplied(amnt: any, discount = 0) {\n  if (!discount) return 0\n  if (!amnt) return 0\n  if (discount === 1) return amnt\n  return (amnt / (1 - discount)) * discount\n}\n","// @ts-nocheck TODO: Fill in all missing types before enabling the TS check again\nimport ERC20ABI from 'adex-protocol-eth/abi/ERC20.json'\nimport { BigNumber } from 'ethers'\nimport { Interface } from 'ethers/lib/utils'\n\nimport accountPresets from '../../constants/accountPresets'\n\nconst ERC20AbiInterface = new Interface(ERC20ABI)\nconst TRANSFER_SIGHASH = ERC20AbiInterface.getSighash(\n  ERC20AbiInterface.getFunction('transfer').format()\n)\nconst feeCollector = accountPresets.feeCollector\nconst NATIVE_ADDRESS = '0x0000000000000000000000000000000000000000'\n\nfunction getTxnTransferInfo(txn) {\n  try {\n    const res = ERC20AbiInterface.decodeFunctionData('transfer', txn)\n\n    return {\n      value: BigNumber.from(res._value),\n      ...res\n    }\n  } catch (e) {\n    console.error(e)\n    return {}\n  }\n}\n\nfunction isFeeCollectorTxn(txn) {\n  // is first call is to relayer this is native\n  if (txn[0] === feeCollector) return true\n  // transfer token to relayer\n  if (txn[2].startsWith(TRANSFER_SIGHASH) && getTxnTransferInfo(txn[2])._to === feeCollector)\n    return true\n  return false\n}\n\nconst getGasTankFilledTxns = (transactions) => {\n  const depositTxns: any = []\n  transactions.forEach(({ txId, txns, submittedAt, gasTankFee, identity, ...rest }) => {\n    const filteredTxns = txns\n      .filter((txnCall, i) => isFeeCollectorTxn(txnCall) && (gasTankFee || i < txns.length - 1))\n      .map((fillTxn) => {\n        if (fillTxn[0] === feeCollector) {\n          return {\n            submittedAt,\n            address: NATIVE_ADDRESS,\n            value: BigNumber.from(fillTxn[1]),\n            identity,\n            txId,\n            ...rest\n          }\n        }\n        if (\n          fillTxn[2].startsWith(TRANSFER_SIGHASH) &&\n          ERC20AbiInterface.decodeFunctionData('transfer', fillTxn[2])._to === feeCollector\n        ) {\n          return {\n            submittedAt,\n            address: fillTxn[0],\n            value: BigNumber.from(\n              ERC20AbiInterface.decodeFunctionData('transfer', fillTxn[2])._value\n            ),\n            identity,\n            txId,\n            ...rest\n          }\n        }\n        return null\n      })\n\n    if (filteredTxns.length) depositTxns.push(filteredTxns[0])\n  })\n\n  return depositTxns\n}\n\nexport { getGasTankFilledTxns }\n","import useGasTankData from './useGasTankData'\n\nexport default useGasTankData\n","import { formatUnits } from 'ethers/lib/utils'\nimport { useMemo } from 'react'\n\nimport { getAddedGas } from '../../helpers/sendTxnHelpers'\nimport { getGasTankFilledTxns } from '../../services/isFeeCollectorTxn'\nimport useCacheBreak from '../useCacheBreak'\nimport { UseGasTankDataProps, UseGasTankDataReturnType } from './types'\n\nexport default function useGasTankData({\n  relayerURL,\n  selectedAcc,\n  network,\n  portfolio,\n  useRelayerData\n}: UseGasTankDataProps): UseGasTankDataReturnType {\n  const { cacheBreak } = useCacheBreak()\n  const { tokens } = portfolio\n\n  const urlGetBalance = relayerURL\n    ? `${relayerURL}/gas-tank/${selectedAcc}/getBalance?cacheBreak=${cacheBreak}`\n    : null\n  const urlGetFeeAssets = relayerURL\n    ? `${relayerURL}/gas-tank/assets?cacheBreak=${cacheBreak}`\n    : null\n  const urlGetTransactions = relayerURL\n    ? `${relayerURL}/identity/${selectedAcc}/${network?.id}/transactions`\n    : null\n\n  const { data: balancesRes, isLoading } = useRelayerData({ url: urlGetBalance })\n  const { data: feeAssetsRes } = useRelayerData({ url: urlGetFeeAssets })\n  const { data: executedTxnsRes } = useRelayerData({ url: urlGetTransactions })\n\n  const gasTankBalances = useMemo(\n    () =>\n      balancesRes &&\n      balancesRes.length &&\n      balancesRes.map(({ balanceInUSD }: any) => balanceInUSD).reduce((a: any, b: any) => a + b, 0),\n    [balancesRes]\n  )\n\n  const gasTankTxns = useMemo(\n    () =>\n      executedTxnsRes &&\n      executedTxnsRes.txns.length &&\n      executedTxnsRes.txns.filter((item: any) => !!item.gasTankFee),\n    [executedTxnsRes]\n  )\n\n  const feeAssetsPerNetwork = useMemo(\n    () =>\n      feeAssetsRes &&\n      feeAssetsRes.length &&\n      feeAssetsRes.filter((item: any) => item.network === network?.id),\n    [feeAssetsRes, network?.id]\n  )\n\n  const executedTxns = executedTxnsRes && executedTxnsRes.txns.length && executedTxnsRes.txns\n  const gasTankFilledTxns = useMemo(\n    () => executedTxns && executedTxns.length && getGasTankFilledTxns(executedTxns),\n    [executedTxns]\n  )\n\n  const availableFeeAssets = useMemo(\n    () =>\n      feeAssetsPerNetwork?.map((item: any) => {\n        const isFound = tokens?.find((x) => x.address.toLowerCase() === item.address.toLowerCase())\n        if (isFound)\n          return {\n            ...isFound,\n            tokenImageUrl: item.icon,\n            decimals: item.decimals,\n            symbol: item.symbol,\n            balance: isFound.balance,\n            disableGasTankDeposit: !!item.disableGasTankDeposit,\n            balanceUSD:\n              parseFloat(isFound.balance) *\n              parseFloat(\n                feeAssetsPerNetwork.find(\n                  (x: any) => x.address.toLowerCase() === isFound.address.toLowerCase()\n                ).price || 0\n              )\n          }\n\n        return {\n          ...item,\n          tokenImageUrl: item.icon,\n          balance: 0,\n          balanceUSD: 0,\n          decimals: 0,\n          address: item.address.toLowerCase(),\n          symbol: item.symbol.toUpperCase()\n        }\n      }),\n    [feeAssetsPerNetwork, tokens]\n  )\n\n  const totalSavedResult = useMemo(\n    () =>\n      gasTankTxns &&\n      gasTankTxns.length &&\n      gasTankTxns.map((item: any) => {\n        const feeTokenDetails = feeAssetsRes\n          ? feeAssetsRes.find((i: any) => i.symbol === item.feeToken)\n          : null\n        const savedGas = feeTokenDetails ? getAddedGas(feeTokenDetails) : null\n        return {\n          saved: savedGas ? item.feeInUSDPerGas * savedGas : 0.0,\n          cashback:\n            item.gasTankFee && item.gasTankFee.cashback\n              ? // @ts-ignore FIXME: Figure out why TypeScript complains\n                formatUnits(\n                  item.gasTankFee.cashback.toString(),\n                  feeTokenDetails?.decimals\n                ).toString() * feeTokenDetails?.price\n              : 0.0\n        }\n      }),\n    [feeAssetsRes, gasTankTxns]\n  )\n\n  return {\n    balancesRes,\n    gasTankBalances,\n    isLoading,\n    gasTankTxns,\n    feeAssetsRes,\n    gasTankFilledTxns,\n    totalSavedResult,\n    availableFeeAssets\n  }\n}\n","import './GasTankBalanceByTokensModal.scss'\n\nimport { Button, Modal } from 'components/common'\nimport { MdOutlineClose } from 'react-icons/md'\nimport { useModals } from 'hooks'\nimport { getTokenIcon } from 'lib/icons'\nimport { formatFloatTokenAmount } from 'lib/formatters'\n\nconst GasTankBalanceByTokensModal = ({ data }) => {\n    const { hideModal } = useModals()\n    const buttons = <>\n        <Button clear icon={<MdOutlineClose/>} onClick={() => hideModal()}>Close</Button>\n    </>\n    \n    return (\n        <Modal id=\"gas-tank-balance-by-tokens-modal\" title=\"GAS TANK BALANCE BY TOKENS\" buttons={buttons}>\n           <div className='content'>\n                <div className='row'>\n                    <div className='logo'> </div>\n                    <div className='item'>\n                        <span>Token</span>\n                    </div>\n                    <div className='balance'>\n                        <span>Amount</span>\n                    </div>\n                    <div className='balance'>\n                        <span>Balance</span>\n                    </div>\n                </div>\n                {\n                    data && data.sort((a, b) => b.balance - a.balance).map((item, key) => {\n                        return (\n                            <div className='row' key={key}>\n                                <div className='logo'>\n                                    <img width=\"25px\" height='25px' alt='logo' src={item.icon || getTokenIcon(item.network, item.address)} /> \n                                </div>\n                                <div className='item'>\n                                    <span>{ item.symbol.toUpperCase() }</span>\n                                </div>\n                                <div className='balance'>\n                                    <span>{ formatFloatTokenAmount(item.balance, true, 6) }</span>\n                                </div>\n                                <div className='balance'>\n                                    <span>$ {formatFloatTokenAmount(item.balanceInUSD, true, 6) }</span>\n                                </div>\n                            </div>\n                        )\n                    })\n                }\n           </div>\n        </Modal>\n    )\n}\n\nexport default GasTankBalanceByTokensModal","import useGasTankData from 'ambire-common/src/hooks/useGasTankData'\n\nimport './GasTank.scss'\nimport { Toggle } from 'components/common'\nimport { useState } from 'react'\nimport { GiToken, GiGasPump } from 'react-icons/gi'\nimport { NavLink } from 'react-router-dom'\nimport { Button, Loading } from 'components/common'\nimport { MdDragIndicator, MdOutlineSort } from 'react-icons/md'\nimport { useDragAndDrop, useCheckMobileScreen } from 'hooks'\nimport { getTokenIcon } from 'lib/icons'\nimport { formatFloatTokenAmount } from 'lib/formatters'\nimport { ToolTip } from 'components/common'\nimport { useRelayerData } from 'hooks'\nimport { useModals } from 'hooks'\nimport GasTankBalanceByTokensModal from 'components/Modals/GasTankBalanceByTokensModal/GasTankBalanceByTokensModal'\nimport { HiOutlineExternalLink } from 'react-icons/hi'\nimport { formatUnits } from 'ethers/lib/utils'\n// eslint-disable-next-line import/no-relative-parent-imports\nimport { useToasts } from '../../../../hooks/toasts'\n\nconst GasTank = ({ \n    network, \n    relayerURL, \n    portfolio, \n    account, \n    userSorting, \n    setUserSorting,\n    gasTankState, \n    setGasTankState \n}) => {\n    const {\n        isLoading,\n        balancesRes,\n        gasTankBalances,\n        totalSavedResult,\n        gasTankFilledTxns,\n        feeAssetsRes,\n        availableFeeAssets\n      } = useGasTankData({\n        relayerURL,\n        selectedAcc: account,\n        network,\n        portfolio,\n        useRelayerData\n      })\n\n    const { showModal } = useModals()\n    const { addToast } = useToasts()\n\n    const gasTankBalancesFormatted = gasTankBalances ? formatFloatTokenAmount(gasTankBalances, true, 2) : '0.00'\n    const feeAssetsPerNetwork = feeAssetsRes && feeAssetsRes.length && feeAssetsRes.filter(item => item.network === network.id)\n    \n    const totalSaved = totalSavedResult && totalSavedResult.length && \n        formatFloatTokenAmount(totalSavedResult.map(i => i.saved).reduce((a, b) => a + b), true, 2)\n    const totalCashBack = totalSavedResult && totalSavedResult.length && \n        formatFloatTokenAmount(totalSavedResult.map(i => i.cashback).reduce((a, b) => a + b), true, 2)\n        \n    const { isBalanceLoading } = portfolio\n    const sortType = userSorting.tokens?.sortType || 'decreasing'\n    const isMobileScreen = useCheckMobileScreen()\n    const [failedImg, setFailedImg] = useState([])\n    const toLocaleDateTime = date => `${date.toLocaleDateString()} ${date.toLocaleTimeString()}`\n    const sortedTokens = availableFeeAssets?.filter(item => !item.disableGasTankDeposit).sort((a, b) => b.balanceUSD - a.balanceUSD).sort((a, b) => {\n        if (sortType === 'custom' && userSorting.tokens?.items?.[`${account}-${network.chainId}`]?.length) {\n            const addressA = userSorting.tokens.items[`${account}-${network.chainId}`].indexOf(a.address.toLowerCase())\n            const addressB = userSorting.tokens.items[`${account}-${network.chainId}`].indexOf(b.address.toLowerCase())\n            const sorted = addressA - addressB\n            return sorted\n        } else {\n            const decreasing = b.balanceUSD - a.balanceUSD\n            if (decreasing === 0) return a.symbol.toUpperCase().localeCompare(b.symbol.toUpperCase())\n            return decreasing\n        }\n    })\n\n    const onDropEnd = (list) => {        \n        setUserSorting(\n            prev => ({\n                ...prev,\n                tokens: {\n                    sortType: 'custom',\n                    items: {\n                        ...prev.tokens?.items,\n                        [`${account}-${network.chainId}`]: list\n                    }\n                }\n            })\n        )\n    }\n\n    const { dragStart, dragEnter, target, handle, dragTarget,drop } = useDragAndDrop('address', onDropEnd)\n    const currentAccGasTankState = gasTankState.length ? \n    gasTankState.find(i => i.account === account) :\n        setGasTankState([\n            ...gasTankState,\n            { account: account, isEnabled: false }\n        ])\n    const toggleGasTank = () => {\n        if (!gasTankBalances && !gasTankBalances.length) {\n            addToast('Add assets from the list to the Gas Tank to enable it.', { error: true })\n            return \n        }\n\n        const updatedGasTankDetails = \n            gasTankState.map(item => (item.account === account) ? \n            { ...item, isEnabled: !item.isEnabled } : item)\n        setGasTankState(updatedGasTankDetails)\n    }\n\n    const openGasTankBalanceByTokensModal = () => {\n        showModal(<GasTankBalanceByTokensModal data={ (balancesRes && balancesRes.length) ? balancesRes : [] }/>)\n    }\n\n    const tokenItem = (index, img, symbol, balance, balanceUSD, address, send = false, network, decimals, category, sortedTokensLength) => \n        {\n            const logo = failedImg.includes(img) ? getTokenIcon(network, address) : img\n                \n            return (<div className=\"token\" key={`token-${address}-${index}`}\n                disabled={balance === 0}\n                draggable={category === 'tokens' && sortedTokensLength > 1 && sortType === 'custom' && !isMobileScreen}\n                onDragStart={(e) => {\n                    if (handle.current === target.current || handle.current.contains(target.current)) dragStart(e, index)\n                    else e.preventDefault();\n                }}\n                onMouseDown={(e) => dragTarget(e, index)}\n                onDragEnter={(e) => dragEnter(e, index)}\n                onDragEnd={() => drop(sortedTokens)}\n                onDragOver={(e) => e.preventDefault()}\n                >\n                {sortedTokensLength > 1 && sortType === 'custom' && !isMobileScreen && <MdDragIndicator size={20} className='drag-handle' onClick={(e) => dragStart(e, index)} id={`${index}-handle`} />}\n                <div className=\"icon\">\n                    { \n                        failedImg.includes(logo) ?\n                            <GiToken size={20}/>\n                            :\n                            <img src={logo} draggable=\"false\" alt=\"Token Icon\" onError={() => setFailedImg(failed => [...failed, logo])}/>\n                    }\n                </div>\n                <div className=\"name\">\n                    { symbol.toUpperCase() }\n                </div>\n                <div className=\"separator\"></div>\n                <div className=\"balance\">\n                    <div className=\"currency\">\n                        <span className=\"value\" >{ formatFloatTokenAmount(balance, true, 4) }</span>\n                    </div>\n                    <div className=\"dollar\">\n                        <span className=\"symbol\">$</span> { balanceUSD.toFixed(2) }\n                    </div>\n                </div>\n                {\n                    send ? \n                        <div className=\"actions\">\n                            <NavLink to={{\n                                pathname: `/wallet/transfer/${address}`,\n                                state: {\n                                    gasTankMsg: 'Warning: You are about to top up your Gas Tank. Top ups to the Gas Tank are non-refundable.',\n                                    feeAssetsPerNetwork\n                                }\n                            }}>\n                                <Button small>Top up</Button>\n                            </NavLink>\n                        </div>\n                        :\n                        null\n                }\n            </div>)\n        }\n\n    return (\n        <div id=\"gas-tank\">\n            <div className='heading-wrapper'>\n                <div className=\"balance-wrapper\" style={{ cursor: 'pointer' }} onClick={openGasTankBalanceByTokensModal}>\n                    <span><GiGasPump/> Balance on All Networks</span>\n                    { (!isLoading && gasTankBalances) ?\n                        (<div className={ (gasTankBalancesFormatted.length > 6)? 'inner-wrapper-left small-font' : 'inner-wrapper-left' } >\n                            <span>$ </span>{ gasTankBalancesFormatted }\n                        </div>) : \n                        <Loading /> }\n                    {/* TODO: Add functionality for drag and drop */}\n                    {/* <span>Drag and drop tokens here</span> */}\n                    <span>More details...</span>\n                </div>\n                <div className='switch-wrapper'>\n                    <Toggle checked={currentAccGasTankState.isEnabled} onChange={() => toggleGasTank()}/>\n                    {currentAccGasTankState.isEnabled ? <span>Enabled</span> : <span>Disabled</span>}\n                </div>\n\n                <div className=\"balance-wrapper total-save\">\n                    <div className='inner-wrapper-right'>\n                        <div className='label green'>Total Saved: </div> \n                        <div className='amount'><span>$</span> {totalSaved ? totalSaved : '0.00'}</div>\n                    </div>\n                    <div className='inner-wrapper-right'>\n                        <div className='label'>Total Cashback: </div> \n                        <div className='amount'><span>$</span> {totalCashBack ? totalCashBack : '0.00'}</div>\n                    </div>\n                    <span>From transaction fees on {network.id.toUpperCase()}</span>\n                </div>\n            </div>\n            <div>\n                <p className='benefit'>Save over 20% of fees by enabling the gas tank</p>\n                <p>This is your special account for pre-paying transaction fees.</p>\n                <p>By filling up your Gas Tank, you are setting aside, or prepaying for network fees.</p>\n                <p>Only the tokens listed below are eligible for filling up your Gas Tank. You can add more tokens to your Gas Tank at any time.</p>\n                <p>The tokens in your Gas Tank can pay network fees on all supported networks.</p>\n            </div>\n            <div className=\"sort-holder\">\n                <span className='title'>Available fee tokens on {network.id.toUpperCase()}</span>\n                {sortedTokens && !isMobileScreen &&  (\n                    <div className=\"sort-buttons\">\n                        <ToolTip label='Sorted tokens by drag and drop'>\n                            <MdDragIndicator color={sortType === \"custom\" ? \"#80ffdb\" : \"\"} cursor=\"pointer\" onClick={() => setUserSorting(prev => ({\n                                ...prev,\n                                tokens: {\n                                    ...prev.tokens,\n                                    sortType: 'custom'\n                                }\n                            }))} />\n                        </ToolTip>\n                        <ToolTip label='Sorted tokens by DESC balance'>\n                            <MdOutlineSort color={sortType === \"decreasing\" ? \"#80ffdb\" : \"\"} cursor=\"pointer\" onClick={() => setUserSorting(prev => ({\n                                ...prev,\n                                tokens: {\n                                    ...prev.tokens,\n                                    sortType: 'decreasing'\n                                }\n                            }))} />\n                        </ToolTip>\n                    </div>\n                )}\n            </div>\n            <div className=\"list\">\n                { !isBalanceLoading ?\n                        sortedTokens && sortedTokens?.map(({ address, symbol, tokenImageUrl, balance, balanceUSD, network, decimals, icon }, i) =>\n                            tokenItem(\n                                i, \n                                tokenImageUrl = tokenImageUrl || icon, \n                                symbol, \n                                balance, \n                                balanceUSD, \n                                address, \n                                true, \n                                network, \n                                decimals, \n                                'tokens', \n                                sortedTokens.length\n                            ))\n                        : <Loading />  }\n            </div>\n            <div>\n                <NavLink to={{\n                    pathname: `/wallet/transfer/`,\n                    state: {\n                        gasTankMsg: 'Warning: You are about to top up your Gas Tank. Top ups to the Gas Tank are non-refundable.',\n                        feeAssetsPerNetwork\n                    }\n                }}>\n                    <Button className='deposit-button' small>top up gas tank</Button>\n                </NavLink>\n            </div>\n            <span className='title'>Gas Tank top ups history on {network.id.toUpperCase()}</span>\n            <p className='warning-msg'>Warning: It will take some time to top up the Gas Tank after the transaction is signed.</p>\n            <div className=\"txns-wrapper\">\n                {\n                    gasTankFilledTxns && gasTankFilledTxns.length ? gasTankFilledTxns.map((item, key) => {\n                        const tokenDetails = feeAssetsRes && feeAssetsRes.length ? \n                            feeAssetsRes.find(({address, network}) => address.toLowerCase() === item.address.toLowerCase() && network === item.network) : null\n                        if (!tokenDetails) return null // txn to gas Tank with not eligible token\n                        return (\n                            <div key={key} className=\"txns-item-wrapper\">\n                                <div className='logo'><GiGasPump size={20} /></div>\n                                <div className='date'>{ item.submittedAt && toLocaleDateTime(new Date(item.submittedAt)).toString() }</div>\n                                <div className='balance'>\n                                    { tokenDetails && \n                                        (<>\n                                            <img width=\"25px\" height='25px' alt='logo' src={tokenDetails.icon || getTokenIcon(item.network, item.address)} /> \n                                            <div>{ tokenDetails.symbol.toUpperCase() }</div>\n                                            { tokenDetails && formatUnits(item.value.toString(), tokenDetails.decimals).toString() }\n                                        </>)\n                                    }\n                                </div>\n                                <div className='logo'>\n                                    <a\n                                        href={network.explorerUrl + '/tx/'+ item.txId}\n                                        target='_blank'\n                                        rel='noreferrer'\n                                        onClick={e => e.stopPropagation()}\n                                    >\n                                        <HiOutlineExternalLink size={20} />\n                                    </a>\n                                </div>\n                            </div>)\n                    }).filter(r => r) : <p>No top ups were made to Gas Tank on {network.id.toUpperCase()}</p>\n                }\n            </div>\n        </div>\n    )\n}\n\nexport default GasTank\n","import './Gas.scss'\n\nimport GasDetails from './GasDetails/GasDetails'\nimport GasTank from './GasTank/GasTank'\nimport { useState, useEffect } from 'react'\nimport { useRelayerData } from 'hooks'\nimport { Loading } from 'components/common'\n\nconst Gas = ({ \n    selectedNetwork, \n    relayerURL, \n    portfolio, \n    selectedAccount, \n    userSorting, \n    setUserSorting, \n    gasTankState, \n    setGasTankState\n }) => {\n    const [cacheBreak, setCacheBreak] = useState(() => Date.now())\n\n    useEffect(() => {\n        if (Date.now() - cacheBreak > 5 * 1000) setCacheBreak(Date.now())\n        const intvl = setTimeout(() => setCacheBreak(Date.now()), 60 * 1000)\n        return () => clearTimeout(intvl)\n    }, [cacheBreak])\n\n    const url = relayerURL ? `${relayerURL}/gasPrice/${selectedNetwork.id}?cacheBreak=${cacheBreak}` : null\n    //TODO: To implement \"isLoading\" and \"errMsg\"\n    const { data, errMsg, isLoading } = useRelayerData({ url })\n    \n    const gasData = data ? data.data : null\n    \n    return (\n        <section id=\"gas\">\n            <div className=\"panel\">\n                <div className=\"heading\">\n                    <div className=\"title\">Current Network Fees</div>\n                </div>\n                <div className=\"description\">\n                    <p>Network fees are determined on a market principle - if more users are trying to use the network, fees are higher. Each network has different fees.</p>\n                    { gasData && !isLoading && <GasDetails gasData={gasData} />  }\n                    { isLoading && <Loading /> }\n                    { !gasData && errMsg && (\n                        <h3 className=\"error\">Gas Information: {errMsg}</h3>\n                    )}\n                </div>\n            </div>\n            \n                <div className=\"panel\">\n                    <div className=\"heading\">\n                        <div className=\"title\">Gas Tank</div>\n                    </div>\n                    <div className=\"description\">\n                    { selectedNetwork.isGasTankAvailable ?\n                        <GasTank\n                            network={selectedNetwork}\n                            relayerURL={relayerURL}\n                            portfolio={portfolio}\n                            account={selectedAccount}\n                            userSorting={userSorting}\n                            setUserSorting={setUserSorting}\n                            gasTankState={gasTankState}\n                            setGasTankState={setGasTankState}\n                        /> : \n                        <h3 className=\"error\">Gas Tank is not available on {selectedNetwork.id.toUpperCase()}</h3>\n                    }\n                    </div>\n                </div>\n            \n        </section>\n    )\n}\n\nexport default Gas\n","const customIcons = {\n    '0xb468a1e5596cfbcdf561f21a10490d99b4bb7b68': 'https://upload.wikimedia.org/wikipedia/commons/thumb/5/5a/Jeff_Sessions_with_Elmo_and_Rosita_%28cropped%29.jpg/220px-Jeff_Sessions_with_Elmo_and_Rosita_%28cropped%29.jpg', // TEST Polygon ELMO token,\n    '0x88800092ff476844f74dc2fc427974bbee2794ae': 'https://raw.githubusercontent.com/AmbireTech/ambire-brand/main/logos/ambire_logo_white_bg_250x250.png', // Ambire Wallet Token\n    '0x47cd7e91c3cbaaf266369fe8518345fc4fc12935': 'https://raw.githubusercontent.com/AmbireTech/ambire-brand/main/logos/xwallet_250x250.png', //xWallet\n    '0xb6456b57f03352be48bf101b46c1752a0813491a': 'https://raw.githubusercontent.com/AmbireTech/adex-brand/master/logos/vaporwave-adex-2.png', // ADX-STAKING\n    '0xd9a4cb9dc9296e111c66dfacab8be034ee2e1c2c': 'https://raw.githubusercontent.com/AmbireTech/adex-brand/master/logos/ADX-loyalty%40256x256.png', // ADX-LOYALTY\n    '0xec3b10ce9cabab5dbf49f946a623e294963fbb4e': 'https://raw.githubusercontent.com/AmbireTech/ambire-brand/main/logos/xwallet_250x250.png', // Polygons test xWallet\n    '0xe9415e904143e42007865e6864f7f632bd054a08': 'https://raw.githubusercontent.com/AmbireTech/ambire-brand/main/logos/Ambire_logo_250x250.png', // Polygons test Wallet\n    '0xade00c28244d5ce17d72e40330b1c318cd12b7c3': 'https://raw.githubusercontent.com/AmbireTech/ambire-brand/main/official-logos/Ambire-AdEx/Ambire_AdEx_Symbol_color_white_bg.png' //ADX-TOKEN\n}\n\nconst zapperStorageTokenIcons = 'https://storage.googleapis.com/zapper-fi-assets/tokens'\n\nexport function getTokenIcon(networkId = '', address = '') {\n    const addr = address.toLowerCase()\n    const net = networkId.toLowerCase()\n    return customIcons[addr] || `${zapperStorageTokenIcons}/${net}/${addr}.png`\n}\n","export function formatFloatTokenAmount(amount, useGrouping = true, maximumFractionDigits = 18) {\n    if (isNaN(amount) || isNaN(parseFloat(amount)) || !(typeof amount === 'number' || typeof amount === 'string')) return amount\n\n    try {\n        const minimumFractionDigits = Math.min(2, maximumFractionDigits || 0)\n        return ((typeof amount === 'number') ? amount : parseFloat(amount))\n            .toLocaleString(undefined,\n                {\n                    useGrouping,\n                    maximumFractionDigits: Math.max(minimumFractionDigits, maximumFractionDigits),\n                    minimumFractionDigits\n                })\n    } catch (err) {\n        console.error(err)\n        return amount\n    }\n}\n\n// Round a floating point number to a specific decimal places, i.e. 1.156 => 1.16\nexport function roundFloatingNumber(number, places = 2) {\n  const decimals = Math.pow(10, places)\n\n  return Math.round((number + Number.EPSILON) * decimals) / decimals\n}\n","import objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export const GAS_SPEEDS: string[] = ['slow', 'medium', 'fast', 'ape']\n"],"sourceRoot":""}