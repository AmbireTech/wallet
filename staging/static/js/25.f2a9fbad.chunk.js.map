{"version":3,"sources":["../node_modules/ambire-common/src/constants/abis/ERC721Abi.ts","components/Wallet/Collectible/Collectible.js","lib/validations/formValidations.js"],"names":["ERC721Abi","ERC721","Interface","handleUri","uri","startsWith","replace","split","endsWith","slice","join","Collectible","selectedAcc","selectedNetwork","addRequest","addressBook","addresses","addAddress","removeAddress","isKnownAddress","addToast","useToasts","useParams","network","collectionAddr","tokenId","useState","isLoading","setLoading","owner","address","icon","name","description","image","collection","explorerUrl","metadata","setMetadata","recipientAddress","setRecipientAddress","uDAddress","setUDAddress","ensAddress","setEnsAddress","isTransferDisabled","setTransferDisabled","addressConfirmed","setAddressConfirmed","newAddress","setNewAddress","success","message","validationFormMgs","setValidationFormMgs","timer","useRef","useEffect","indexOf","isAddressValid","validateSendNftAddress","current","clearTimeout","validateForm","a","resolveUDomain","unstoppableDomainsChain","UDAddress","bip44Item","getBip44Items","resolveENSDomain","isUDAddress","selectedAddress","isEnsAddress","setTimeout","catch","console","error","fetchMetadata","useCallback","networkDetails","networks","find","id","Error","provider","getProvider","contract","ethers","Contract","Promise","all","ownerOf","tokenURI","then","err","maybeUri1","maybeUri2","json","JSON","parse","jsonUrl","fetch","response","blockies","seed","toDataURL","fetchGet","VELCRO_API_ENDPOINT","className","href","target","rel","style","backgroundImage","placeholder","value","onInput","label","filter","x","onClose","onSelectAddress","size","onAddNewAddress","onChange","disabled","onClick","recipAddress","req","Date","now","type","chainId","account","txn","to","data","encodeFunctionData","meta","addressLabel","e","validateAddress","length","isValidAddress","validateAddAuthSignerAddress","isValidAddr","validateSendTransferAddress","accountPresets","feeCollector","isKnownTokenOrContract","validateSendTransferAmount","amount","selectedAsset","decimals","parsedAmount","bigNumberAmount","parseUnits","balanceRaw","gt","balance","symbol","toLowerCase"],"mappings":"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","file":"static/js/25.f2a9fbad.chunk.js","sourcesContent":["const ERC721Abi: string[] = [\n  'function name() view returns (string memory)',\n  'function tokenURI(uint256 _tokenId) view returns (string memory)',\n  'function uri(uint256 _tokenId) view returns (string memory)',\n  'function ownerOf(uint256 tokenId) view returns (address)',\n  'function transferFrom(address from, address to, uint256 tokenId)'\n]\n\nexport default ERC721Abi\n","import './Collectible.scss'\n\nimport { useParams } from 'react-router-dom'\nimport { ethers } from 'ethers'\nimport { Interface } from 'ethers/lib/utils'\nimport { useCallback, useEffect, useState, useRef } from 'react'\nimport { AiOutlineSend } from 'react-icons/ai'\nimport { BsFillImageFill } from 'react-icons/bs'\nimport * as blockies from 'blockies-ts';\nimport { useToasts } from 'hooks/toasts'\nimport { TextInput, Button, Loading, AddressBook, AddressWarning, ToolTip } from 'components/common'\nimport ERC721Abi from 'ambire-common/src/constants/abis/ERC721Abi'\nimport networks from 'consts/networks'\nimport { validateSendNftAddress } from 'lib/validations/formValidations'\nimport { BsXLg } from 'react-icons/bs'\nimport { getProvider } from 'lib/provider'\nimport { VELCRO_API_ENDPOINT } from 'config'\nimport { fetchGet } from 'lib/fetch'\nimport { resolveUDomain } from 'lib/unstoppableDomains'\nimport { resolveENSDomain, getBip44Items } from 'lib/ensDomains'\n\nconst ERC721 = new Interface(ERC721Abi)\n\nconst handleUri = uri => {\n    uri = uri.startsWith('data:application/json') ? uri.replace('data:application/json;utf8,', '') : uri\n\n    if (uri.startsWith('ipfs://')) return uri.replace(/ipfs:\\/\\/ipfs\\/|ipfs:\\/\\//g, 'https://ipfs.io/ipfs/')\n    if (uri.split('/')[2].endsWith('mypinata.cloud')) return 'https://ipfs.io/ipfs/' + uri.split('/').slice(4).join('/')\n        \n    return uri\n}\n\nconst Collectible = ({ selectedAcc, selectedNetwork, addRequest, addressBook }) => {\n    const { addresses, addAddress, removeAddress, isKnownAddress } = addressBook\n\n    const { addToast } = useToasts()\n    const { network, collectionAddr, tokenId } = useParams()\n    const [isLoading, setLoading] = useState(true)\n    const [metadata, setMetadata] = useState({\n        owner: {\n            address: '',\n            icon: ''\n        },\n        name: '',\n        description: '',\n        image: '',\n        collection: '',\n        explorerUrl: ''\n    })\n    const [recipientAddress, setRecipientAddress] = useState('')\n    const [uDAddress, setUDAddress] = useState('')\n    const [ensAddress, setEnsAddress] = useState('')\n    const [isTransferDisabled, setTransferDisabled] = useState(true)\n    const [addressConfirmed, setAddressConfirmed] = useState(false)\n    const [newAddress, setNewAddress] = useState(null)\n    const [validationFormMgs, setValidationFormMgs] = useState({ \n        success: false, \n        message: ''\n    })\n    const timer = useRef(null)\n    \n    const sendTransferTx = () => {\n        const recipAddress = uDAddress ? uDAddress : ensAddress ? ensAddress : recipientAddress\n\n        try {\n            let req = {\n                id: `transfer_nft_${Date.now()}`,\n                type: 'eth_sendTransaction',\n                chainId: selectedNetwork.chainId,\n                account: selectedAcc,\n                txn: {\n                    to: collectionAddr,\n                    value: '0',\n                    data: ERC721.encodeFunctionData('transferFrom', [metadata.owner.address, recipAddress, tokenId])\n                },\n                meta: null\n            }\n\n            if (uDAddress) {\n                req.meta = { \n                    addressLabel: { \n                        addressLabel: recipientAddress,\n                        address: uDAddress\n                    }\n                }\n            } else if (ensAddress) {\n                req.meta = {\n                    addressLabel: {\n                        addressLabel: recipientAddress,\n                        address: ensAddress\n                    }\n                }\n            }\n\n            addRequest(req) \n        } catch(e) {\n            console.error(e)\n            addToast(`Error: ${e.message || e}`, { error: true })\n        }\n    }\n\n    useEffect(() => {\n        if (recipientAddress.startsWith('0x') && (recipientAddress.indexOf('.') === -1)) { \n            const isAddressValid = validateSendNftAddress(recipientAddress, selectedAcc, addressConfirmed, isKnownAddress, metadata, selectedNetwork, network)\n\n            setTransferDisabled(!isAddressValid.success)\n            setValidationFormMgs({ \n                success: isAddressValid.success, \n                message: isAddressValid.message ? isAddressValid.message : ''\n            })\n        } else {\n            if (timer.current) {\n                clearTimeout(timer.current)\n            }\n    \n            const validateForm = async() => {\n                const UDAddress =  await resolveUDomain(recipientAddress, null, selectedNetwork.unstoppableDomainsChain)\n                const bip44Item = getBip44Items(null)\n                const ensAddress = await resolveENSDomain(recipientAddress, bip44Item)\n                \n                timer.current = null\n                const isUDAddress = UDAddress ? true : false\n                const isEnsAddress = ensAddress ? true : false\n                let selectedAddress = ''\n                if (isEnsAddress) selectedAddress = ensAddress\n                else if (isUDAddress) selectedAddress = UDAddress\n                else selectedAddress = recipientAddress\n\n                const isAddressValid = validateSendNftAddress(selectedAddress, selectedAcc, addressConfirmed, isKnownAddress, metadata, selectedNetwork, network, isUDAddress, isEnsAddress)\n                setUDAddress(UDAddress)\n                setEnsAddress(ensAddress)\n                \n                setTransferDisabled(!isAddressValid.success)\n                setValidationFormMgs({ \n                    success: isAddressValid.success, \n                    message: isAddressValid.message ? isAddressValid.message : ''\n                })\n            }\n\n            timer.current = setTimeout(async() => validateForm().catch(console.error), 300)\n        } \n\n        return () => clearTimeout(timer.current)\n    }, [recipientAddress, metadata, selectedNetwork, selectedAcc, network, addressConfirmed, isKnownAddress])\n\n    const fetchMetadata = useCallback(async () => {\n        setLoading(true)\n        setMetadata({})\n    \n        try {\n            const networkDetails = networks.find(({ id }) => id === network)\n            if (!networkDetails) throw new Error('This network is not supported')\n\n            const { explorerUrl } = networkDetails\n            const provider = getProvider(networkDetails.id)\n            const contract = new ethers.Contract(collectionAddr, ERC721Abi, provider)\n\n            const [collection, address, maybeUri1, maybeUri2] = await Promise.all([\n                contract.name(),\n                contract.ownerOf(tokenId),\n                contract.tokenURI(tokenId).then(uri => ({ uri })).catch(err => ({ err })),\n                contract.uri(tokenId).then(uri => ({ uri })).catch(err => ({ err }))\n            ])\n            const uri = maybeUri1.uri || maybeUri2.uri\n            if (!uri) throw maybeUri1.err || maybeUri2.err\n\n            let json = {}\n\n            if (uri.startsWith('data:application/json')) {\n                json = JSON.parse(uri.replace('data:application/json;utf8,', ''))\n            } else {\n                const jsonUrl = handleUri(uri)\n                const response = await fetch(jsonUrl)\n                json = await response.json()\n            }\n\n            const image = json ? handleUri(json.image) : null\n            setMetadata(metadata => ({\n                ...metadata,\n                ...json,\n                image\n            }))\n\n            setMetadata(metadata => ({\n                ...metadata,\n                collection,\n                owner: {\n                    address,\n                    icon: blockies.create({ seed: address }).toDataURL()\n                },\n                explorerUrl\n            }))\n\n            setLoading(false)\n        } catch(e) {\n            try {\n                const { success, collection, description, image, name, owner, message } = await fetchGet(\n                    `${VELCRO_API_ENDPOINT}/nftmeta/${collectionAddr}/${tokenId}?network=${network}`\n                    )                \n                if (!success) throw new Error(message)\n\n                const networkDetails = networks.find(({ id }) => id === network)\n                if (!networkDetails) throw new Error('This network is not supported')\n                \n                const { explorerUrl } = networkDetails\n                setMetadata(metadata => ({\n                    ...metadata,\n                    collection,\n                    description,\n                    image,\n                    name,\n                    owner: {\n                        address: owner,\n                        icon: blockies.create({ seed: owner }).toDataURL()\n                    },\n                    explorerUrl\n                })) \n                \n                setLoading(false)\n            } catch(e) {\n                console.error(e)\n                addToast(`Collectible error: ${e.message || e}`, { error: true })\n            }\n        }\n    }, [addToast, tokenId, collectionAddr, network])\n\n    useEffect(() => fetchMetadata(), [fetchMetadata])\n\n    return (\n        <div id=\"collectible\">\n            <div className=\"panel\">\n                <div className=\"heading\">\n                    <div className=\"title\">{ metadata.collection } #{ tokenId }</div>\n                    <div className=\"contract\">\n                        Contract address: <a className=\"address\" href={`${metadata.explorerUrl}/address/${collectionAddr}`} target=\"_blank\" rel=\"noreferrer\">{ collectionAddr }</a>\n                    </div>\n                </div>\n                {\n                    isLoading ?\n                        <Loading/>\n                        :\n                        <div className=\"metadata\">\n                            <div className=\"image\" style={{backgroundImage: `url(${handleUri(metadata.image)})`}}>\n                                { !metadata.image ? <BsFillImageFill/> : null }\n                            </div>\n                            <div className=\"info\">\n                                <div className=\"name\">\n                                    { metadata.name }\n                                </div>\n                                <div className=\"description\">\n                                    { metadata.description }\n                                </div>\n                            </div>\n                            <div className=\"owner\">\n                                Owner:\n                                <a className=\"address\" href={`${metadata.explorerUrl}/address/${metadata.owner.address}`} target=\"_blank\" rel=\"noreferrer\">\n                                    <div className=\"icon\" style={{backgroundImage: `url(${metadata.owner.icon})`}}></div>\n                                    { \n                                        metadata.owner.address === selectedAcc ? \n                                            <span>You ({ metadata.owner.address })</span>\n                                            :\n                                            metadata.owner.address\n                                    }\n                                    \n                                </a>\n                            </div>\n                        </div>\n                }\n            </div>\n            <div className=\"panel\">\n                <div className=\"title\">Transfer</div>\n                <div className=\"content\">\n                    <div id=\"recipient-address\">\n                        <TextInput placeholder=\"Recipient Address\" value={recipientAddress} onInput={(value) => setRecipientAddress(value)}/>\n                        <ToolTip label={!ensAddress ? 'You can use Ethereum Name ServiceⓇ' : 'Valid Ethereum Name ServicesⓇ domain'}>\n                            <div id=\"ens-logo\" className={ensAddress ? 'ens-logo-active ' : ''} />\n                        </ToolTip>\n                        <ToolTip label={!uDAddress ? 'You can use Unstoppable domainsⓇ' : 'Valid Unstoppable domainsⓇ domain'}>\n                            <div id=\"udomains-logo\" className={uDAddress ? 'ud-logo-active ' : ''} />\n                        </ToolTip>\n                        <AddressBook \n                            addresses={addresses.filter(x => x.address !== selectedAcc)}\n                            addAddress={addAddress}\n                            removeAddress={removeAddress}\n                            newAddress={newAddress}\n                            onClose={() => setNewAddress(null)}\n                            onSelectAddress={address => setRecipientAddress(address)}\n                            selectedNetwork={selectedNetwork}\n                        />\n                    </div>\n                    { validationFormMgs.message && \n                        (<div className='validation-error'><BsXLg size={12}/>&nbsp;{validationFormMgs.message}</div>) \n                    }\n                    <div className=\"separator\"></div>\n                    <AddressWarning\n                        address={uDAddress ? uDAddress : ensAddress ? ensAddress : recipientAddress}\n                        onAddNewAddress={() => setNewAddress(uDAddress ? uDAddress : ensAddress ? ensAddress : recipientAddress)}\n                        onChange={(value) => setAddressConfirmed(value)}\n                        isKnownAddress={isKnownAddress}\n                    />\n                    <Button icon={<AiOutlineSend/>} disabled={isTransferDisabled} onClick={sendTransferTx}>Send</Button>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Collectible\n","import { parseUnits } from 'ethers/lib/utils'\nimport { isValidAddress, isKnownTokenOrContract } from 'ambire-common/src/services/address'\nimport accountPresets from 'ambire-common/src/constants/accountPresets'\n\nconst validateAddress = address => {\n    if (!(address && address.length)) {\n        return {\n            success: false,\n            message: ''\n        }\n    }\n\n    if (!(address && isValidAddress(address))) {\n        return {\n            success: false,\n            message: 'Invalid address.'\n        }\n    }\n\n    return { success: true }\n}\n\nconst validateAddAuthSignerAddress = (address, selectedAcc) => {\n    const isValidAddr = validateAddress(address)\n    if (!isValidAddr.success) return isValidAddr\n\n    if (address && selectedAcc && (address === selectedAcc)) {\n        return {\n            success: false,\n            message: 'The entered address should be different than the your own account address.'\n        }\n    }\n    \n    return { success: true }\n}\n\nconst validateSendTransferAddress = (address, selectedAcc, addressConfirmed, isKnownAddress, isUDAddress, isEnsAddress) => {\n    const isValidAddr = validateAddress(address)\n    if (!isValidAddr.success) return isValidAddr\n\n    if (address && address === accountPresets.feeCollector) {\n        return {\n            success: true\n        }\n    }\n\n    if (address && selectedAcc && (address === selectedAcc)) {\n        return {\n            success: false,\n            message: 'The entered address should be different than the your own account address.'\n        }\n    }\n    \n    if (address && isKnownTokenOrContract(address)) {\n        return {\n            success: false,\n            message: 'You are trying to send tokens to a smart contract. Doing so would burn them.'\n        }\n    }\n\n    if (address && (!isKnownAddress(address) && !addressConfirmed && !isUDAddress && !isEnsAddress)) { \n        return {\n            success: false,\n            message: `You're trying to send to an unknown address. If you're really sure, confirm using the checkbox below.`\n        }\n    }\n\n    if (address && (!isKnownAddress(address) && !addressConfirmed && (isUDAddress || isEnsAddress))) { \n        const name = isUDAddress ? 'Unstoppable domain' : 'Ethereum Name Service'\n        return {\n            success: false,\n            message: `You're trying to send to an ${name}. If you really trust to the person who gave you, confirm using the checkbox below.`\n        }\n    }\n\n    return { success: true }\n}\n\nconst validateSendTransferAmount = (amount, selectedAsset) => {\n    if (!(amount && amount.length)) {\n        return {\n            success: false,\n            message: ''\n        }\n    }\n    \n    if (!(amount && (amount > 0))) {\n        return {\n            success: false,\n            message: 'The amount must be greater than 0.'\n        }\n    }\n\n    try {\n        if (amount && selectedAsset && selectedAsset.decimals) {\n            const parsedAmount = amount.slice(0, amount.indexOf('.') + selectedAsset.decimals + 1); // Fixed decimals in case amount is bigger than selectedAsset.decimals, otherwise would cause overflow error\n            const bigNumberAmount = parseUnits(parsedAmount, selectedAsset.decimals)\n            if (bigNumberAmount && selectedAsset.balanceRaw && bigNumberAmount.gt(selectedAsset.balanceRaw)) {\n                return {\n                    success: false,\n                    message: `The amount is greater than the asset's balance: ${selectedAsset?.balance} ${selectedAsset?.symbol}.`\n                }\n            }\n        }\n    } catch(e) {\n        console.error(e);\n    }\n\n    return { success: true }\n}\n\nconst validateSendNftAddress = (address, selectedAcc, addressConfirmed, isKnownAddress, metadata, selectedNetwork, network, isUDAddress, isEnsAddress) => {\n    const isValidAddr = validateSendTransferAddress(address, selectedAcc, addressConfirmed, isKnownAddress, isUDAddress, isEnsAddress)\n    if (!isValidAddr.success) return isValidAddr\n\n    if (metadata && selectedAcc && (metadata.owner?.address.toLowerCase() !== selectedAcc.toLowerCase())) {\n        return {\n            success: false,\n            message: `The NFT you're trying to send is not owned by you!`\n        }\n    }\n\n    if (selectedNetwork && network && (selectedNetwork.id !== network)) {\n        return {\n            success: false,\n            message: 'The selected network is not the correct one.'\n        }\n    }\n\n    return { success: true }\n}\n\nexport {\n    validateAddAuthSignerAddress,\n    validateSendNftAddress,\n    validateSendTransferAddress,\n    validateSendTransferAmount\n}\n"],"sourceRoot":""}