{"version":3,"sources":["components/EmailLogin/EmailLogin.js","components/LoginOrSignupForm/LoginOrSignupForm.js"],"names":["EmailLogin","relayerURL","onAddAccount","useState","requiresEmailConfFor","setRequiresConfFor","err","setErr","inProgress","setInProgress","useLocalStorage","key","isStringStorage","loginSessionKey","setLoginSessionKey","removeLoginSessionKey","attemptLogin","ignoreEmailConfirmationRequired","a","email","passphrase","fetchCaught","encodeURIComponent","headers","authorization","resp","body","errMsg","status","errType","fetch","method","requestAuthResp","json","sessionKey","_id","identityInfo","salt","identityFactoryAddr","baseIdentityAddr","bytecode","meta","quickAccSigner","primaryKeyBackup","id","signer","select","message","onLoginUserAction","useEffect","timer","setTimeout","clearTimeout","className","href","inner","size","color","onAccRequest","LoginOrSignupForm","action","passConfirmInput","useRef","passphraseConfirm","state","setState","onUpdate","updates","newState","invalid","current","setCustomValidity","isSignup","days","Math","ceil","accountPresets","quickAccTimelock","noBackupDisclaimer","additionalOnSignup","backupOptout","label","required","Link","children","target","rel","onClick","e","stopPropagation","additionalInputs","type","minLength","placeholder","value","onChange","ref","checked","onSubmit","preventDefault","accType","style","display","disabled"],"mappings":"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","file":"static/js/24.7967a84e.chunk.js","sourcesContent":["import './EmailLogin.scss'\n\nimport { useState, useEffect } from 'react'\nimport { MdEmail } from 'react-icons/md'\n\nimport { fetch, fetchCaught } from 'lib/fetch'\n\nimport LoginOrSignup from 'components/LoginOrSignupForm/LoginOrSignupForm'\nimport { useLocalStorage } from 'hooks'\n\n// NOTE: the same polling that we do here with the setEffect should be used for txns\n// that require email confirmation\nexport default function EmailLogin({ relayerURL, onAddAccount }) {\n    const [requiresEmailConfFor, setRequiresConfFor] = useState(null)\n    const [err, setErr] = useState('')\n    const [inProgress, setInProgress] = useState(false)\n    const [loginSessionKey, setLoginSessionKey, removeLoginSessionKey] = useLocalStorage({ key: 'loginSessionKey', isStringStorage: true })\n\n    const EMAIL_VERIFICATION_RECHECK = 3000\n\n    const attemptLogin = async ({ email, passphrase }, ignoreEmailConfirmationRequired) => {\n      // try by-email first: if this returns data we can just move on to decrypting\n      // does not matter which network we request\n      const { resp, body, errMsg } = await fetchCaught(`${relayerURL}/identity/by-email/${encodeURIComponent(email)}`, { headers: {\n          authorization: loginSessionKey ? `Bearer ${loginSessionKey}` : null\n      } })\n      if (errMsg) {\n        setErr(errMsg)\n        return\n      }\n\n      if (resp.status === 401 && body.errType === 'UNAUTHORIZED') {\n        if (ignoreEmailConfirmationRequired) {\n          // we still have to call this to make sure the state is consistent and to force a re-render (to trigger the effect again)\n          setRequiresConfFor({ email, passphrase })\n          return\n        }\n        const requestAuthResp = await fetch(`${relayerURL}/identity/by-email/${encodeURIComponent(email)}/request-confirm-login`, { method: 'POST' })\n        if (requestAuthResp.status !== 200) {\n          setErr(`Email confirmation needed but unable to request: ${requestAuthResp.status}`)\n          return\n        }\n        const loginSessionKey = (await requestAuthResp.json()).sessionKey\n        setLoginSessionKey(loginSessionKey)\n        setRequiresConfFor({ email, passphrase })\n        return\n      }\n      // If we make it beyond this point, it means no email confirmation will be required\n      if (resp.status === 404 && body.errType === 'DOES_NOT_EXIST') {\n        setRequiresConfFor(null)\n        setErr('Account does not exist')\n        return\n      }\n\n      if (resp.status === 200) {\n        const identityInfo = body\n        const { _id, salt, identityFactoryAddr, baseIdentityAddr, bytecode } = identityInfo\n        const { quickAccSigner, primaryKeyBackup } = identityInfo.meta\n\n        onAddAccount({\n          id: _id,\n          email: identityInfo.meta.email,\n          primaryKeyBackup,\n          salt, identityFactoryAddr, baseIdentityAddr, bytecode,\n          signer: quickAccSigner\n        }, { select: true })\n\n        // Remove the key value so that it can't be used anymore on this browser\n        removeLoginSessionKey()\n      } else {\n        setErr(body.message ? `Relayer error: ${body.message}` : `Unknown no-message error: ${resp.status}`)\n      }\n      setRequiresConfFor(null)\n    }\n\n    const onLoginUserAction = async ({ email, passphrase }) => {\n      setErr('')\n      setRequiresConfFor(null)\n      setInProgress(true)\n      try {\n        await attemptLogin({ email, passphrase })\n      } catch (e) {\n          setErr(`Unexpected error: ${e.message || e}`)\n      }\n      setInProgress(false)\n    }\n\n    // try logging in once after EMAIL_VERIFICATION_RECHECK\n    useEffect(() => {\n      if (requiresEmailConfFor) {\n        const timer = setTimeout(async () => {\n            setInProgress(true)\n            await attemptLogin(requiresEmailConfFor, true)\n            setInProgress(false)\n        }, EMAIL_VERIFICATION_RECHECK)\n        return () => clearTimeout(timer)\n      }\n    })\n\n    // @TODO import from JSON; maybe without a URL, as we'll just pop a file selector and then import the JSON\n    const importJSONHref = `/#/json-import`\n\n    if (!relayerURL) {\n        return (<section className=\"loginSignupWrapper\" id=\"emailLoginSection\">\n            <div id=\"logo\"/>\n            <h3 className=\"error\">Email login not supported without the relayer.</h3>\n            <a href={importJSONHref}><button>Import JSON</button></a>\n        </section>)\n    }\n\n    const inner = requiresEmailConfFor ?\n      (<div id=\"loginEmail\" className=\"emailConf\">\n        <h3><MdEmail size={25} color=\"white\"/>Email confirmation required</h3>\n        <p>\n        We sent an email to {requiresEmailConfFor.email}, please check your inbox and click \"<b>Authorize New Device</b>\".\n        </p>\n        {err ? (<p className=\"error\">{err}</p>) : (<></>)}\n      </div>)\n      : (<div id=\"loginEmail\">\n        <LoginOrSignup onAccRequest={onLoginUserAction} inProgress={inProgress}></LoginOrSignup>\n        <div className='magicLink'>A password will not be required, we will send a magic login link to your email.</div>\n\n        {err ? (<p className=\"error\">{err}</p>) : (<></>)}\n\n        {/*<a href={importJSONHref}>Import JSON</a>*/}\n      </div>)\n\n    return (\n      <section className=\"loginSignupWrapper\" id=\"emailLoginSection\">\n      <div id=\"logo\"/>\n      {inner}\n    </section>\n    )\n  }\n","import { useState, useRef } from 'react'\nimport accountPresets from 'ambire-common/src/constants/accountPresets'\nimport { Checkbox } from \"components/common\"\n\nexport default function LoginOrSignupForm({ action = 'LOGIN', onAccRequest, inProgress }) {\n    const passConfirmInput = useRef(null)\n    const [state, setState] = useState({\n      email: '', passphrase: '', passphraseConfirm: '', action\n    })\n    const onSubmit = e => {\n      e.preventDefault()\n      onAccRequest({\n        action: state.action,\n        accType: 'QUICK',\n        email: state.email,\n        passphrase: state.passphrase,\n        backupOptout: state.backupOptout,\n      })\n    }\n    const onUpdate = updates => {\n      const newState = { ...state, ...updates }\n      setState(newState)\n      const shouldValidate = newState.action === 'SIGNUP'\n      const invalid = shouldValidate && (\n        newState.passphrase !== newState.passphraseConfirm\n      )\n      // @TODO translation string\n      if (passConfirmInput.current) {\n          passConfirmInput.current.setCustomValidity(invalid ? 'Passwords must match' : '')\n      }\n    }\n    const minPwdLen = 8\n    const isSignup = state.action === 'SIGNUP'\n    const days = Math.ceil(accountPresets.quickAccTimelock / 86400)\n    const noBackupDisclaimer = `In case you forget your password or lose your backup, you will have to wait ${days} days and pay the recovery fee to restore access to your account.`\n    const additionalOnSignup = state.backupOptout ? (\n      <Checkbox label={noBackupDisclaimer} required={true}></Checkbox>\n    ) : (<></>)\n    const Link = ({ href, children }) => (<a href={href} target='_blank' rel='noreferrer' onClick={e => e.stopPropagation()}>{children}</a>)\n    const additionalInputs = isSignup ?\n      (<>\n        <input\n          type=\"password\"\n          required\n          minLength={minPwdLen}\n          placeholder=\"Password\"\n          value={state.passphrase}\n          onChange={e => onUpdate({ passphrase: e.target.value })}\n        ></input>\n        <input\n          ref={passConfirmInput}\n          required\n          minLength={minPwdLen}\n          type=\"password\"\n          placeholder=\"Confirm password\"\n          value={state.passphraseConfirm}\n          onChange={e => onUpdate({ passphraseConfirm: e.target.value })}></input>\n        <Checkbox\n          label={<>I agree to the <Link href='https://www.ambire.com/Ambire%20ToS%20and%20PP%20(26%20November%202021).pdf'>Terms of Service and Privacy policy</Link>.</>}\n          required={true}\n        ></Checkbox>\n        <Checkbox\n          label={<>Backup on <Link href='https://help.ambire.com/hc/en-us/articles/4410892186002-What-is-Ambire-Cloud-'>Ambire Cloud</Link>.</>}\n          checked={!state.backupOptout}\n          onChange={e => onUpdate({ backupOptout: !e.target.checked })}\n        ></Checkbox>\n        {additionalOnSignup}\n      </>) : (<></>)\n\n    return (\n      <form onSubmit={onSubmit}>\n        <input type=\"email\" required placeholder=\"Email\" value={state.email} onChange={e => onUpdate({ email: e.target.value })}></input>\n        {\n          // Trick the password manager into putting in the email\n          !isSignup ? (<input type=\"password\" style={{ display: \"none\" }}></input>): (<></>)\n        }\n        {additionalInputs}\n        <input type=\"submit\" disabled={inProgress} value={isSignup ?\n          (inProgress ? \"Signing up...\" : \"Sign up\")\n          : (inProgress ? \"Logging in...\" : \"Log in\")}></input>\n      </form>\n    )\n}\n"],"sourceRoot":""}