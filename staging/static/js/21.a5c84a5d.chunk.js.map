{"version":3,"sources":["components/Wallet/Transfer/Transfer.module.scss","components/Wallet/Transfer/Addresses/Addresses.module.scss","components/Wallet/Transfer/Addresses/Addresses.js","components/Wallet/Transfer/Transfer.js","lib/icons.js","../node_modules/@babel/runtime/helpers/defineProperty.js","lib/formatters.js","../node_modules/@babel/runtime/helpers/objectSpread2.js","lib/validations/formValidations.js","components/Modals/AddAddressModal/AddAddressModal.js","../node_modules/ambire-common/src/helpers/sendTxnHelpers/sendTxnHelpers.ts","../node_modules/ambire-common/src/services/isFeeCollectorTxn/isFeeCollectorTxn.ts","../node_modules/ambire-common/src/hooks/useGasTankData/index.ts","../node_modules/ambire-common/src/hooks/useGasTankData/useGasTankData.ts"],"names":["module","exports","Addresses","addresses","addAddress","removeAddress","onSelectAddress","selectedNetwork","showModal","useModals","modalInputs","inputType","label","placeholder","validate","value","isValidAddress","addAddressModal","AddAddressModal","title","inputs","onClose","name","address","type","className","styles","wrapper","AddressList","noAccounts","separator","onClick","ERC20","Interface","require","unsupportedSWPlatforms","segments","withRouter","history","portfolio","selectedAcc","addRequest","addressBook","relayerURL","isKnownAddress","feeAssetsRes","useGasTankData","network","useRelayerData","feeAssetsPerNetwork","length","filter","item","id","disableGasTankDeposit","tokenAddressOrSymbol","useParams","addToast","useToasts","state","useLocation","useState","gasTankDetails","tokenAddress","tokens","find","symbol","asset","setAsset","amount","setAmount","bigNumberHexAmount","setBigNumberHexAmount","accountPresets","feeCollector","setAddress","uDAddress","setUDAddress","ensAddress","setEnsAddress","disabled","setDisabled","addressConfirmed","setAddressConfirmed","sWAddressConfirmed","setSWAddressConfirmed","newAddress","setNewAddress","success","messages","validationFormMgs","setValidationFormMgs","feeBaseTokenWarning","setFeeBaseTokenWarning","timer","useRef","assetsItems","isTopUp","some","i","toLowerCase","map","img","tokenImageUrl","icon","fallbackIcon","getTokenIcon","selectedAsset","useMemo","maxAmount","maxAmountFormatted","balanceRaw","decimals","balance","ethers","utils","formatUnits","formatFloatTokenAmount","showSWAddressWarning","Number","networks","includes","onAmountChange","bigNumberAmount","parseUnits","toHexString","useEffect","gasFeeToken","ft","baseToken","feeBaseToken","toUpperCase","replace","pathname","isValidSendTransferAmount","validateSendTransferAmount","startsWith","indexOf","isValidRecipientAddress","validateSendTransferAddress","message","current","clearTimeout","validateForm","a","resolveUDomain","unstoppableDomainsChain","UDAddress","bip44Item","getBip44Items","resolveENSDomain","ensAddr","isUDAddress","selectedAddress","isEnsAddress","setTimeout","catch","console","error","amountLabel","segment","setSegment","sortedAssetsItems","sort","b","style","justifyContent","panel","small","defaultValue","onChange","isCurrNetworkBalanceLoading","form","searchable","items","gasTankConvertMsg","precision","onInput","button","onButtonClick","size","gasTankMsg","recipientField","info","recipientInput","inputContainerClass","textInputContainer","cn","ensLogo","ensLogoActive","udomainsLogo","udomainsLogoActive","x","dropdown","onAddNewAddress","binanceAddressWarning","join","href","target","rel","checked","primaryGradient","recipientAddress","txn","to","data","encodeFunctionData","req","Date","now","chainId","account","meta","addressLabel","e","Providers","walletAddress","networkDetails","sellMode","customIcons","zapperStorageTokenIcons","networkId","addr","net","obj","key","Object","defineProperty","enumerable","configurable","writable","useGrouping","maximumFractionDigits","isNaN","parseFloat","minimumFractionDigits","Math","min","toLocaleString","undefined","max","err","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","sym","getOwnPropertyDescriptor","push","apply","arguments","source","forEach","getOwnPropertyDescriptors","defineProperties","validateAddress","validateAddAuthSignerAddress","isValidAddr","isKnownTokenOrContract","parsedAmount","slice","gt","validateSendNftAddress","metadata","owner","hideModal","isDisabled","inputsFields","input","ref","createRef","getUDomain","isFound","domain","uDAddr","isFormValid","isUDField","every","v","buttons","clear","values","getAddedGas","token","ERC20AbiInterface","ERC20ABI","TRANSFER_SIGHASH","getSighash","getFunction","format","isFeeCollectorTxn","res","decodeFunctionData","BigNumber","from","_value","getTxnTransferInfo","_to","cacheBreak","useCacheBreak","urlGetBalance","urlGetFeeAssets","urlGetTransactions","url","balancesRes","isLoading","executedTxnsRes","gasTankBalances","balanceInUSD","reduce","gasTankTxns","txns","gasTankFee","executedTxns","gasTankFilledTxns","transactions","depositTxns","txId","submittedAt","identity","rest","filteredTxns","txnCall","fillTxn","getGasTankFilledTxns","availableFeeAssets","balanceUSD","price","totalSavedResult","feeTokenDetails","feeToken","savedGas","saved","feeInUSDPerGas","cashback","toString"],"mappings":"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","file":"static/js/21.a5c84a5d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"transferButton\":\"Transfer_transferButton__1rMpZ\",\"wrapper\":\"Transfer_wrapper__1zpDw\",\"amountLabel\":\"Transfer_amountLabel__2FfXd\",\"recipientField\":\"Transfer_recipientField__38BwH\",\"recipientInput\":\"Transfer_recipientInput__1fRT1\",\"dropdown\":\"Transfer_dropdown__1iOox\",\"udomainsLogo\":\"Transfer_udomainsLogo__2kvpB\",\"udomainsLogoActive\":\"Transfer_udomainsLogoActive__1yiB2\",\"ensLogo\":\"Transfer_ensLogo__3Mty8\",\"ensLogoActive\":\"Transfer_ensLogoActive__3lBQM\",\"panel\":\"Transfer_panel__3xc_N\",\"form\":\"Transfer_form__vDDvB\",\"separator\":\"Transfer_separator__2LFW-\",\"gasTankMsg\":\"Transfer_gasTankMsg__1e4vi\",\"gasTankConvertMsg\":\"Transfer_gasTankConvertMsg__2WccI\",\"binanceAddressWarning\":\"Transfer_binanceAddressWarning__2UP0i\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"addresses-button\":\"Addresses_addresses-button__3nLP7\",\"wrapper\":\"Addresses_wrapper__2fkD9\",\"separator\":\"Addresses_separator__1OSZH\",\"item\":\"Addresses_item__2G0-3\",\"details\":\"Addresses_details__3NAv3\",\"address\":\"Addresses_address__1RlKw\",\"button\":\"Addresses_button__235kc\"};","import styles from './Addresses.module.scss'\n\nimport AddressList from 'components/common/AddressBook/AddressList/AddressList'\nimport { Button, Panel } from 'components/common'\nimport { isValidAddress } from 'ambire-common/src/services/address'\nimport AddAddressModal from 'components/Modals/AddAddressModal/AddAddressModal'\nimport { useModals } from 'hooks'\n\nconst Addresses = ({ addresses, addAddress, removeAddress, onSelectAddress, selectedNetwork }) => {\n    const { showModal } = useModals()\n\n    const modalInputs = [\n        { inputType: 'name', label: 'Name', placeholder: 'Address title' },\n        { inputType: 'address', label: 'Address / Unstoppable domainsⓇ / ENSⓇ', placeholder: 'Address / Unstoppable Domains / ENS', validate: value => isValidAddress(value) } \n    ]\n\n    const addAddressModal = <AddAddressModal \n            title=\"Add New Address\" \n            selectedNetwork={selectedNetwork} \n            inputs={modalInputs} \n            onClose={([name, address, type]) => addAddress(name, address, type)}\n        ></AddAddressModal>\n    const showInputModal = () => showModal(addAddressModal)\n\n    return (\n        <Panel title=\"Address Book\" className={styles.wrapper}>\n            <AddressList\n                noAccounts={true}\n                addresses={addresses}\n                removeAddress={removeAddress}\n                onSelectAddress={onSelectAddress}\n            />\n            <div className={styles.separator}></div>\n            <Button onClick={showInputModal} className={styles['addresses-button']}>Add Address</Button>\n        </Panel>\n    )\n}\n\nexport default Addresses","import styles from './Transfer.module.scss'\n\nimport { BsXLg } from 'react-icons/bs'\nimport { MdWarning } from 'react-icons/md'\nimport { useParams, withRouter } from 'react-router'\nimport { useEffect, useMemo, useState, useRef } from 'react'\nimport { ethers } from 'ethers'\nimport { Interface } from 'ethers/lib/utils'\nimport { useToasts } from 'hooks/toasts'\nimport { TextInput, NumberInput, Button, Select, Loading, AddressBook, AddressWarning, NoFundsPlaceholder, Checkbox, ToolTip, Panel, Segments } from 'components/common'\nimport { validateSendTransferAddress, validateSendTransferAmount } from 'lib/validations/formValidations'\nimport { resolveUDomain } from 'lib/unstoppableDomains'\nimport { isValidAddress } from 'ambire-common/src/services/address'\nimport Addresses from './Addresses/Addresses'\nimport { MdInfo } from 'react-icons/md'\nimport networks from 'consts/networks'\nimport { getTokenIcon } from 'lib/icons'\nimport { formatFloatTokenAmount } from 'lib/formatters'\nimport { useLocation } from 'react-router-dom'\nimport accountPresets from 'ambire-common/src/constants/accountPresets'\nimport { resolveENSDomain, getBip44Items } from 'lib/ensDomains'\n// eslint-disable-next-line import/no-relative-parent-imports\nimport Providers from '../Deposit/Providers/Providers'\nimport useGasTankData from 'ambire-common/src/hooks/useGasTankData'\nimport { useRelayerData } from 'hooks'\nimport cn from 'classnames'\n\nconst ERC20 = new Interface(require('adex-protocol-eth/abi/ERC20'))\nconst unsupportedSWPlatforms = ['Binance', 'Huobi', 'KuCoin', 'Gate.io', 'FTX']\nconst segments = [{ value: 'Send' }, { value: 'Sell' }]\n\nconst Transfer = ({ history, portfolio, selectedAcc, selectedNetwork, addRequest, addressBook, relayerURL }) => {\n    const { addresses, addAddress, removeAddress, isKnownAddress } = addressBook\n    const {\n        feeAssetsRes\n      } = useGasTankData({\n        relayerURL,\n        selectedAcc,\n        network: selectedNetwork,\n        portfolio,\n        useRelayerData\n      })\n    const feeAssetsPerNetwork = feeAssetsRes && feeAssetsRes.length && feeAssetsRes.filter(item => (item.network === selectedNetwork.id) && !item.disableGasTankDeposit)\n    const { tokenAddressOrSymbol } = useParams()\n    const { addToast } = useToasts()\n    const { state } = useLocation()\n    const [gasTankDetails] = useState(state ? state : null)\n    const tokenAddress = isValidAddress(tokenAddressOrSymbol) ? tokenAddressOrSymbol : portfolio.tokens.find(({ symbol }) => symbol === tokenAddressOrSymbol)?.address || null\n\n    const [asset, setAsset] = useState(tokenAddress)\n    const [amount, setAmount] = useState(0)\n    const [bigNumberHexAmount, setBigNumberHexAmount] = useState('')\n    const [address, setAddress] = useState(gasTankDetails ? accountPresets.feeCollector : '')\n    const [uDAddress, setUDAddress] = useState('')\n    const [ensAddress, setEnsAddress] = useState('')\n    const [disabled, setDisabled] = useState(true)\n    const [addressConfirmed, setAddressConfirmed] = useState(false)\n    const [sWAddressConfirmed, setSWAddressConfirmed] = useState(false)\n    const [newAddress, setNewAddress] = useState('')\n    const [validationFormMgs, setValidationFormMgs] = useState({\n        success: {\n            amount: false,\n            address: false\n        },\n        messages: {\n            amount: '',\n            address: ''\n        }\n    })\n    const [feeBaseTokenWarning, setFeeBaseTokenWarning] = useState('')\n    const timer = useRef(null)\n    let eligibleFeeTokens = null\n    if (gasTankDetails?.isTopUp) {\n        eligibleFeeTokens = portfolio.tokens.filter(item => feeAssetsPerNetwork && feeAssetsPerNetwork?.some(i => i.address.toLowerCase() === item.address.toLowerCase()))\n    } else eligibleFeeTokens = portfolio.tokens\n    \n    const assetsItems = eligibleFeeTokens.map(({ label, symbol, address, img, tokenImageUrl, network }) => ({\n        label: label || symbol,\n        value: address,\n        icon: img || tokenImageUrl,\n        fallbackIcon: getTokenIcon(network, address)\n    }))\n\n    const selectedAsset = portfolio.tokens.find(({ address }) => address === asset)\n\n    const { maxAmount, maxAmountFormatted } = useMemo(() => {\n        if (!selectedAsset) return { maxAmount: '0', maxAmountFormatted: '0.00' };\n        const { balanceRaw, decimals, balance } = selectedAsset\n        return {\n            maxAmount: ethers.utils.formatUnits(balanceRaw, decimals),\n            maxAmountFormatted: formatFloatTokenAmount(balance, true, decimals)\n        }\n    }, [selectedAsset])\n\n    const showSWAddressWarning = useMemo(() =>\n        !gasTankDetails && Number(tokenAddress) === 0 && networks.map(({ id }) => id).filter(id => id !== 'ethereum').includes(selectedNetwork.id)\n        , [gasTankDetails, tokenAddress, selectedNetwork.id])\n\n    const setMaxAmount = () => onAmountChange(maxAmount)\n\n    const onAmountChange = value => {\n        if (value) {\n            const { decimals } = selectedAsset\n            const bigNumberAmount = ethers.utils.parseUnits(value, decimals).toHexString()\n            setBigNumberHexAmount(bigNumberAmount)\n        }\n\n        setAmount(value)\n    }\n\n    const sendTx = () => {\n        const recipientAddress = uDAddress ? uDAddress : ensAddress ? ensAddress :  address\n        if (!bigNumberHexAmount) return \n        \n        try {\n            const txn = {\n                to: selectedAsset.address,\n                value: '0',\n                data: ERC20.encodeFunctionData('transfer', [recipientAddress, bigNumberHexAmount])\n            }\n\n            if (Number(selectedAsset.address) === 0) {\n                txn.to = recipientAddress\n                txn.value = bigNumberHexAmount\n                txn.data = '0x'\n            }\n\n            let req = {\n                id: `transfer_${Date.now()}`,\n                type: 'eth_sendTransaction',\n                chainId: selectedNetwork.chainId,\n                account: selectedAcc,\n                txn,\n                meta: null\n            }\n\n            if (uDAddress) {\n                req.meta = {\n                    addressLabel: {\n                        addressLabel: address,\n                        address: uDAddress\n                    }\n                }\n            } else if (ensAddress) {\n                req.meta = {\n                    addressLabel: {\n                        addressLabel: address,\n                        address: ensAddress\n                    }\n                }\n            }\n\n            addRequest(req)\n\n            setAmount(0)\n        } catch (e) {\n            console.error(e)\n            addToast(`Error: ${e.message || e}`, { error: true })\n        }\n    }\n\n    useEffect(() => {\n        // check gasTank topUp with token for convertion\n        setFeeBaseTokenWarning('')\n        if (gasTankDetails?.isTopUp){\n            const gasFeeToken = feeAssetsPerNetwork && feeAssetsPerNetwork.find(ft => ft?.address?.toLowerCase() === selectedAsset?.address?.toLowerCase())\n            if (gasFeeToken?.baseToken) {\n                const feeBaseToken = feeAssetsPerNetwork && feeAssetsPerNetwork.find(ft => ft.address.toLowerCase() === gasFeeToken.baseToken.toLowerCase())\n                setFeeBaseTokenWarning(`Token ${gasFeeToken.symbol.toUpperCase()} will be converted to ${feeBaseToken.symbol.toUpperCase()} without additional fees.`)\n            }\n        }\n    }, [feeAssetsPerNetwork, gasTankDetails?.isTopUp, selectedAsset])\n\n    useEffect(() => {\n        setAmount(0)\n        setBigNumberHexAmount('')\n        setSWAddressConfirmed(false)\n    }, [asset, selectedNetwork.id])\n\n    useEffect(() => {\n        if (!selectedAsset) return\n        history.replace({ pathname: `/wallet/transfer/${Number(asset) !== 0 ? asset : selectedAsset.symbol}` })\n    }, [asset, history, selectedAsset])\n\n    useEffect(() => {\n        const isValidSendTransferAmount = validateSendTransferAmount(amount, selectedAsset)\n\n        if (address.startsWith('0x') && (address.indexOf('.') === -1)) {\n            if (uDAddress !== '') setUDAddress('')\n            if (ensAddress !== '') setEnsAddress('')\n            const isValidRecipientAddress = validateSendTransferAddress(address, selectedAcc, addressConfirmed, isKnownAddress)\n\n            setValidationFormMgs({\n                success: {\n                    amount: isValidSendTransferAmount.success,\n                    address: isValidRecipientAddress.success\n                },\n                messages: {\n                    amount: isValidSendTransferAmount.message ? isValidSendTransferAmount.message : '',\n                    address: isValidRecipientAddress.message ? isValidRecipientAddress.message : ''\n                }\n            })\n\n            setDisabled(!isValidRecipientAddress.success || !isValidSendTransferAmount.success || (showSWAddressWarning && !sWAddressConfirmed))\n        } else {\n            if (timer.current) {\n                clearTimeout(timer.current)\n            }\n\n            const validateForm = async () => {\n                const UDAddress = await resolveUDomain(address, selectedAsset ? selectedAsset.symbol : null, selectedNetwork.unstoppableDomainsChain)\n                const bip44Item = getBip44Items(selectedAsset ? selectedAsset.symbol : null)\n                const ensAddr = await resolveENSDomain(address, bip44Item)\n                timer.current = null\n                const isUDAddress = UDAddress ? true : false\n                const isEnsAddress = ensAddr ? true : false\n                let selectedAddress = ''\n                if (isEnsAddress) selectedAddress = ensAddr\n                else if (isUDAddress) selectedAddress = UDAddress\n                else selectedAddress = address\n\n                const isValidRecipientAddress = validateSendTransferAddress(selectedAddress, selectedAcc, addressConfirmed, isKnownAddress, isUDAddress, isEnsAddress)\n\n                setUDAddress(UDAddress)\n                setEnsAddress(ensAddr)\n                setValidationFormMgs({\n                    success: {\n                        amount: isValidSendTransferAmount.success,\n                        address: isValidRecipientAddress.success\n                    },\n                    messages: {\n                        amount: isValidSendTransferAmount.message ? isValidSendTransferAmount.message : '',\n                        address: isValidRecipientAddress.message ? isValidRecipientAddress.message : ''\n                    }\n                })\n\n                setDisabled(!isValidRecipientAddress.success || !isValidSendTransferAmount.success || (showSWAddressWarning && !sWAddressConfirmed))\n            }\n\n            timer.current = setTimeout(async () => {\n                return validateForm().catch(console.error)\n            }, 300)\n        }\n        return () => clearTimeout(timer.current)\n    }, [address, amount, selectedAcc, selectedAsset, addressConfirmed, showSWAddressWarning, sWAddressConfirmed, isKnownAddress, addToast, selectedNetwork, addAddress, uDAddress, disabled, ensAddress])\n\n    const amountLabel = <div className={styles.amountLabel}>Available Amount: <span>{maxAmountFormatted} {selectedAsset?.symbol}</span></div>\n    const [segment, setSegment] = useState(segments[0].value)\n    const sortedAssetsItems = [\n        ...assetsItems.filter(i => i.label.toLowerCase() === 'wallet'),\n        ...assetsItems.filter(i => i.label.toLowerCase() !== 'wallet').sort((a, b) => a.label.toLowerCase() > b.label.toLowerCase() ? 1 : -1),\n    ]\n\n    return (\n        <div className={styles.wrapper} style={{ justifyContent: gasTankDetails ? 'center' : '' }}>\n           <Panel title=\"Send\" className={styles.panel}>\n           <Segments small defaultValue={segment} segments={segments} onChange={(value) => setSegment(value)} />\n               { segment === segments[0].value ? (\n                    portfolio.isCurrNetworkBalanceLoading ?\n                        <Loading />\n                        :\n                        assetsItems.length ?\n                            <div className={styles.form}>\n                                <Select searchable defaultValue={asset} items={sortedAssetsItems} onChange={({ value }) => setAsset(value)}/>\n                                { feeBaseTokenWarning ? <p className={styles.gasTankConvertMsg}><MdWarning /> {feeBaseTokenWarning}</p> : <></>}\n                                <NumberInput\n                                    label={amountLabel}\n                                    value={amount}\n                                    precision={selectedAsset?.decimals}\n                                    onInput={onAmountChange}\n                                    button=\"MAX\"\n                                    onButtonClick={() => setMaxAmount()}\n                                />\n                                \n                                { validationFormMgs.messages.amount && \n                                    (<div className='validation-error'><BsXLg size={12}/>&nbsp;{validationFormMgs.messages.amount}</div>)}\n                                { gasTankDetails ? <p className={styles.gasTankMsg}><MdWarning /> {gasTankDetails?.gasTankMsg}</p> : (<div className={styles.recipientField}>\n                                    <TextInput\n                                        placeholder=\"Recipient\"\n                                        info=\"Please double-check the recipient address, blockchain transactions are not reversible.\"\n                                        value={address}\n                                        onInput={setAddress}\n                                        className={styles.recipientInput}\n                                        inputContainerClass={styles.textInputContainer}\n                                    />\n                                    <ToolTip label={!ensAddress ? 'You can use Ethereum Name ServiceⓇ' : 'Valid Ethereum Name ServicesⓇ domain'}>\n                                        <div className={cn(styles.ensLogo, {[styles.ensLogoActive]: ensAddress})} />\n                                    </ToolTip>\n                                    <ToolTip label={!uDAddress ? 'You can use Unstoppable domainsⓇ' : 'Valid Unstoppable domainsⓇ domain'}>\n                                        <div className={cn(styles.udomainsLogo, { [styles.udomainsLogoActive]: uDAddress })} />\n                                    </ToolTip>\n                                    <AddressBook\n                                        addresses={addresses.filter(x => x.address !== selectedAcc)}\n                                        addAddress={addAddress}\n                                        removeAddress={removeAddress}\n                                        newAddress={newAddress}\n                                        onClose={() => setNewAddress(null)}\n                                        onSelectAddress={address => setAddress(address)}\n                                        selectedNetwork={selectedNetwork}\n                                        className={styles.dropdown}\n                                    />\n                                </div>)}\n                                { validationFormMgs.messages.address && \n                                    (<div className='validation-error'><BsXLg size={12}/>&nbsp;{validationFormMgs.messages.address}</div>)}\n                                <div className={styles.separator} />\n                                <AddressWarning\n                                    address={address}\n                                    onAddNewAddress={() => setNewAddress(address)}\n                                    onChange={(value) => setAddressConfirmed(value)}\n                                    isKnownAddress={isKnownAddress}\n                                    uDAddress={uDAddress}\n                                    ensAddress={ensAddress}\n                                />\n                                {\n                                    showSWAddressWarning ?\n                                        <Checkbox\n                                            className={styles.binanceAddressWarning}\n                                            label={<span id=\"binance-address-warning-label\">\n                                                I confirm this address is not a {unsupportedSWPlatforms.join(' / ')} address: <br />\n                                                These platforms do not support ${selectedAsset?.symbol} deposits from smart wallets\n                                                <a href='https://help.ambire.com/hc/en-us/articles/4415473743506-Statement-on-MATIC-BNB-deposits-to-Binance' target='_blank' rel='noreferrer'><MdInfo size={20} /></a>\n                                            </span>}\n                                            checked={sWAddressConfirmed}\n                                            onChange={({ target }) => setSWAddressConfirmed(target.checked)}\n                                        />\n                                        :\n                                        null\n                                }\n                                <Button primaryGradient={true} disabled={disabled} onClick={sendTx} className='transfer-button'>Send</Button>\n                            </div>\n                            :\n                            <NoFundsPlaceholder/>\n                ) :\n                <Providers walletAddress={selectedAcc} networkDetails={selectedNetwork} relayerURL={relayerURL} portfolio={portfolio} sellMode={true} selectedAsset={selectedAsset ? selectedAsset : null}/>\n               }\n           </Panel>\n           {!gasTankDetails && <Addresses\n                selectedAsset={selectedAsset}\n                selectedNetwork={selectedNetwork}\n                addresses={addresses}\n                addAddress={addAddress}\n                removeAddress={removeAddress}\n                onSelectAddress={address => setAddress(address)}\n            />}\n        </div>\n    )\n}\n\nexport default withRouter(Transfer)","const customIcons = {\n    '0xb468a1e5596cfbcdf561f21a10490d99b4bb7b68': 'https://upload.wikimedia.org/wikipedia/commons/thumb/5/5a/Jeff_Sessions_with_Elmo_and_Rosita_%28cropped%29.jpg/220px-Jeff_Sessions_with_Elmo_and_Rosita_%28cropped%29.jpg', // TEST Polygon ELMO token,\n    '0x88800092ff476844f74dc2fc427974bbee2794ae': 'https://raw.githubusercontent.com/AmbireTech/ambire-brand/main/logos/ambire_logo_white_bg_250x250.png', // Ambire Wallet Token\n    '0x47cd7e91c3cbaaf266369fe8518345fc4fc12935': 'https://raw.githubusercontent.com/AmbireTech/ambire-brand/main/logos/xwallet_250x250.png', //xWallet\n    '0xb6456b57f03352be48bf101b46c1752a0813491a': 'https://raw.githubusercontent.com/AmbireTech/adex-brand/master/logos/vaporwave-adex-2.png', // ADX-STAKING\n    '0xd9a4cb9dc9296e111c66dfacab8be034ee2e1c2c': 'https://raw.githubusercontent.com/AmbireTech/adex-brand/master/logos/ADX-loyalty%40256x256.png', // ADX-LOYALTY\n    '0xec3b10ce9cabab5dbf49f946a623e294963fbb4e': 'https://raw.githubusercontent.com/AmbireTech/ambire-brand/main/logos/xwallet_250x250.png', // Polygons test xWallet\n    '0xe9415e904143e42007865e6864f7f632bd054a08': 'https://raw.githubusercontent.com/AmbireTech/ambire-brand/main/logos/Ambire_logo_250x250.png', // Polygons test Wallet\n    '0xade00c28244d5ce17d72e40330b1c318cd12b7c3': 'https://raw.githubusercontent.com/AmbireTech/ambire-brand/main/official-logos/Ambire-AdEx/Ambire_AdEx_Symbol_color_white_bg.png' //ADX-TOKEN\n}\n\nconst zapperStorageTokenIcons = 'https://storage.googleapis.com/zapper-fi-assets/tokens'\n\nexport function getTokenIcon(networkId = '', address = '') {\n    const addr = address.toLowerCase()\n    const net = networkId.toLowerCase()\n    return customIcons[addr] || `${zapperStorageTokenIcons}/${net}/${addr}.png`\n}\n","function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nmodule.exports = _defineProperty;","export function formatFloatTokenAmount(amount, useGrouping = true, maximumFractionDigits = 18) {\n    if (isNaN(amount) || isNaN(parseFloat(amount)) || !(typeof amount === 'number' || typeof amount === 'string')) return amount\n\n    try {\n        const minimumFractionDigits = Math.min(2, maximumFractionDigits || 0)\n        return ((typeof amount === 'number') ? amount : parseFloat(amount))\n            .toLocaleString(undefined,\n                {\n                    useGrouping,\n                    maximumFractionDigits: Math.max(minimumFractionDigits, maximumFractionDigits),\n                    minimumFractionDigits\n                })\n    } catch (err) {\n        console.error(err)\n        return amount\n    }\n}\n\n// Round a floating point number to a specific decimal places, i.e. 1.156 => 1.16\nexport function roundFloatingNumber(number, places = 2) {\n  const decimals = Math.pow(10, places)\n\n  return Math.round((number + Number.EPSILON) * decimals) / decimals\n}\n","var defineProperty = require(\"./defineProperty\");\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nmodule.exports = _objectSpread2;","import { parseUnits } from 'ethers/lib/utils'\nimport { isValidAddress, isKnownTokenOrContract } from 'ambire-common/src/services/address'\nimport accountPresets from 'ambire-common/src/constants/accountPresets'\n\nconst validateAddress = address => {\n    if (!(address && address.length)) {\n        return {\n            success: false,\n            message: ''\n        }\n    }\n\n    if (!(address && isValidAddress(address))) {\n        return {\n            success: false,\n            message: 'Invalid address.'\n        }\n    }\n\n    return { success: true }\n}\n\nconst validateAddAuthSignerAddress = (address, selectedAcc) => {\n    const isValidAddr = validateAddress(address)\n    if (!isValidAddr.success) return isValidAddr\n\n    if (address && selectedAcc && (address === selectedAcc)) {\n        return {\n            success: false,\n            message: 'The entered address should be different than the your own account address.'\n        }\n    }\n    \n    return { success: true }\n}\n\nconst validateSendTransferAddress = (address, selectedAcc, addressConfirmed, isKnownAddress, isUDAddress, isEnsAddress) => {\n    const isValidAddr = validateAddress(address)\n    if (!isValidAddr.success) return isValidAddr\n\n    if (address && address === accountPresets.feeCollector) {\n        return {\n            success: true\n        }\n    }\n\n    if (address && selectedAcc && (address === selectedAcc)) {\n        return {\n            success: false,\n            message: 'The entered address should be different than the your own account address.'\n        }\n    }\n    \n    if (address && isKnownTokenOrContract(address)) {\n        return {\n            success: false,\n            message: 'You are trying to send tokens to a smart contract. Doing so would burn them.'\n        }\n    }\n\n    if (address && (!isKnownAddress(address) && !addressConfirmed && !isUDAddress && !isEnsAddress)) { \n        return {\n            success: false,\n            message: `You're trying to send to an unknown address. If you're really sure, confirm using the checkbox below.`\n        }\n    }\n\n    if (address && (!isKnownAddress(address) && !addressConfirmed && (isUDAddress || isEnsAddress))) { \n        const name = isUDAddress ? 'Unstoppable domain' : 'Ethereum Name Service'\n        return {\n            success: false,\n            message: `You're trying to send to an ${name}. If you really trust to the person who gave you, confirm using the checkbox below.`\n        }\n    }\n\n    return { success: true }\n}\n\nconst validateSendTransferAmount = (amount, selectedAsset) => {\n    if (!(amount && amount.length)) {\n        return {\n            success: false,\n            message: ''\n        }\n    }\n    \n    if (!(amount && (amount > 0))) {\n        return {\n            success: false,\n            message: 'The amount must be greater than 0.'\n        }\n    }\n\n    try {\n        if (amount && selectedAsset && selectedAsset.decimals) {\n            const parsedAmount = amount.slice(0, amount.indexOf('.') + selectedAsset.decimals + 1); // Fixed decimals in case amount is bigger than selectedAsset.decimals, otherwise would cause overflow error\n            const bigNumberAmount = parseUnits(parsedAmount, selectedAsset.decimals)\n            if (bigNumberAmount && selectedAsset.balanceRaw && bigNumberAmount.gt(selectedAsset.balanceRaw)) {\n                return {\n                    success: false,\n                    message: `The amount is greater than the asset's balance: ${selectedAsset?.balance} ${selectedAsset?.symbol}.`\n                }\n            }\n        }\n    } catch(e) {\n        console.error(e);\n    }\n\n    return { success: true }\n}\n\nconst validateSendNftAddress = (address, selectedAcc, addressConfirmed, isKnownAddress, metadata, selectedNetwork, network, isUDAddress, isEnsAddress) => {\n    const isValidAddr = validateSendTransferAddress(address, selectedAcc, addressConfirmed, isKnownAddress, isUDAddress, isEnsAddress)\n    if (!isValidAddr.success) return isValidAddr\n\n    if (metadata && selectedAcc && (metadata.owner?.address.toLowerCase() !== selectedAcc.toLowerCase())) {\n        return {\n            success: false,\n            message: `The NFT you're trying to send is not owned by you!`\n        }\n    }\n\n    if (selectedNetwork && network && (selectedNetwork.id !== network)) {\n        return {\n            success: false,\n            message: 'The selected network is not the correct one.'\n        }\n    }\n\n    return { success: true }\n}\n\nexport {\n    validateAddAuthSignerAddress,\n    validateSendNftAddress,\n    validateSendTransferAddress,\n    validateSendTransferAmount\n}\n","import './AddAddressModal.scss'\n\nimport { createRef, useRef, useState, useMemo } from 'react'\nimport { MdCheck, MdClose } from 'react-icons/md'\nimport { useModals } from 'hooks'\nimport { Modal, TextInput, Button, ToolTip } from \"components/common\"\nimport { resolveUDomain } from 'lib/unstoppableDomains'\nimport { resolveENSDomain } from 'lib/ensDomains'\n\nconst AddAddressModal = ({ title, inputs, selectedNetwork, onClose }) => {\n    const { hideModal } = useModals()\n    const [isDisabled, setDisabled] = useState(true)\n    const [uDAddress, setUDAddress] = useState('')\n    const [ensAddress, setEnsAddress] = useState('')\n    const timer = useRef(null)\n\n    const inputsFields = useMemo(() => inputs.map(input => ({ ...input, ref: createRef() })), [inputs])\n    const getUDomain = async (value) => {\n        return await resolveUDomain(value, null, selectedNetwork.unstoppableDomainsChain)\n    }\n\n    const onInput = () => {\n        if (timer.current) {\n            clearTimeout(timer.current)\n        }\n\n        const validateForm = async () => {\n            const isFound = inputsFields.find(item => item.inputType === 'address')\n            const domain = isFound && isFound.ref && isFound.ref.current.value\n            if (!domain) return\n            \n            let uDAddr = null\n            let ensAddr = null\n            if (isFound) {\n                uDAddr = await getUDomain(domain)\n                ensAddr = await resolveENSDomain(domain)\n                timer.current = null\n                if (uDAddr) setUDAddress(uDAddr)\n                else if (ensAddr) setEnsAddress(ensAddr)\n            }\n\n            const isFormValid = inputsFields\n                .map(({ ref, validate, inputType }) => {\n                    const isUDField = inputType === 'address'\n                    const value = isUDField && uDAddr ? uDAddr : isUDField && ensAddr ? ensAddr : ref.current.value\n                    if (!validate) return !!value\n\n                    return validate(value)\n                })\n                .every(v => v === true)\n\n            setDisabled(!isFormValid)\n        }\n\n        timer.current = setTimeout(async () => {\n            return validateForm().catch(console.error)\n        }, 500)\n    }\n\n    const onConfirm = () => {\n        let values = inputsFields.map(({ ref }) => ref.current.value)\n        if (uDAddress) values.push({ type: 'ud' })\n        else if (ensAddress) values.push({ type: 'ens' })\n        else values.push({ type: 'pub' })\n        \n        onClose && onClose(values)\n        hideModal()\n    }\n\n    const buttons = <>\n        <Button clear small icon={<MdClose />} onClick={hideModal}>Cancel</Button>\n        <Button small icon={<MdCheck />} disabled={isDisabled} onClick={onConfirm}>Confirm</Button>\n    </>\n\n    return (\n        <Modal id=\"input-modal\" title={title} buttons={buttons}>\n            {\n                inputsFields.map(({ id, label, placeholder, ref, type }) => (\n                    <div key={id + label}>\n                        <TextInput label={label} placeholder={placeholder} onInput={onInput} ref={ref} className='address-input' />\n                        {(type === 'address') &&\n                            <>\n                                <ToolTip label={!uDAddress ? 'You can use Unstoppable domainsⓇ' : 'Valid Unstoppable domainsⓇ domain'}>\n                                    <span id=\"udomains-logo\" className={ uDAddress ? 'ud-logo-active ' : '' } />\n                                </ToolTip>\n                                <ToolTip label={!ensAddress ? 'You can use Ethereum Name ServiceⓇ' : 'Valid Ethereum Name ServicesⓇ domain'}>\n                                    <div id=\"ens-logo\" className={ensAddress ? 'ens-logo-active ' : ''} />\n                                </ToolTip>\n                            </>\n                        }\n                    </div>\n                ))\n            }\n        </Modal>\n    )\n}\n\nexport default AddAddressModal\n","// @ts-nocheck TODO: Fill in all missing types before enabling the TS check again\n// It costs around 19k to send a token, if that token was interacted with before in the same transaction,\n// because of SLOAD costs - they depend on whether a slot has been read\n// however, it costs 30k if the token has not been interacted with\n// we may decrease it a bit and lean on the relayer failsafe values (cfg.gasAddedOnEstimate) later on\nconst ADDED_GAS_TOKEN = 30000\nconst ADDED_GAS_NATIVE = 12000\n\nexport function getAddedGas(token) {\n  return !token?.address || token?.address === '0x0000000000000000000000000000000000000000'\n    ? ADDED_GAS_NATIVE\n    : ADDED_GAS_TOKEN\n}\n\n// can't think of a less funny name for that\nexport function getFeePaymentConsequences(token, estimation, isGasTankEnabled) {\n  // Relayerless mode\n  if (!estimation?.feeInUSD || !token) return { multiplier: 1, addedGas: 0 }\n  // Relayer mode\n  const addedGas = getAddedGas(token)\n  // If Gas Tank enabled\n  if (isGasTankEnabled) return { addedGas: 0, multiplier: 1 }\n\n  return {\n    // otherwise we get very long floating point numbers with trailing .999999\n    multiplier: parseFloat(((estimation.gasLimit + addedGas) / estimation.gasLimit).toFixed(4)),\n    addedGas\n  }\n}\n\n// Returns feeToken data with all multipliers applied\nexport function getFeesData(feeToken, estimation, speed, isGasTankEnabled, network) {\n  const { addedGas, multiplier } = getFeePaymentConsequences(feeToken, estimation, isGasTankEnabled)\n  const savedGas = getAddedGas(feeToken)\n  const discountMultiplier = 1 - (feeToken?.discount || 0)\n  const totalMultiplier = multiplier * discountMultiplier\n  const nativeRate = feeToken?.nativeRate || 1\n  const isCrossChainNativeSelected =\n    isGasTankEnabled &&\n    feeToken.address === '0x0000000000000000000000000000000000000000' &&\n    network.id !== feeToken.network\n  // eslint-disable-next-line no-nested-ternary\n  const feeInNative = estimation.customFee\n    ? (estimation.customFee * discountMultiplier) / nativeRate\n    : !isCrossChainNativeSelected\n    ? estimation.feeInNative[speed] * totalMultiplier\n    : (((estimation.feeInNative[speed] * totalMultiplier) / nativeRate) *\n        estimation.nativeAssetPriceInUSD) /\n      feeToken.price\n  // eslint-disable-next-line no-nested-ternary\n  const feeInUSD = !Number.isNaN(estimation.nativeAssetPriceInUSD)\n    ? !isCrossChainNativeSelected\n      ? feeInNative * estimation.nativeAssetPriceInUSD\n      : feeInNative * feeToken.price\n    : undefined\n  const feeInFeeToken = feeInNative * nativeRate\n\n  return {\n    feeInNative,\n    feeInUSD,\n    feeInFeeToken,\n    addedGas, // use it bundle data\n    savedGas\n  }\n}\nexport function isTokenEligible(token, speed, estimation, isGasTankEnabled, network) {\n  if (estimation?.relayerless && token?.address === '0x0000000000000000000000000000000000000000')\n    return true\n  if (!token) return false\n  const { feeInFeeToken } = getFeesData(token, estimation, speed, isGasTankEnabled, network)\n  const balanceInFeeToken = parseInt(token.balance) / 10 ** token.decimals\n  return balanceInFeeToken > feeInFeeToken\n}\n\nconst contractErrors = [\n  'caller is a contract',\n  'contract not allowed',\n  'contract not supported',\n  'No contractz allowed',\n  /* no */ 'contracts allowed',\n  /* c or C */ 'ontract is not allowed'\n]\n\nexport function mapTxnErrMsg(msg: any) {\n  if (!msg) return\n  if (msg.includes('Router: EXPIRED')) return 'Swap expired'\n  if (msg.includes('Router: INSUFFICIENT_OUTPUT_AMOUNT'))\n    return 'Swap will suffer slippage higher than your requirements'\n  if (msg.includes('INSUFFICIENT_PRIVILEGE')) return 'Your signer address is not authorized.'\n  if (contractErrors.find((contractMsg) => msg.includes(contractMsg)))\n    return 'This dApp does not support smart wallets.'\n  return msg\n}\n\nexport function getErrHint(msg: any) {\n  if (!msg) return\n  if (msg.includes('Router: EXPIRED')) return 'Try performing the swap again'\n  if (msg.includes('Router: INSUFFICIENT_OUTPUT_AMOUNT'))\n    return 'Try performing the swap again or increase your slippage requirements'\n  if (msg.includes('INSUFFICIENT_PRIVILEGE'))\n    return 'If you set a new signer for this account, try re-adding the account.'\n  if (contractErrors.find((contractMsg) => msg.includes(contractMsg)))\n    return 'Contact the dApp developers to tell them to implement smart wallet support by not blocking contract interactions and/or implementing EIP1271.'\n  return 'Sending this transaction batch would have resulted in an error, so we prevented it.'\n}\n\nexport function toHexAmount(amnt: any, decimals: any) {\n  return `0x${Math.round(amnt * 10 ** decimals).toString(16)}`\n}\n\nexport function getDiscountApplied(amnt: any, discount = 0) {\n  if (!discount) return 0\n  if (!amnt) return 0\n  if (discount === 1) return amnt\n  return (amnt / (1 - discount)) * discount\n}\n","// @ts-nocheck TODO: Fill in all missing types before enabling the TS check again\nimport ERC20ABI from 'adex-protocol-eth/abi/ERC20.json'\nimport { BigNumber } from 'ethers'\nimport { Interface } from 'ethers/lib/utils'\n\nimport accountPresets from '../../constants/accountPresets'\n\nconst ERC20AbiInterface = new Interface(ERC20ABI)\nconst TRANSFER_SIGHASH = ERC20AbiInterface.getSighash(\n  ERC20AbiInterface.getFunction('transfer').format()\n)\nconst feeCollector = accountPresets.feeCollector\nconst NATIVE_ADDRESS = '0x0000000000000000000000000000000000000000'\n\nfunction getTxnTransferInfo(txn) {\n  try {\n    const res = ERC20AbiInterface.decodeFunctionData('transfer', txn)\n\n    return {\n      value: BigNumber.from(res._value),\n      ...res\n    }\n  } catch (e) {\n    console.error(e)\n    return {}\n  }\n}\n\nfunction isFeeCollectorTxn(txn) {\n  // is first call is to relayer this is native\n  if (txn[0] === feeCollector) return true\n  // transfer token to relayer\n  if (txn[2].startsWith(TRANSFER_SIGHASH) && getTxnTransferInfo(txn[2])._to === feeCollector)\n    return true\n  return false\n}\n\nconst getGasTankFilledTxns = (transactions) => {\n  const depositTxns: any = []\n  transactions.forEach(({ txId, txns, submittedAt, gasTankFee, identity, ...rest }) => {\n    const filteredTxns = txns\n      .filter((txnCall, i) => isFeeCollectorTxn(txnCall) && (gasTankFee || i < txns.length - 1))\n      .map((fillTxn) => {\n        if (fillTxn[0] === feeCollector) {\n          return {\n            submittedAt,\n            address: NATIVE_ADDRESS,\n            value: BigNumber.from(fillTxn[1]),\n            identity,\n            txId,\n            ...rest\n          }\n        }\n        if (\n          fillTxn[2].startsWith(TRANSFER_SIGHASH) &&\n          ERC20AbiInterface.decodeFunctionData('transfer', fillTxn[2])._to === feeCollector\n        ) {\n          return {\n            submittedAt,\n            address: fillTxn[0],\n            value: BigNumber.from(\n              ERC20AbiInterface.decodeFunctionData('transfer', fillTxn[2])._value\n            ),\n            identity,\n            txId,\n            ...rest\n          }\n        }\n        return null\n      })\n\n    if (filteredTxns.length) depositTxns.push(filteredTxns[0])\n  })\n\n  return depositTxns\n}\n\nexport { getGasTankFilledTxns }\n","import useGasTankData from './useGasTankData'\n\nexport default useGasTankData\n","import { formatUnits } from 'ethers/lib/utils'\nimport { useMemo } from 'react'\n\nimport { getAddedGas } from '../../helpers/sendTxnHelpers'\nimport { getGasTankFilledTxns } from '../../services/isFeeCollectorTxn'\nimport useCacheBreak from '../useCacheBreak'\nimport { UseGasTankDataProps, UseGasTankDataReturnType } from './types'\n\nexport default function useGasTankData({\n  relayerURL,\n  selectedAcc,\n  network,\n  portfolio,\n  useRelayerData\n}: UseGasTankDataProps): UseGasTankDataReturnType {\n  const { cacheBreak } = useCacheBreak()\n  const { tokens } = portfolio\n\n  const urlGetBalance = relayerURL\n    ? `${relayerURL}/gas-tank/${selectedAcc}/getBalance?cacheBreak=${cacheBreak}`\n    : null\n  const urlGetFeeAssets = relayerURL\n    ? `${relayerURL}/gas-tank/assets?cacheBreak=${cacheBreak}`\n    : null\n  const urlGetTransactions = relayerURL\n    ? `${relayerURL}/identity/${selectedAcc}/${network?.id}/transactions`\n    : null\n\n  const { data: balancesRes, isLoading } = useRelayerData({ url: urlGetBalance })\n  const { data: feeAssetsRes } = useRelayerData({ url: urlGetFeeAssets })\n  const { data: executedTxnsRes } = useRelayerData({ url: urlGetTransactions })\n\n  const gasTankBalances = useMemo(\n    () =>\n      balancesRes &&\n      balancesRes.length &&\n      balancesRes.map(({ balanceInUSD }: any) => balanceInUSD).reduce((a: any, b: any) => a + b, 0),\n    [balancesRes]\n  )\n\n  const gasTankTxns = useMemo(\n    () =>\n      executedTxnsRes &&\n      executedTxnsRes.txns.length &&\n      executedTxnsRes.txns.filter((item: any) => !!item.gasTankFee),\n    [executedTxnsRes]\n  )\n\n  const feeAssetsPerNetwork = useMemo(\n    () =>\n      feeAssetsRes &&\n      feeAssetsRes.length &&\n      feeAssetsRes.filter((item: any) => item.network === network?.id),\n    [feeAssetsRes, network?.id]\n  )\n\n  const executedTxns = executedTxnsRes && executedTxnsRes.txns.length && executedTxnsRes.txns\n  const gasTankFilledTxns = useMemo(\n    () => executedTxns && executedTxns.length && getGasTankFilledTxns(executedTxns),\n    [executedTxns]\n  )\n\n  const availableFeeAssets = useMemo(\n    () =>\n      feeAssetsPerNetwork?.map((item: any) => {\n        const isFound = tokens?.find((x) => x.address.toLowerCase() === item.address.toLowerCase())\n        if (isFound)\n          return {\n            ...isFound,\n            tokenImageUrl: item.icon,\n            decimals: item.decimals,\n            symbol: item.symbol,\n            balance: isFound.balance,\n            disableGasTankDeposit: !!item.disableGasTankDeposit,\n            balanceUSD:\n              parseFloat(isFound.balance) *\n              parseFloat(\n                feeAssetsPerNetwork.find(\n                  (x: any) => x.address.toLowerCase() === isFound.address.toLowerCase()\n                ).price || 0\n              )\n          }\n\n        return {\n          ...item,\n          tokenImageUrl: item.icon,\n          balance: 0,\n          balanceUSD: 0,\n          decimals: 0,\n          address: item.address.toLowerCase(),\n          symbol: item.symbol.toUpperCase()\n        }\n      }),\n    [feeAssetsPerNetwork, tokens]\n  )\n\n  const totalSavedResult = useMemo(\n    () =>\n      gasTankTxns &&\n      gasTankTxns.length &&\n      gasTankTxns.map((item: any) => {\n        const feeTokenDetails = feeAssetsRes\n          ? feeAssetsRes.find((i: any) => i.symbol === item.feeToken)\n          : null\n        const savedGas = feeTokenDetails ? getAddedGas(feeTokenDetails) : null\n        return {\n          saved: savedGas ? item.feeInUSDPerGas * savedGas : 0.0,\n          cashback:\n            item.gasTankFee && item.gasTankFee.cashback\n              ? // @ts-ignore FIXME: Figure out why TypeScript complains\n                formatUnits(\n                  item.gasTankFee.cashback.toString(),\n                  feeTokenDetails?.decimals\n                ).toString() * feeTokenDetails?.price\n              : 0.0\n        }\n      }),\n    [feeAssetsRes, gasTankTxns]\n  )\n\n  return {\n    balancesRes,\n    gasTankBalances,\n    isLoading,\n    gasTankTxns,\n    feeAssetsRes,\n    gasTankFilledTxns,\n    totalSavedResult,\n    availableFeeAssets\n  }\n}\n"],"sourceRoot":""}