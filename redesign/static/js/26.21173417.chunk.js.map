{"version":3,"sources":["components/SignMessage/SignMessage.js"],"names":["SignMessage","everythingToSign","resolve","account","connections","relayerURL","totalRequests","addToast","useToasts","useState","codeRequired","passphrase","signingState","setSigningState","promiseResolve","setPromiseResolve","inputSecretRef","useRef","onConfirmationCodeRequired","confCodeRequired","approveQuickAcc","a","Promise","confCode","Error","password","code","useSignMessage","fetch","getHardwareWallet","getWallet","signer","signerExtra","chainId","approve","toSign","isLoading","hasPrivileges","hasProviderError","typeDataErr","isDeployed","dataV4","requestedNetwork","requestedChainId","isTypedData","confirmationType","connection","find","uri","wcUri","dApp","session","peerMeta","isDAppSupported","supportedDApps","includes","url","useEffect","current","focus","id","className","onClick","message","src","blockies","seed","toDataURL","alt","style","backgroundImage","icon","name","label","href","target","rel","icons","type","value","JSON","stringify","txn","getMessageAsText","readOnly","onSubmit","e","preventDefault","quickAccManager","required","minLength","placeholder","onChange","hidden","ref","onInput","length","danger","disabled","msg","isHexString","toUtf8String","_","toString"],"mappings":"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","file":"static/js/26.21173417.chunk.js","sourcesContent":["import useSignMessage from \"ambire-common/src/hooks/useSignMessage\"\nimport supportedDApps from \"ambire-common/src/constants/supportedDApps\"\n\nimport \"./SignMessage.scss\"\n\nimport { MdBrokenImage, MdCheck, MdClose, MdInfoOutline } from \"react-icons/md\"\nimport { toUtf8String, isHexString } from \"ethers/lib/utils\"\nimport * as blockies from \"blockies-ts\"\nimport { getWallet } from \"lib/getWallet\"\nimport { useToasts } from \"hooks/toasts\"\nimport { useState, useEffect, useRef } from \"react\"\nimport { Button, Loading, TextInput, ToolTip, DAppIncompatibilityWarningMsg } from \"components/common\"\n\nconst CONF_CODE_LENGTH = 6\n\nexport default function SignMessage({ everythingToSign, resolve, account, connections, relayerURL, totalRequests }) {\n  const defaultState = () => ({ codeRequired: false, passphrase: \"\" })\n  const { addToast } = useToasts()\n  const [signingState, setSigningState] = useState(defaultState())\n  const [promiseResolve, setPromiseResolve] = useState(null)\n  const inputSecretRef = useRef(null)\n\n  const onConfirmationCodeRequired = async (confCodeRequired, approveQuickAcc) => {\n    const confCode = await new Promise((resolve) => {\n      setPromiseResolve(() => resolve)\n    })\n    if (!confCode) throw new Error(\"You must enter a confirmation code\")\n    await approveQuickAcc({\n      password: signingState.passphrase,\n      code: confCode\n    })\n\n    return\n  }\n\n  const getHardwareWallet = () => {\n    // if quick account, wallet = await fromEncryptedBackup\n    // and just pass the signature as secondSig to signMsgHash\n    const wallet = getWallet(\n      {\n        signer: account.signer,\n        signerExtra: account.signerExtra,\n        chainId: 1 // does not matter\n      }\n    )\n\n    return wallet\n  }\n\n  const {\n    approve,\n    toSign,\n    isLoading,\n    hasPrivileges,\n    hasProviderError,\n    typeDataErr,\n    isDeployed,\n    dataV4,\n    requestedNetwork,\n    requestedChainId,\n    isTypedData,\n    confirmationType\n  } = useSignMessage({\n    fetch,\n    account,\n    everythingToSign,\n    relayerURL,\n    addToast,\n    resolve,\n    onConfirmationCodeRequired,\n    getHardwareWallet\n  })\n\n  const connection = connections.find(({ uri }) => uri === toSign.wcUri)\n  const dApp = connection ? connection?.session?.peerMeta || null : null\n  const isDAppSupported = dApp && supportedDApps.includes(dApp.url)\n\n  useEffect(() => {\n    if (confirmationType) inputSecretRef.current.focus()\n  }, [confirmationType])\n\n  if (!toSign || !account) return <></>\n\n  // should not happen unless chainId is dropped for some reason in addRequests\n  if (!requestedNetwork) {\n    return (\n      <div id='signMessage'>\n        <h3 className='error'>\n          Inexistant network for chainId : {requestedChainId}\n        </h3>\n        <Button\n          className='reject'\n          onClick={() => resolve({ message: \"signature denied\" })}\n        >\n          Reject\n        </Button>\n      </div>\n    )\n  }\n\n  if (typeDataErr)\n    return (\n      <div id='signMessage'>\n        <h3 className='error'>Invalid signing request: {typeDataErr}</h3>\n        <Button\n          className='reject'\n          onClick={() => resolve({ message: \"signature denied\" })}\n        >\n          Reject\n        </Button>\n      </div>\n    )\n\n  const handleInputConfCode = (e) => {\n    if (e.length === CONF_CODE_LENGTH) promiseResolve(e)\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault()\n    approve({\n      password: signingState.passphrase\n    })\n  }\n\n  return (\n    <div id='signMessage'>\n      <div id='signingAccount' className='panel'>\n        <div className='title'>Signing with account</div>\n        <div className='content'>\n          <div className='signingAccount-account'>\n            <img\n              className='icon'\n              src={blockies.create({ seed: account.id }).toDataURL()}\n              alt='Account Icon'\n            />\n            {account.id}\n          </div>\n          <div className='signingAccount-network'>\n            on\n            <div\n              className='icon'\n              style={{ backgroundImage: `url(${requestedNetwork.icon})` }}\n            />\n            <div className='address'>{requestedNetwork.name}</div>\n          </div>\n        </div>\n      </div>\n      <div className='panel'>\n        <div className='title signMessageTitle'>\n          <span className='signMessageTitle-title'>Sign message</span>\n          <span className='signMessageTitle-signatureType'>\n            <ToolTip\n              label={`${\n                isTypedData\n                  ? \"An EIP-712 typed data signature has been requested\"\n                  : \"An ethSign ethereum signature type has been requested\"\n              }`}\n            >\n              <MdInfoOutline />{\" \"}\n              <span>{isTypedData ? \"EIP-712 type\" : \"standard type\"}</span>\n            </ToolTip>\n          </span>\n        </div>\n\n        <div className='request-message'>\n          <div className='dapp-message'>\n            {dApp ? (\n              <a\n                className='dapp'\n                href={dApp.url}\n                target='_blank'\n                rel='noreferrer'\n              >\n                <div\n                  className='icon'\n                  style={{ backgroundImage: `url(${dApp.icons[0]})` }}\n                >\n                  <MdBrokenImage />\n                </div>\n                {dApp.name}\n              </a>\n            ) : (\n              \"A dApp \"\n            )}\n            is requesting your signature.\n          </div>\n          <span>\n            {totalRequests > 1\n              ? `You have ${totalRequests - 1} more pending requests.`\n              : \"\"}\n          </span>\n          {!isDAppSupported && <DAppIncompatibilityWarningMsg />}\n        </div>\n\n        <textarea\n          className='sign-message'\n          type='text'\n          value={\n            dataV4\n              ? JSON.stringify(dataV4, \"\\n\", \" \")\n              : toSign.txn !== \"0x\"\n              ? getMessageAsText(toSign.txn)\n              : \"(Empty message)\"\n          }\n          readOnly={true}\n        />\n\n        <div className='actions'>\n          <form onSubmit={handleSubmit}>\n            {account.signer.quickAccManager && isDeployed && (\n              <>\n                <TextInput\n                  password\n                  required\n                  minLength={3}\n                  placeholder='Account password'\n                  value={signingState.passphrase}\n                  onChange={(value) =>\n                    setSigningState({ ...signingState, passphrase: value })\n                  }\n                ></TextInput>\n                <input type='submit' hidden />\n              </>\n            )}\n\n            {confirmationType && (\n              <>\n                {confirmationType === \"email\" && (\n                  <span>\n                    A confirmation code has been sent to your email, it is valid\n                    for 3 minutes.\n                  </span>\n                )}\n                {confirmationType === \"otp\" && (\n                  <span>Please enter your OTP code</span>\n                )}\n                <TextInput\n                  ref={inputSecretRef}\n                  placeholder={\n                    confirmationType === \"otp\"\n                      ? \"Authenticator OTP code\"\n                      : \"Confirmation code\"\n                  }\n                  onInput={(value) => handleInputConfCode(value)}\n                />\n              </>\n            )}\n\n            {isDeployed === null && !hasProviderError && (\n              <div>\n                <Loading />\n              </div>\n            )}\n\n            {isDeployed === false && (\n              <div>\n                <h3 className='error'>You can't sign this message yet.</h3>\n                <h3 className='error'>\n                  You need to complete your first transaction on{\" \"}\n                  {requestedNetwork.name} network in order to be able to sign\n                  messages.\n                </h3>\n              </div>\n            )}\n\n            {hasPrivileges === false && (\n              <div>\n                <h3 className='error'>\n                  You do not have the privileges to sign this message.\n                </h3>\n              </div>\n            )}\n\n            {hasProviderError && (\n              <div>\n                <h3 className='error'>\n                  There was an issue with the network provider:{\" \"}\n                  {hasProviderError}\n                </h3>\n              </div>\n            )}\n\n            <div className='buttons'>\n              <Button\n                type='button'\n                danger\n                icon={<MdClose />}\n                className='reject'\n                onClick={() => resolve({ message: \"signature denied\" })}\n              >\n                Reject\n              </Button>\n              {isDeployed !== null && isDeployed && hasPrivileges && (\n                <Button type='submit' className='approve' disabled={isLoading}>\n                  {isLoading ? (\n                    <>\n                      <Loading />\n                      Signing...\n                    </>\n                  ) : (\n                    <>\n                      <MdCheck /> Sign\n                    </>\n                  )}\n                </Button>\n              )}\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction getMessageAsText(msg) {\n  if (isHexString(msg)) {\n    try {\n      return toUtf8String(msg)\n    } catch (_) {\n      return msg\n    }\n  }\n  return msg?.toString ? msg.toString() : msg + \"\" //what if dapp sends it as object? force string to avoid app crashing\n}\n"],"sourceRoot":""}