{"version":3,"sources":["../node_modules/bignumber.js/bignumber.js","../node_modules/ambire-common/src/constants/gasSpeeds.ts"],"names":["globalObject","BigNumber","isNumeric","mathceil","Math","ceil","mathfloor","floor","bignumberError","tooManyDigits","BASE","LOG_BASE","MAX_SAFE_INTEGER","POWS_TEN","SQRT_BASE","MAX","bitFloor","n","i","coeffToString","a","s","z","j","length","r","charCodeAt","slice","compare","x","y","b","xc","c","yc","k","e","l","intCheck","min","max","name","Error","isArray","obj","Object","prototype","toString","call","isOdd","toExponential","str","charAt","toFixedPoint","len","zs","clone","configObject","div","convertBase","parseNumeric","P","constructor","valueOf","ONE","DECIMAL_PLACES","ROUNDING_MODE","TO_EXP_NEG","TO_EXP_POS","MIN_EXP","MAX_EXP","CRYPTO","MODULO_MODE","POW_PRECISION","FORMAT","decimalSeparator","groupSeparator","groupSize","secondaryGroupSize","fractionGroupSeparator","fractionGroupSize","ALPHABET","alphabet","caseChanged","isNum","this","test","indexOf","replace","search","substring","round","DEBUG","toUpperCase","toLowerCase","push","format","rm","id","c0","ne","maxOrMin","args","method","m","normalise","pop","sd","d","ni","rd","pows10","out","ROUND_UP","ROUND_DOWN","ROUND_CEIL","ROUND_FLOOR","ROUND_HALF_UP","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_HALF_CEIL","ROUND_HALF_FLOOR","EUCLID","config","set","p","v","hasOwnProperty","crypto","getRandomValues","randomBytes","EXPONENTIAL_AT","RANGE","isBigNumber","_isBigNumber","maximum","arguments","lt","minimum","gt","random","pow2_53","random53bitInt","dp","rand","Uint32Array","copy","splice","decimal","toBaseOut","baseIn","baseOut","arrL","arr","reverse","sign","callerIsToString","pow","concat","multiply","base","temp","xlo","xhi","carry","klo","khi","aL","bL","cmp","subtract","more","prod","prodL","q","qc","rem","remL","rem0","xi","xL","yc0","yL","yz","NaN","basePrefix","dotAfter","dotBefore","isInfinityOrNaN","whitespaceOrPlus","isNaN","p1","p2","absoluteValue","abs","comparedTo","decimalPlaces","dividedBy","dividedToIntegerBy","idiv","exponentiatedBy","half","isModExp","nIsBig","nIsNeg","nIsOdd","isInteger","mod","times","integerValue","isEqualTo","eq","isFinite","isGreaterThan","isGreaterThanOrEqualTo","gte","isLessThan","isLessThanOrEqualTo","lte","isNegative","isPositive","isZero","minus","t","xLTy","plus","xe","ye","modulo","multipliedBy","xcL","ycL","ylo","yhi","zc","sqrtBase","negated","precision","shiftedBy","squareRoot","sqrt","rep","toFixed","toFormat","split","g1","g2","intPart","fractionPart","isNeg","intDigits","substr","RegExp","toFraction","md","d0","d1","d2","exp","n0","n1","toNumber","toPrecision","toJSON","define","GAS_SPEEDS"],"mappings":"yGAAA,OAAC,SAAWA,GACV,aAkDA,IAAIC,EACFC,EAAY,6CAEZC,EAAWC,KAAKC,KAChBC,EAAYF,KAAKG,MAEjBC,EAAiB,qBACjBC,EAAgBD,EAAiB,yDAEjCE,EAAO,KACPC,EAAW,GACXC,EAAmB,iBAEnBC,EAAW,CAAC,EAAG,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,KAAM,KAAM,MAC7EC,EAAY,IAKZC,EAAM,IAoiFR,SAASC,EAASC,GAChB,IAAIC,EAAQ,EAAJD,EACR,OAAOA,EAAI,GAAKA,IAAMC,EAAIA,EAAIA,EAAI,EAKpC,SAASC,EAAcC,GAMrB,IALA,IAAIC,EAAGC,EACLJ,EAAI,EACJK,EAAIH,EAAEI,OACNC,EAAIL,EAAE,GAAK,GAENF,EAAIK,GAAI,CAGb,IAFAF,EAAID,EAAEF,KAAO,GACbI,EAAIX,EAAWU,EAAEG,OACVF,IAAKD,EAAI,IAAMA,GACtBI,GAAKJ,EAIP,IAAKE,EAAIE,EAAED,OAA8B,KAAtBC,EAAEC,aAAaH,KAClC,OAAOE,EAAEE,MAAM,EAAGJ,EAAI,GAAK,GAK7B,SAASK,EAAQC,EAAGC,GAClB,IAAIV,EAAGW,EACLC,EAAKH,EAAEI,EACPC,EAAKJ,EAAEG,EACPf,EAAIW,EAAER,EACNE,EAAIO,EAAET,EACNc,EAAIN,EAAEO,EACNC,EAAIP,EAAEM,EAGR,IAAKlB,IAAMK,EAAG,OAAO,KAMrB,GAJAH,EAAIY,IAAOA,EAAG,GACdD,EAAIG,IAAOA,EAAG,GAGVd,GAAKW,EAAG,OAAOX,EAAIW,EAAI,GAAKR,EAAIL,EAGpC,GAAIA,GAAKK,EAAG,OAAOL,EAMnB,GAJAE,EAAIF,EAAI,EACRa,EAAII,GAAKE,GAGJL,IAAOE,EAAI,OAAOH,EAAI,GAAKC,EAAKZ,EAAI,GAAK,EAG9C,IAAKW,EAAG,OAAOI,EAAIE,EAAIjB,EAAI,GAAK,EAKhC,IAHAG,GAAKY,EAAIH,EAAGR,SAAWa,EAAIH,EAAGV,QAAUW,EAAIE,EAGvCnB,EAAI,EAAGA,EAAIK,EAAGL,IAAK,GAAIc,EAAGd,IAAMgB,EAAGhB,GAAI,OAAOc,EAAGd,GAAKgB,EAAGhB,GAAKE,EAAI,GAAK,EAG5E,OAAOe,GAAKE,EAAI,EAAIF,EAAIE,EAAIjB,EAAI,GAAK,EAOvC,SAASkB,EAASrB,EAAGsB,EAAKC,EAAKC,GAC7B,GAAIxB,EAAIsB,GAAOtB,EAAIuB,GAAOvB,KAAOA,EAAI,EAAId,EAASc,GAAKX,EAAUW,IAC/D,MAAMyB,MACJlC,GAAkBiC,GAAQ,aAA2B,iBAALxB,EAC7CA,EAAIsB,GAAOtB,EAAIuB,EAAM,kBAAoB,oBACzC,6BAA+BvB,GAKxC,SAAS0B,EAAQC,GACf,MAA8C,kBAAvCC,OAAOC,UAAUC,SAASC,KAAKJ,GAKxC,SAASK,EAAMhC,GACb,IAAIkB,EAAIlB,EAAEgB,EAAET,OAAS,EACrB,OAAOR,EAASC,EAAEmB,EAAIzB,IAAawB,GAAKlB,EAAEgB,EAAEE,GAAK,GAAK,EAIxD,SAASe,EAAcC,EAAKf,GAC1B,OAAQe,EAAI3B,OAAS,EAAI2B,EAAIC,OAAO,GAAK,IAAMD,EAAIxB,MAAM,GAAKwB,IAC5Df,EAAI,EAAI,IAAM,MAAQA,EAI1B,SAASiB,EAAaF,EAAKf,EAAGd,GAC5B,IAAIgC,EAAKC,EAGT,GAAInB,EAAI,EAAG,CAGT,IAAKmB,EAAKjC,EAAI,MAAOc,EAAGmB,GAAMjC,GAC9B6B,EAAMI,EAAKJ,OAOX,KAAMf,GAHNkB,EAAMH,EAAI3B,QAGK,CACb,IAAK+B,EAAKjC,EAAGc,GAAKkB,IAAOlB,EAAGmB,GAAMjC,GAClC6B,GAAOI,OACEnB,EAAIkB,IACbH,EAAMA,EAAIxB,MAAM,EAAGS,GAAK,IAAMe,EAAIxB,MAAMS,IAI5C,OAAOe,EAOTlD,EA9pFA,SAASuD,EAAMC,GACb,IAAIC,EAAKC,EAAaC,EACpBC,EAAI5D,EAAU6C,UAAY,CAAEgB,YAAa7D,EAAW8C,SAAU,KAAMgB,QAAS,MAC7EC,EAAM,IAAI/D,EAAU,GAUpBgE,EAAiB,GAajBC,EAAgB,EAMhBC,GAAc,EAIdC,EAAa,GAMbC,GAAW,IAKXC,EAAU,IAGVC,GAAS,EAkBTC,EAAc,EAIdC,EAAgB,EAGhBC,EAAS,CACPC,iBAAkB,IAClBC,eAAgB,IAChBC,UAAW,EACXC,mBAAoB,EACpBC,uBAAwB,OACxBC,kBAAmB,GAMrBC,EAAW,uCAgBb,SAAShF,EAAUgB,EAAGc,GACpB,IAAImD,EAAUjD,EAAGkD,EAAa/C,EAAGlB,EAAGkE,EAAO9B,EAAKH,EAC9CtB,EAAIwD,KAGN,KAAMxD,aAAa5B,GAKjB,OAAO,IAAIA,EAAUgB,EAAGc,GAG1B,GAAS,MAALA,EAAW,CAGb,GAAId,aAAahB,EAIf,OAHA4B,EAAER,EAAIJ,EAAEI,EACRQ,EAAEO,EAAInB,EAAEmB,OACRP,EAAEI,GAAKhB,EAAIA,EAAEgB,GAAKhB,EAAEU,QAAUV,GAMhC,IAFAmE,EAAoB,iBAALnE,IAEE,EAAJA,GAAS,EAAG,CAMvB,GAHAY,EAAER,EAAI,EAAIJ,EAAI,GAAKA,GAAKA,GAAI,GAAK,EAG7BA,MAAQA,EAAG,CACb,IAAKmB,EAAI,EAAGlB,EAAID,EAAGC,GAAK,GAAIA,GAAK,GAAIkB,KAGrC,OAFAP,EAAEO,EAAIA,OACNP,EAAEI,EAAI,CAAChB,IAITkC,EAAMlC,EAAI,OACL,CACL,IAAKf,EAAUoF,KAAKnC,EAAMlC,EAAI,IAAK,OAAO2C,EAAa/B,EAAGsB,EAAKiC,GAC/DvD,EAAER,EAAyB,IAArB8B,EAAIzB,WAAW,IAAYyB,EAAMA,EAAIxB,MAAM,IAAK,GAAK,GAIxDS,EAAIe,EAAIoC,QAAQ,OAAS,IAAGpC,EAAMA,EAAIqC,QAAQ,IAAK,MAGnDtE,EAAIiC,EAAIsC,OAAO,OAAS,GAGvBrD,EAAI,IAAGA,EAAIlB,GACfkB,IAAMe,EAAIxB,MAAMT,EAAI,GACpBiC,EAAMA,EAAIuC,UAAU,EAAGxE,IACdkB,EAAI,IAGbA,EAAIe,EAAI3B,YAGL,CAQL,GALAc,EAASP,EAAG,EAAGkD,EAASzD,OAAQ,QAChC2B,EAAMlC,EAAI,GAID,IAALc,EAEF,OAAO4D,EADP9D,EAAI,IAAI5B,EAAUgB,aAAahB,EAAYgB,EAAIkC,GAC/Bc,EAAiBpC,EAAEO,EAAI,EAAG8B,GAK5C,GAFAkB,EAAoB,iBAALnE,EAEJ,CAGT,GAAQ,EAAJA,GAAS,EAAG,OAAO2C,EAAa/B,EAAGsB,EAAKiC,EAAOrD,GAKnD,GAHAF,EAAER,EAAI,EAAIJ,EAAI,GAAKkC,EAAMA,EAAIxB,MAAM,IAAK,GAAK,EAGzC1B,EAAU2F,OAASzC,EAAIqC,QAAQ,YAAa,IAAIhE,OAAS,GAC3D,MAAMkB,MACJjC,EAAgBQ,GAIpBmE,GAAQ,OAERvD,EAAER,EAA0B,KAAtB8B,EAAIzB,WAAW,IAAayB,EAAMA,EAAIxB,MAAM,IAAK,GAAK,EAQ9D,IALAuD,EAAWD,EAAStD,MAAM,EAAGI,GAC7BK,EAAIlB,EAAI,EAIHoC,EAAMH,EAAI3B,OAAQN,EAAIoC,EAAKpC,IAC9B,GAAIgE,EAASK,QAAQtD,EAAIkB,EAAIC,OAAOlC,IAAM,EAAG,CAC3C,GAAS,KAALe,GAGF,GAAIf,EAAIkB,EAAG,CACTA,EAAIkB,EACJ,eAEG,IAAK6B,IAGNhC,GAAOA,EAAI0C,gBAAkB1C,EAAMA,EAAI2C,gBACvC3C,GAAOA,EAAI2C,gBAAkB3C,EAAMA,EAAI0C,gBAAgB,CACzDV,GAAc,EACdjE,GAAK,EACLkB,EAAI,EACJ,SAIJ,OAAOwB,EAAa/B,EAAGZ,EAAI,GAAImE,EAAOrD,IAOrCK,GAHLe,EAAMQ,EAAYR,EAAKpB,EAAG,GAAIF,EAAER,IAGnBkE,QAAQ,OAAS,EAAGpC,EAAMA,EAAIqC,QAAQ,IAAK,IACnDpD,EAAIe,EAAI3B,OAIf,IAAKN,EAAI,EAAyB,KAAtBiC,EAAIzB,WAAWR,GAAWA,KAGtC,IAAKoC,EAAMH,EAAI3B,OAAkC,KAA1B2B,EAAIzB,aAAa4B,KAIxC,GAFAH,EAAMA,EAAIxB,MAAMT,IAAKoC,GAEZ,CAIP,GAHAA,GAAOpC,EAGHkE,GAASnF,EAAU2F,OACrBtC,EAAM,KAAOrC,EAAIL,GAAoBK,IAAMX,EAAUW,IACnD,MAAMyB,MACJjC,EAAiBoB,EAAER,EAAIJ,GAM7B,IAHAmB,EAAIA,EAAIlB,EAAI,GAGJoD,EAGNzC,EAAEI,EAAIJ,EAAEO,EAAI,UAGP,GAAIA,EAAIiC,EAGbxC,EAAEI,EAAI,CAACJ,EAAEO,EAAI,OACR,CAWL,GAVAP,EAAEO,EAAIA,EACNP,EAAEI,EAAI,GAMNf,GAAKkB,EAAI,GAAKzB,EACVyB,EAAI,IAAGlB,GAAKP,GAEZO,EAAIoC,EAAK,CAGX,IAFIpC,GAAGW,EAAEI,EAAE8D,MAAM5C,EAAIxB,MAAM,EAAGT,IAEzBoC,GAAO3C,EAAUO,EAAIoC,GACxBzB,EAAEI,EAAE8D,MAAM5C,EAAIxB,MAAMT,EAAGA,GAAKP,IAG9BwC,EAAMA,EAAIxB,MAAMT,GAChBA,EAAIP,EAAWwC,EAAI3B,YAEnBN,GAAKoC,EAGP,KAAOpC,IAAKiC,GAAO,KACnBtB,EAAEI,EAAE8D,MAAM5C,SAKZtB,EAAEI,EAAI,CAACJ,EAAEO,EAAI,GA8xBjB,SAAS4D,EAAO/E,EAAGC,EAAG+E,EAAIC,GACxB,IAAIC,EAAI/D,EAAGgE,EAAI9C,EAAKH,EAKpB,GAHU,MAAN8C,EAAYA,EAAK/B,EAChB5B,EAAS2D,EAAI,EAAG,IAEhBhF,EAAEgB,EAAG,OAAOhB,EAAE8B,WAKnB,GAHAoD,EAAKlF,EAAEgB,EAAE,GACTmE,EAAKnF,EAAEmB,EAEE,MAALlB,EACFiC,EAAMhC,EAAcF,EAAEgB,GACtBkB,EAAY,GAAN+C,GAAiB,GAANA,GAAWE,GAAMjC,EAC/BjB,EAAcC,EAAKiD,GACnB/C,EAAaF,EAAKiD,EAAI,UAezB,GAVAhE,GAHAnB,EAAI0E,EAAM,IAAI1F,EAAUgB,GAAIC,EAAG+E,IAGzB7D,EAGNkB,GADAH,EAAMhC,EAAcF,EAAEgB,IACZT,OAOA,GAAN0E,GAAiB,GAANA,IAAYhF,GAAKkB,GAAKA,GAAK+B,GAAa,CAGrD,KAAOb,EAAMpC,EAAGiC,GAAO,IAAKG,KAC5BH,EAAMD,EAAcC,EAAKf,QAQzB,GAJAlB,GAAKkF,EACLjD,EAAME,EAAaF,EAAKf,EAAG,KAGvBA,EAAI,EAAIkB,GACV,KAAMpC,EAAI,EAAG,IAAKiC,GAAO,IAAKjC,IAAKiC,GAAO,WAG1C,IADAjC,GAAKkB,EAAIkB,GACD,EAEN,IADIlB,EAAI,GAAKkB,IAAKH,GAAO,KAClBjC,IAAKiC,GAAO,KAM3B,OAAOlC,EAAEI,EAAI,GAAK8E,EAAK,IAAMhD,EAAMA,EAKrC,SAASkD,EAASC,EAAMC,GACtB,IAAIC,EAAGvF,EACLC,EAAI,EAKN,IAHIyB,EAAQ2D,EAAK,MAAKA,EAAOA,EAAK,IAClCE,EAAI,IAAIvG,EAAUqG,EAAK,MAEdpF,EAAIoF,EAAK9E,QAAS,CAIzB,KAHAP,EAAI,IAAIhB,EAAUqG,EAAKpF,KAGhBG,EAAG,CACRmF,EAAIvF,EACJ,MACSsF,EAAOvD,KAAKwD,EAAGvF,KACxBuF,EAAIvF,GAIR,OAAOuF,EAQT,SAASC,EAAUxF,EAAGgB,EAAGG,GAKvB,IAJA,IAAIlB,EAAI,EACNK,EAAIU,EAAET,QAGAS,IAAIV,GAAIU,EAAEyE,OAGlB,IAAKnF,EAAIU,EAAE,GAAIV,GAAK,GAAIA,GAAK,GAAIL,KAkBjC,OAfKkB,EAAIlB,EAAIkB,EAAIzB,EAAW,GAAK2D,EAG/BrD,EAAEgB,EAAIhB,EAAEmB,EAAI,KAGHA,EAAIiC,EAGbpD,EAAEgB,EAAI,CAAChB,EAAEmB,EAAI,IAEbnB,EAAEmB,EAAIA,EACNnB,EAAEgB,EAAIA,GAGDhB,EAyDT,SAAS0E,EAAM9D,EAAG8E,EAAIV,EAAIxE,GACxB,IAAImF,EAAG1F,EAAGK,EAAGY,EAAGlB,EAAG4F,EAAIC,EACrB9E,EAAKH,EAAEI,EACP8E,EAASlG,EAGX,GAAImB,EAAI,CAQNgF,EAAK,CAGH,IAAKJ,EAAI,EAAGzE,EAAIH,EAAG,GAAIG,GAAK,GAAIA,GAAK,GAAIyE,KAIzC,IAHA1F,EAAIyF,EAAKC,GAGD,EACN1F,GAAKP,EACLY,EAAIoF,EAIJG,GAHA7F,EAAIe,EAAG6E,EAAK,IAGHE,EAAOH,EAAIrF,EAAI,GAAK,GAAK,OAIlC,IAFAsF,EAAK1G,GAAUe,EAAI,GAAKP,KAEdqB,EAAGR,OAAQ,CAEnB,IAAIC,EASF,MAAMuF,EANN,KAAOhF,EAAGR,QAAUqF,EAAI7E,EAAG+D,KAAK,IAChC9E,EAAI6F,EAAK,EACTF,EAAI,EAEJrF,GADAL,GAAKP,GACGA,EAAW,MAIhB,CAIL,IAHAM,EAAIkB,EAAIH,EAAG6E,GAGND,EAAI,EAAGzE,GAAK,GAAIA,GAAK,GAAIyE,KAU9BE,GAHAvF,GAJAL,GAAKP,GAIGA,EAAWiG,GAGV,EAAI,EAAI3F,EAAI8F,EAAOH,EAAIrF,EAAI,GAAK,GAAK,EAmBlD,GAfAE,EAAIA,GAAKkF,EAAK,GAKC,MAAd3E,EAAG6E,EAAK,KAAetF,EAAI,EAAIN,EAAIA,EAAI8F,EAAOH,EAAIrF,EAAI,IAEvDE,EAAIwE,EAAK,GACLa,GAAMrF,KAAa,GAANwE,GAAWA,IAAOpE,EAAER,EAAI,EAAI,EAAI,IAC9CyF,EAAK,GAAW,GAANA,IAAkB,GAANb,GAAWxE,GAAW,GAANwE,IAGrC/E,EAAI,EAAIK,EAAI,EAAIN,EAAI8F,EAAOH,EAAIrF,GAAK,EAAIS,EAAG6E,EAAK,IAAM,GAAM,GAC7DZ,IAAOpE,EAAER,EAAI,EAAI,EAAI,IAEpBsF,EAAK,IAAM3E,EAAG,GAiBhB,OAhBAA,EAAGR,OAAS,EAERC,GAGFkF,GAAM9E,EAAEO,EAAI,EAGZJ,EAAG,GAAK+E,GAAQpG,EAAWgG,EAAKhG,GAAYA,GAC5CkB,EAAEO,GAAKuE,GAAM,GAIb3E,EAAG,GAAKH,EAAEO,EAAI,EAGTP,EAkBT,GAdS,GAALX,GACFc,EAAGR,OAASqF,EACZ1E,EAAI,EACJ0E,MAEA7E,EAAGR,OAASqF,EAAK,EACjB1E,EAAI4E,EAAOpG,EAAWO,GAItBc,EAAG6E,GAAMtF,EAAI,EAAIjB,EAAUW,EAAI8F,EAAOH,EAAIrF,GAAKwF,EAAOxF,IAAMY,EAAI,GAI9DV,EAEF,OAAU,CAGR,GAAU,GAANoF,EAAS,CAGX,IAAK3F,EAAI,EAAGK,EAAIS,EAAG,GAAIT,GAAK,GAAIA,GAAK,GAAIL,KAEzC,IADAK,EAAIS,EAAG,IAAMG,EACRA,EAAI,EAAGZ,GAAK,GAAIA,GAAK,GAAIY,KAG1BjB,GAAKiB,IACPN,EAAEO,IACEJ,EAAG,IAAMtB,IAAMsB,EAAG,GAAK,IAG7B,MAGA,GADAA,EAAG6E,IAAO1E,EACNH,EAAG6E,IAAOnG,EAAM,MACpBsB,EAAG6E,KAAQ,EACX1E,EAAI,EAMV,IAAKjB,EAAIc,EAAGR,OAAoB,IAAZQ,IAAKd,GAAUc,EAAG0E,QAIpC7E,EAAEO,EAAIkC,EACRzC,EAAEI,EAAIJ,EAAEO,EAAI,KAGHP,EAAEO,EAAIiC,IACfxC,EAAEI,EAAI,CAACJ,EAAEO,EAAI,IAIjB,OAAOP,EA+oCT,OAxuEA5B,EAAUuD,MAAQA,EAElBvD,EAAUgH,SAAW,EACrBhH,EAAUiH,WAAa,EACvBjH,EAAUkH,WAAa,EACvBlH,EAAUmH,YAAc,EACxBnH,EAAUoH,cAAgB,EAC1BpH,EAAUqH,gBAAkB,EAC5BrH,EAAUsH,gBAAkB,EAC5BtH,EAAUuH,gBAAkB,EAC5BvH,EAAUwH,iBAAmB,EAC7BxH,EAAUyH,OAAS,EAmCnBzH,EAAU0H,OAAS1H,EAAU2H,IAAM,SAAUhF,GAC3C,IAAIiF,EAAGC,EAEP,GAAW,MAAPlF,EAAa,CAEf,GAAkB,iBAAPA,EA0HT,MAAMF,MACJlC,EAAiB,oBAAsBoC,GArFzC,GAlCIA,EAAImF,eAAeF,EAAI,oBAEzBvF,EADAwF,EAAIlF,EAAIiF,GACI,EAAG9G,EAAK8G,GACpB5D,EAAiB6D,GAKflF,EAAImF,eAAeF,EAAI,mBAEzBvF,EADAwF,EAAIlF,EAAIiF,GACI,EAAG,EAAGA,GAClB3D,EAAgB4D,GAOdlF,EAAImF,eAAeF,EAAI,oBAErBlF,EADJmF,EAAIlF,EAAIiF,KAENvF,EAASwF,EAAE,IAAK/G,EAAK,EAAG8G,GACxBvF,EAASwF,EAAE,GAAI,EAAG/G,EAAK8G,GACvB1D,EAAa2D,EAAE,GACf1D,EAAa0D,EAAE,KAEfxF,EAASwF,GAAI/G,EAAKA,EAAK8G,GACvB1D,IAAeC,EAAa0D,EAAI,GAAKA,EAAIA,KAOzClF,EAAImF,eAAeF,EAAI,SAEzB,GAAIlF,EADJmF,EAAIlF,EAAIiF,IAENvF,EAASwF,EAAE,IAAK/G,GAAM,EAAG8G,GACzBvF,EAASwF,EAAE,GAAI,EAAG/G,EAAK8G,GACvBxD,EAAUyD,EAAE,GACZxD,EAAUwD,EAAE,OACP,CAEL,GADAxF,EAASwF,GAAI/G,EAAKA,EAAK8G,IACnBC,EAGF,MAAMpF,MACJlC,EAAiBqH,EAAI,oBAAsBC,GAH7CzD,IAAYC,EAAUwD,EAAI,GAAKA,EAAIA,GAWzC,GAAIlF,EAAImF,eAAeF,EAAI,UAAW,CAEpC,IADAC,EAAIlF,EAAIiF,QACIC,EAcV,MAAMpF,MACJlC,EAAiBqH,EAAI,uBAAyBC,GAdhD,GAAIA,EAAG,CACL,GAAqB,oBAAVE,SAAyBA,SAClCA,OAAOC,kBAAmBD,OAAOE,YAIjC,MADA3D,GAAUuD,EACJpF,MACJlC,EAAiB,sBAJnB+D,EAASuD,OAOXvD,EAASuD,EA0Bf,GAhBIlF,EAAImF,eAAeF,EAAI,iBAEzBvF,EADAwF,EAAIlF,EAAIiF,GACI,EAAG,EAAGA,GAClBrD,EAAcsD,GAKZlF,EAAImF,eAAeF,EAAI,mBAEzBvF,EADAwF,EAAIlF,EAAIiF,GACI,EAAG9G,EAAK8G,GACpBpD,EAAgBqD,GAKdlF,EAAImF,eAAeF,EAAI,UAAW,CAEpC,GAAgB,iBADhBC,EAAIlF,EAAIiF,IAEH,MAAMnF,MACTlC,EAAiBqH,EAAI,mBAAqBC,GAFlBpD,EAASoD,EAOrC,GAAIlF,EAAImF,eAAeF,EAAI,YAAa,CAItC,GAAgB,iBAHhBC,EAAIlF,EAAIiF,KAGqB,iBAAiBvC,KAAKwC,GAGjD,MAAMpF,MACJlC,EAAiBqH,EAAI,aAAeC,GAHtC7C,EAAW6C,GAenB,MAAO,CACL7D,eAAgBA,EAChBC,cAAeA,EACfiE,eAAgB,CAAChE,EAAYC,GAC7BgE,MAAO,CAAC/D,EAASC,GACjBC,OAAQA,EACRC,YAAaA,EACbC,cAAeA,EACfC,OAAQA,EACRO,SAAUA,IAUdhF,EAAUoI,YAAc,SAAUP,GAChC,OAAOA,aAAa7H,GAAa6H,IAAwB,IAAnBA,EAAEQ,eAAyB,GASnErI,EAAUsI,QAAUtI,EAAUuC,IAAM,WAClC,OAAO6D,EAASmC,UAAW3E,EAAE4E,KAS/BxI,EAAUyI,QAAUzI,EAAUsC,IAAM,WAClC,OAAO8D,EAASmC,UAAW3E,EAAE8E,KAc/B1I,EAAU2I,OAAU,WAClB,IAAIC,EAAU,iBAMVC,EAAkB1I,KAAKwI,SAAWC,EAAW,QAC9C,WAAc,OAAOvI,EAAUF,KAAKwI,SAAWC,IAC/C,WAAc,OAA2C,SAAlB,WAAhBzI,KAAKwI,SAAwB,IACnC,QAAhBxI,KAAKwI,SAAsB,IAE/B,OAAO,SAAUG,GACf,IAAI3H,EAAGW,EAAGK,EAAGD,EAAG2F,EACd5G,EAAI,EACJe,EAAI,GACJ+G,EAAO,IAAI/I,EAAU+D,GAOvB,GALU,MAAN+E,EAAYA,EAAK9E,EAChB3B,EAASyG,EAAI,EAAGhI,GAErBoB,EAAIhC,EAAS4I,EAAKpI,GAEd4D,EAGF,GAAIyD,OAAOC,gBAAiB,CAI1B,IAFA7G,EAAI4G,OAAOC,gBAAgB,IAAIgB,YAAY9G,GAAK,IAEzCjB,EAAIiB,IAQT2F,EAAW,OAAP1G,EAAEF,IAAgBE,EAAEF,EAAI,KAAO,MAM1B,MACPa,EAAIiG,OAAOC,gBAAgB,IAAIgB,YAAY,IAC3C7H,EAAEF,GAAKa,EAAE,GACTX,EAAEF,EAAI,GAAKa,EAAE,KAKbE,EAAE8D,KAAK+B,EAAI,MACX5G,GAAK,GAGTA,EAAIiB,EAAI,MAGH,KAAI6F,OAAOE,YA2BhB,MADA3D,GAAS,EACH7B,MACJlC,EAAiB,sBAvBnB,IAFAY,EAAI4G,OAAOE,YAAY/F,GAAK,GAErBjB,EAAIiB,IAMT2F,EAAmB,iBAAN,GAAP1G,EAAEF,IAA0C,cAAXE,EAAEF,EAAI,GAC9B,WAAXE,EAAEF,EAAI,GAAgC,SAAXE,EAAEF,EAAI,IACjCE,EAAEF,EAAI,IAAM,KAAOE,EAAEF,EAAI,IAAM,GAAKE,EAAEF,EAAI,KAErC,KACP8G,OAAOE,YAAY,GAAGgB,KAAK9H,EAAGF,IAI9Be,EAAE8D,KAAK+B,EAAI,MACX5G,GAAK,GAGTA,EAAIiB,EAAI,EASZ,IAAKoC,EAEH,KAAOrD,EAAIiB,IACT2F,EAAIgB,KACI,OAAM7G,EAAEf,KAAO4G,EAAI,MAc/B,IAVA3F,EAAIF,IAAIf,GACR6H,GAAMpI,EAGFwB,GAAK4G,IACPjB,EAAIjH,EAASF,EAAWoI,GACxB9G,EAAEf,GAAKZ,EAAU6B,EAAI2F,GAAKA,GAIZ,IAAT7F,EAAEf,GAAUe,EAAEyE,MAAOxF,KAG5B,GAAIA,EAAI,EACNe,EAAI,CAACG,EAAI,OACJ,CAGL,IAAKA,GAAK,EAAa,IAATH,EAAE,GAAUA,EAAEkH,OAAO,EAAG,GAAI/G,GAAKzB,GAG/C,IAAKO,EAAI,EAAG4G,EAAI7F,EAAE,GAAI6F,GAAK,GAAIA,GAAK,GAAI5G,KAGpCA,EAAIP,IAAUyB,GAAKzB,EAAWO,GAKpC,OAFA8H,EAAK5G,EAAIA,EACT4G,EAAK/G,EAAIA,EACF+G,GAjIS,GA0IpBrF,EAAe,WACb,IAAIyF,EAAU,aAOd,SAASC,EAAUlG,EAAKmG,EAAQC,EAASrE,GAOvC,IANA,IAAI3D,EAEFiI,EADAC,EAAM,CAAC,GAEPvI,EAAI,EACJoC,EAAMH,EAAI3B,OAELN,EAAIoC,GAAM,CACf,IAAKkG,EAAOC,EAAIjI,OAAQgI,IAAQC,EAAID,IAASF,GAI7C,IAFAG,EAAI,IAAMvE,EAASK,QAAQpC,EAAIC,OAAOlC,MAEjCK,EAAI,EAAGA,EAAIkI,EAAIjI,OAAQD,IAEtBkI,EAAIlI,GAAKgI,EAAU,IACH,MAAdE,EAAIlI,EAAI,KAAYkI,EAAIlI,EAAI,GAAK,GACrCkI,EAAIlI,EAAI,IAAMkI,EAAIlI,GAAKgI,EAAU,EACjCE,EAAIlI,IAAMgI,GAKhB,OAAOE,EAAIC,UAMb,OAAO,SAAUvG,EAAKmG,EAAQC,EAASI,EAAMC,GAC3C,IAAI1E,EAAU0B,EAAGxE,EAAGD,EAAGV,EAAGI,EAAGG,EAAIF,EAC/BZ,EAAIiC,EAAIoC,QAAQ,KAChBwD,EAAK9E,EACLgC,EAAK/B,EA+BP,IA5BIhD,GAAK,IACPiB,EAAIsC,EAGJA,EAAgB,EAChBtB,EAAMA,EAAIqC,QAAQ,IAAK,IAEvB3D,GADAC,EAAI,IAAI7B,EAAUqJ,IACZO,IAAI1G,EAAI3B,OAASN,GACvBuD,EAAgBtC,EAKhBL,EAAEG,EAAIoH,EAAUhG,EAAalC,EAAcU,EAAEI,GAAIJ,EAAEO,EAAG,KACrD,GAAImH,EAASH,GACdtH,EAAEM,EAAIN,EAAEG,EAAET,QAUZY,EAAID,GALJH,EAAKqH,EAAUlG,EAAKmG,EAAQC,EAASK,GACjC1E,EAAWD,EAAUmE,IACrBlE,EAAWkE,EAASnE,KAGbzD,OAGO,GAAXQ,IAAKG,GAASH,EAAG0E,OAGxB,IAAK1E,EAAG,GAAI,OAAOkD,EAAS9B,OAAO,GAqCnC,GAlCIlC,EAAI,IACJkB,GAEFP,EAAEI,EAAID,EACNH,EAAEO,EAAIA,EAGNP,EAAER,EAAIsI,EAEN3H,GADAH,EAAI6B,EAAI7B,EAAGC,EAAGiH,EAAI9C,EAAIsD,IACftH,EACPR,EAAII,EAAEJ,EACNW,EAAIP,EAAEO,GASRlB,EAAIc,EAHJ4E,EAAIxE,EAAI2G,EAAK,GAOb5G,EAAIoH,EAAU,EACd9H,EAAIA,GAAKmF,EAAI,GAAkB,MAAb5E,EAAG4E,EAAI,GAEzBnF,EAAIwE,EAAK,GAAU,MAAL/E,GAAaO,KAAa,GAANwE,GAAWA,IAAOpE,EAAER,EAAI,EAAI,EAAI,IAC1DH,EAAIiB,GAAKjB,GAAKiB,IAAW,GAAN8D,GAAWxE,GAAW,GAANwE,GAAuB,EAAZjE,EAAG4E,EAAI,IACtDX,IAAOpE,EAAER,EAAI,EAAI,EAAI,IAKxBuF,EAAI,IAAM5E,EAAG,GAGfmB,EAAM1B,EAAI4B,EAAa6B,EAAS9B,OAAO,IAAK2F,EAAI7D,EAAS9B,OAAO,IAC1D8B,EAAS9B,OAAO,OACjB,CAML,GAHApB,EAAGR,OAASoF,EAGRnF,EAGF,MAAO8H,IAAWvH,IAAK4E,GAAK2C,GAC1BvH,EAAG4E,GAAK,EAEHA,MACDxE,EACFJ,EAAK,CAAC,GAAG8H,OAAO9H,IAMtB,IAAKG,EAAIH,EAAGR,QAASQ,IAAKG,KAG1B,IAAKjB,EAAI,EAAGiC,EAAM,GAAIjC,GAAKiB,EAAGgB,GAAO+B,EAAS9B,OAAOpB,EAAGd,OAGxDiC,EAAME,EAAaF,EAAKf,EAAG8C,EAAS9B,OAAO,IAI7C,OAAOD,GAlJI,GAwJfO,EAAO,WAGL,SAASqG,EAASlI,EAAGM,EAAG6H,GACtB,IAAIxD,EAAGyD,EAAMC,EAAKC,EAChBC,EAAQ,EACRlJ,EAAIW,EAAEL,OACN6I,EAAMlI,EAAIrB,EACVwJ,EAAMnI,EAAIrB,EAAY,EAExB,IAAKe,EAAIA,EAAEF,QAAST,KAKlBkJ,IADAH,EAAOI,GAHPH,EAAMrI,EAAEX,GAAKJ,IAEb0F,EAAI8D,EAAMJ,GADVC,EAAMtI,EAAEX,GAAKJ,EAAY,GACHuJ,GACGvJ,EAAaA,EAAasJ,GACnCJ,EAAO,IAAMxD,EAAI1F,EAAY,GAAKwJ,EAAMH,EACxDtI,EAAEX,GAAK+I,EAAOD,EAKhB,OAFII,IAAOvI,EAAI,CAACuI,GAAON,OAAOjI,IAEvBA,EAGT,SAASD,EAAQR,EAAGW,EAAGwI,EAAIC,GACzB,IAAItJ,EAAGuJ,EAEP,GAAIF,GAAMC,EACRC,EAAMF,EAAKC,EAAK,GAAK,OAGrB,IAAKtJ,EAAIuJ,EAAM,EAAGvJ,EAAIqJ,EAAIrJ,IAExB,GAAIE,EAAEF,IAAMa,EAAEb,GAAI,CAChBuJ,EAAMrJ,EAAEF,GAAKa,EAAEb,GAAK,GAAK,EACzB,MAKN,OAAOuJ,EAGT,SAASC,EAAStJ,EAAGW,EAAGwI,EAAIP,GAI1B,IAHA,IAAI9I,EAAI,EAGDqJ,KACLnJ,EAAEmJ,IAAOrJ,EACTA,EAAIE,EAAEmJ,GAAMxI,EAAEwI,GAAM,EAAI,EACxBnJ,EAAEmJ,GAAMrJ,EAAI8I,EAAO5I,EAAEmJ,GAAMxI,EAAEwI,GAI/B,MAAQnJ,EAAE,IAAMA,EAAEI,OAAS,EAAGJ,EAAE+H,OAAO,EAAG,KAI5C,OAAO,SAAUtH,EAAGC,EAAGiH,EAAI9C,EAAI+D,GAC7B,IAAIS,EAAKrI,EAAGlB,EAAGyJ,EAAM1J,EAAG2J,EAAMC,EAAOC,EAAGC,EAAIC,EAAKC,EAAMC,EAAMC,EAAIC,EAAIC,EACnEC,EAAIC,EACJlK,EAAIQ,EAAER,GAAKS,EAAET,EAAI,GAAK,EACtBW,EAAKH,EAAEI,EACPC,EAAKJ,EAAEG,EAGT,IAAKD,IAAOA,EAAG,KAAOE,IAAOA,EAAG,GAE9B,OAAO,IAAIjC,EAGT4B,EAAER,GAAMS,EAAET,IAAMW,GAAKE,GAAMF,EAAG,IAAME,EAAG,GAAMA,GAG7CF,GAAe,GAATA,EAAG,KAAYE,EAAS,EAAJb,EAAQA,EAAI,EAHamK,KAoBvD,IAZAT,GADAD,EAAI,IAAI7K,EAAUoB,IACXY,EAAI,GAEXZ,EAAI0H,GADJ3G,EAAIP,EAAEO,EAAIN,EAAEM,GACC,EAER4H,IACHA,EAAOtJ,EACP0B,EAAIpB,EAASa,EAAEO,EAAIzB,GAAYK,EAASc,EAAEM,EAAIzB,GAC9CU,EAAIA,EAAIV,EAAW,GAKhBO,EAAI,EAAGgB,EAAGhB,KAAOc,EAAGd,IAAM,GAAIA,KAInC,GAFIgB,EAAGhB,IAAMc,EAAGd,IAAM,IAAIkB,IAEtBf,EAAI,EACN0J,EAAGhF,KAAK,GACR4E,GAAO,MACF,CAwBL,IAvBAS,EAAKpJ,EAAGR,OACR8J,EAAKpJ,EAAGV,OACRN,EAAI,EACJG,GAAK,GAILJ,EAAIX,EAAU0J,GAAQ9H,EAAG,GAAK,KAItB,IACNA,EAAK6H,EAAS7H,EAAIjB,EAAG+I,GACrBhI,EAAK+H,EAAS/H,EAAIf,EAAG+I,GACrBsB,EAAKpJ,EAAGV,OACR4J,EAAKpJ,EAAGR,QAGV2J,EAAKG,EAELL,GADAD,EAAMhJ,EAAGL,MAAM,EAAG2J,IACP9J,OAGJyJ,EAAOK,EAAIN,EAAIC,KAAU,GAChCM,EAAKrJ,EAAGP,QACR4J,EAAK,CAAC,GAAGzB,OAAOyB,GAChBF,EAAMnJ,EAAG,GACLA,EAAG,IAAM8H,EAAO,GAAGqB,IAIvB,EAAG,CAOD,GANApK,EAAI,GAGJwJ,EAAM7I,EAAQM,EAAI8I,EAAKM,EAAIL,IAGjB,EAAG,CAqBX,GAjBAC,EAAOF,EAAI,GACPM,GAAML,IAAMC,EAAOA,EAAOlB,GAAQgB,EAAI,IAAM,KAGhD/J,EAAIX,EAAU4K,EAAOG,IAab,EAcN,IAXIpK,GAAK+I,IAAM/I,EAAI+I,EAAO,GAI1Ba,GADAD,EAAOb,EAAS7H,EAAIjB,EAAG+I,IACVxI,OACbyJ,EAAOD,EAAIxJ,OAM+B,GAAnCI,EAAQgJ,EAAMI,EAAKH,EAAOI,IAC/BhK,IAGAyJ,EAASE,EAAMU,EAAKT,EAAQU,EAAKrJ,EAAI2I,EAAOb,GAC5Ca,EAAQD,EAAKpJ,OACbiJ,EAAM,OAQC,GAALxJ,IAGFwJ,EAAMxJ,EAAI,GAKZ4J,GADAD,EAAO1I,EAAGP,SACGH,OAUf,GAPIqJ,EAAQI,IAAML,EAAO,CAAC,GAAGd,OAAOc,IAGpCF,EAASM,EAAKJ,EAAMK,EAAMjB,GAC1BiB,EAAOD,EAAIxJ,QAGC,GAARiJ,EAMF,KAAO7I,EAAQM,EAAI8I,EAAKM,EAAIL,GAAQ,GAClChK,IAGAyJ,EAASM,EAAKM,EAAKL,EAAOM,EAAKrJ,EAAI+I,EAAMjB,GACzCiB,EAAOD,EAAIxJ,YAGE,IAARiJ,IACTxJ,IACA+J,EAAM,CAAC,IAITD,EAAG7J,KAAOD,EAGN+J,EAAI,GACNA,EAAIC,KAAUjJ,EAAGmJ,IAAO,GAExBH,EAAM,CAAChJ,EAAGmJ,IACVF,EAAO,UAEDE,IAAOC,GAAgB,MAAVJ,EAAI,KAAe3J,KAE1CsJ,EAAiB,MAAVK,EAAI,GAGND,EAAG,IAAIA,EAAG5B,OAAO,EAAG,GAG3B,GAAIa,GAAQtJ,EAAM,CAGhB,IAAKQ,EAAI,EAAGG,EAAI0J,EAAG,GAAI1J,GAAK,GAAIA,GAAK,GAAIH,KAEzCyE,EAAMmF,EAAG/B,GAAM+B,EAAE1I,EAAIlB,EAAIkB,EAAIzB,EAAW,GAAK,EAAGsF,EAAI0E,QAIpDG,EAAE1I,EAAIA,EACN0I,EAAErJ,GAAKkJ,EAGT,OAAOG,GA9PJ,GAiYPlH,EAAgB,WACd,IAAI6H,EAAa,8BACfC,EAAW,cACXC,EAAY,cACZC,EAAkB,qBAClBC,EAAmB,6BAErB,OAAO,SAAUhK,EAAGsB,EAAKiC,EAAOrD,GAC9B,IAAIiI,EACF3I,EAAI+D,EAAQjC,EAAMA,EAAIqC,QAAQqG,EAAkB,IAGlD,GAAID,EAAgBtG,KAAKjE,GACvBQ,EAAER,EAAIyK,MAAMzK,GAAK,KAAOA,EAAI,GAAK,EAAI,EACrCQ,EAAEI,EAAIJ,EAAEO,EAAI,SACP,CACL,IAAKgD,IAGH/D,EAAIA,EAAEmE,QAAQiG,GAAY,SAAUjF,EAAGuF,EAAIC,GAEzC,OADAhC,EAAkC,MAA1BgC,EAAKA,EAAGlG,eAAwB,GAAW,KAANkG,EAAY,EAAI,EACrDjK,GAAKA,GAAKiI,EAAYxD,EAALuF,KAGvBhK,IACFiI,EAAOjI,EAGPV,EAAIA,EAAEmE,QAAQkG,EAAU,MAAMlG,QAAQmG,EAAW,SAG/CxI,GAAO9B,GAAG,OAAO,IAAIpB,EAAUoB,EAAG2I,GAKxC,GAAI/J,EAAU2F,MACZ,MAAMlD,MACHlC,EAAiB,SAAWuB,EAAI,SAAWA,EAAI,IAAM,YAAcoB,GAIxEtB,EAAEI,EAAIJ,EAAEO,EAAIP,EAAER,EAAI,OA1CR,GAwNhBwC,EAAEoI,cAAgBpI,EAAEqI,IAAM,WACxB,IAAIrK,EAAI,IAAI5B,EAAUoF,MAEtB,OADIxD,EAAER,EAAI,IAAGQ,EAAER,EAAI,GACZQ,GAWTgC,EAAEsI,WAAa,SAAUrK,EAAGC,GAC1B,OAAOH,EAAQyD,KAAM,IAAIpF,EAAU6B,EAAGC,KAiBxC8B,EAAEuI,cAAgBvI,EAAEkF,GAAK,SAAUA,EAAI9C,GACrC,IAAIhE,EAAGhB,EAAG6G,EACRjG,EAAIwD,KAEN,GAAU,MAAN0D,EAKF,OAJAzG,EAASyG,EAAI,EAAGhI,GACN,MAANkF,EAAYA,EAAK/B,EAChB5B,EAAS2D,EAAI,EAAG,GAEdN,EAAM,IAAI1F,EAAU4B,GAAIkH,EAAKlH,EAAEO,EAAI,EAAG6D,GAG/C,KAAMhE,EAAIJ,EAAEI,GAAI,OAAO,KAIvB,GAHAhB,IAAM6G,EAAI7F,EAAET,OAAS,GAAKR,EAASqE,KAAKjD,EAAIzB,IAAaA,EAGrDmH,EAAI7F,EAAE6F,GAAI,KAAOA,EAAI,IAAM,EAAGA,GAAK,GAAI7G,KAG3C,OAFIA,EAAI,IAAGA,EAAI,GAERA,GAwBT4C,EAAEwI,UAAYxI,EAAEH,IAAM,SAAU5B,EAAGC,GACjC,OAAO2B,EAAI2B,KAAM,IAAIpF,EAAU6B,EAAGC,GAAIkC,EAAgBC,IAQxDL,EAAEyI,mBAAqBzI,EAAE0I,KAAO,SAAUzK,EAAGC,GAC3C,OAAO2B,EAAI2B,KAAM,IAAIpF,EAAU6B,EAAGC,GAAI,EAAG,IAmB3C8B,EAAE2I,gBAAkB3I,EAAEgG,IAAM,SAAU5I,EAAGuF,GACvC,IAAIiG,EAAMC,EAAUvK,EAASwK,EAAQC,EAAQC,EAAQ/K,EACnDD,EAAIwD,KAKN,IAHApE,EAAI,IAAIhB,EAAUgB,IAGZgB,IAAMhB,EAAE6L,YACZ,MAAMpK,MACHlC,EAAiB,4BAA8BS,GASpD,GANS,MAALuF,IAAWA,EAAI,IAAIvG,EAAUuG,IAGjCmG,EAAS1L,EAAEmB,EAAI,IAGVP,EAAEI,IAAMJ,EAAEI,EAAE,IAAgB,GAAVJ,EAAEI,EAAE,KAAYJ,EAAEO,GAAmB,GAAdP,EAAEI,EAAET,SAAgBP,EAAEgB,IAAMhB,EAAEgB,EAAE,GAK5E,OADAH,EAAI,IAAI7B,EAAUG,KAAKyJ,KAAKhI,EAAEkC,UAAW4I,EAAS,EAAI1J,EAAMhC,IAAMA,IAC3DuF,EAAI1E,EAAEiL,IAAIvG,GAAK1E,EAKxB,GAFA8K,EAAS3L,EAAEI,EAAI,EAEXmF,EAAG,CAGL,GAAIA,EAAEvE,GAAKuE,EAAEvE,EAAE,IAAMuE,EAAEnF,EAAG,OAAO,IAAIpB,EAAUuL,MAE/CkB,GAAYE,GAAU/K,EAAEiL,aAAetG,EAAEsG,eAE3BjL,EAAIA,EAAEkL,IAAIvG,QAInB,IAAIvF,EAAEmB,EAAI,IAAMP,EAAEO,EAAI,GAAKP,EAAEO,GAAK,IAAa,GAAPP,EAAEO,EAE7CP,EAAEI,EAAE,GAAK,GAAK0K,GAAU9K,EAAEI,EAAE,IAAM,KAElCJ,EAAEI,EAAE,GAAK,MAAQ0K,GAAU9K,EAAEI,EAAE,IAAM,YASvC,OANAE,EAAIN,EAAER,EAAI,GAAK4B,EAAMhC,IAAM,EAAI,EAG3BY,EAAEO,GAAK,IAAGD,EAAI,EAAIA,GAGf,IAAIlC,EAAU2M,EAAS,EAAIzK,EAAIA,GAE7BsC,IAKTtC,EAAIhC,EAASsE,EAAgB9D,EAAW,IAe1C,IAZIgM,GACFF,EAAO,IAAIxM,EAAU,IACrB4M,EAAS5J,EAAMhC,IAEf4L,EAAS5L,EAAI,EAGX2L,IAAQ3L,EAAEI,EAAI,GAElBS,EAAI,IAAI7B,EAAU+D,KAGR,CAER,GAAI6I,EAAQ,CAEV,KADA/K,EAAIA,EAAEkL,MAAMnL,IACLI,EAAG,MAENE,EACEL,EAAEG,EAAET,OAASW,IAAGL,EAAEG,EAAET,OAASW,GACxBuK,IACT5K,EAAIA,EAAEiL,IAAIvG,IAId,GAAImG,EAAQ,CAGV,GADAhH,EADA1E,EAAIA,EAAE+L,MAAMP,GACHxL,EAAEmB,EAAI,EAAG,IACbnB,EAAEgB,EAAE,GAAI,MACb0K,EAAS1L,EAAEmB,EAAI,GACfyK,EAAS5J,EAAMhC,OACV,CAEL,KADAA,EAAIX,EAAUW,EAAI,IACV,MACR4L,EAAS5L,EAAI,EAGfY,EAAIA,EAAEmL,MAAMnL,GAERM,EACEN,EAAEI,GAAKJ,EAAEI,EAAET,OAASW,IAAGN,EAAEI,EAAET,OAASW,GAC/BuK,IACT7K,EAAIA,EAAEkL,IAAIvG,IAId,OAAIkG,EAAiB5K,GACjB8K,IAAQ9K,EAAIkC,EAAIN,IAAI5B,IAEjB0E,EAAI1E,EAAEiL,IAAIvG,GAAKrE,EAAIwD,EAAM7D,EAAG2C,EAAeP,EA9G3ByG,WA8GkD7I,IAY3E+B,EAAEoJ,aAAe,SAAUhH,GACzB,IAAIhF,EAAI,IAAIhB,EAAUoF,MAGtB,OAFU,MAANY,EAAYA,EAAK/B,EAChB5B,EAAS2D,EAAI,EAAG,GACdN,EAAM1E,EAAGA,EAAEmB,EAAI,EAAG6D,IAQ3BpC,EAAEqJ,UAAYrJ,EAAEsJ,GAAK,SAAUrL,EAAGC,GAChC,OAA8C,IAAvCH,EAAQyD,KAAM,IAAIpF,EAAU6B,EAAGC,KAOxC8B,EAAEuJ,SAAW,WACX,QAAS/H,KAAKpD,GAQhB4B,EAAEwJ,cAAgBxJ,EAAE8E,GAAK,SAAU7G,EAAGC,GACpC,OAAOH,EAAQyD,KAAM,IAAIpF,EAAU6B,EAAGC,IAAM,GAQ9C8B,EAAEyJ,uBAAyBzJ,EAAE0J,IAAM,SAAUzL,EAAGC,GAC9C,OAAoD,KAA5CA,EAAIH,EAAQyD,KAAM,IAAIpF,EAAU6B,EAAGC,MAAoB,IAANA,GAQ3D8B,EAAEiJ,UAAY,WACZ,QAASzH,KAAKpD,GAAKjB,EAASqE,KAAKjD,EAAIzB,GAAY0E,KAAKpD,EAAET,OAAS,GAQnEqC,EAAE2J,WAAa3J,EAAE4E,GAAK,SAAU3G,EAAGC,GACjC,OAAOH,EAAQyD,KAAM,IAAIpF,EAAU6B,EAAGC,IAAM,GAQ9C8B,EAAE4J,oBAAsB5J,EAAE6J,IAAM,SAAU5L,EAAGC,GAC3C,OAAqD,KAA7CA,EAAIH,EAAQyD,KAAM,IAAIpF,EAAU6B,EAAGC,MAAqB,IAANA,GAO5D8B,EAAEiI,MAAQ,WACR,OAAQzG,KAAKhE,GAOfwC,EAAE8J,WAAa,WACb,OAAOtI,KAAKhE,EAAI,GAOlBwC,EAAE+J,WAAa,WACb,OAAOvI,KAAKhE,EAAI,GAOlBwC,EAAEgK,OAAS,WACT,QAASxI,KAAKpD,GAAkB,GAAboD,KAAKpD,EAAE,IAwB5B4B,EAAEiK,MAAQ,SAAUhM,EAAGC,GACrB,IAAIb,EAAGK,EAAGwM,EAAGC,EACXnM,EAAIwD,KACJjE,EAAIS,EAAER,EAMR,GAHAU,GADAD,EAAI,IAAI7B,EAAU6B,EAAGC,IACfV,GAGDD,IAAMW,EAAG,OAAO,IAAI9B,EAAUuL,KAGnC,GAAIpK,GAAKW,EAEP,OADAD,EAAET,GAAKU,EACAF,EAAEoM,KAAKnM,GAGhB,IAAIoM,EAAKrM,EAAEO,EAAIzB,EACbwN,EAAKrM,EAAEM,EAAIzB,EACXqB,EAAKH,EAAEI,EACPC,EAAKJ,EAAEG,EAET,IAAKiM,IAAOC,EAAI,CAGd,IAAKnM,IAAOE,EAAI,OAAOF,GAAMF,EAAET,GAAKU,EAAGD,GAAK,IAAI7B,EAAUiC,EAAKL,EAAI2J,KAGnE,IAAKxJ,EAAG,KAAOE,EAAG,GAGhB,OAAOA,EAAG,IAAMJ,EAAET,GAAKU,EAAGD,GAAK,IAAI7B,EAAU+B,EAAG,GAAKH,EAGnC,GAAjBqC,GAAsB,EAAI,GAS/B,GALAgK,EAAKlN,EAASkN,GACdC,EAAKnN,EAASmN,GACdnM,EAAKA,EAAGL,QAGJP,EAAI8M,EAAKC,EAAI,CAaf,KAXIH,EAAO5M,EAAI,IACbA,GAAKA,EACL2M,EAAI/L,IAEJmM,EAAKD,EACLH,EAAI7L,GAGN6L,EAAErE,UAGG3H,EAAIX,EAAGW,IAAKgM,EAAEhI,KAAK,IACxBgI,EAAErE,eAMF,IAFAnI,GAAKyM,GAAQ5M,EAAIY,EAAGR,SAAWO,EAAIG,EAAGV,SAAWJ,EAAIW,EAEhDX,EAAIW,EAAI,EAAGA,EAAIR,EAAGQ,IAErB,GAAIC,EAAGD,IAAMG,EAAGH,GAAI,CAClBiM,EAAOhM,EAAGD,GAAKG,EAAGH,GAClB,MAYN,GANIiM,IAAMD,EAAI/L,EAAIA,EAAKE,EAAIA,EAAK6L,EAAGjM,EAAET,GAAKS,EAAET,IAE5CU,GAAKR,EAAIW,EAAGV,SAAWN,EAAIc,EAAGR,SAItB,EAAG,KAAOO,IAAKC,EAAGd,KAAO,GAIjC,IAHAa,EAAIrB,EAAO,EAGJa,EAAIH,GAAI,CAEb,GAAIY,IAAKT,GAAKW,EAAGX,GAAI,CACnB,IAAKL,EAAIK,EAAGL,IAAMc,IAAKd,GAAIc,EAAGd,GAAKa,KACjCC,EAAGd,GACLc,EAAGT,IAAMb,EAGXsB,EAAGT,IAAMW,EAAGX,GAId,KAAgB,GAATS,EAAG,GAASA,EAAGmH,OAAO,EAAG,KAAMgF,GAGtC,OAAKnM,EAAG,GAWDyE,EAAU3E,EAAGE,EAAImM,IAPtBrM,EAAET,EAAqB,GAAjB6C,GAAsB,EAAI,EAChCpC,EAAEG,EAAI,CAACH,EAAEM,EAAI,GACNN,IA8BX+B,EAAEuK,OAASvK,EAAEkJ,IAAM,SAAUjL,EAAGC,GAC9B,IAAI+I,EAAGzJ,EACLQ,EAAIwD,KAKN,OAHAvD,EAAI,IAAI7B,EAAU6B,EAAGC,IAGhBF,EAAEI,IAAMH,EAAET,GAAKS,EAAEG,IAAMH,EAAEG,EAAE,GACvB,IAAIhC,EAAUuL,MAGX1J,EAAEG,GAAKJ,EAAEI,IAAMJ,EAAEI,EAAE,GACtB,IAAIhC,EAAU4B,IAGJ,GAAf2C,GAIFnD,EAAIS,EAAET,EACNS,EAAET,EAAI,EACNyJ,EAAIpH,EAAI7B,EAAGC,EAAG,EAAG,GACjBA,EAAET,EAAIA,EACNyJ,EAAEzJ,GAAKA,GAEPyJ,EAAIpH,EAAI7B,EAAGC,EAAG,EAAG0C,IAGnB1C,EAAID,EAAEiM,MAAMhD,EAAEkC,MAAMlL,KAGbG,EAAE,IAAqB,GAAfuC,IAAkB1C,EAAET,EAAIQ,EAAER,GAElCS,IAwBT+B,EAAEwK,aAAexK,EAAEmJ,MAAQ,SAAUlL,EAAGC,GACtC,IAAIE,EAAGG,EAAGlB,EAAGK,EAAGY,EAAGqE,EAAG8H,EAAKpE,EAAKC,EAAKoE,EAAKC,EAAKC,EAAKC,EAClD1E,EAAM2E,EACN9M,EAAIwD,KACJrD,EAAKH,EAAEI,EACPC,GAAMJ,EAAI,IAAI7B,EAAU6B,EAAGC,IAAIE,EAGjC,IAAKD,IAAOE,IAAOF,EAAG,KAAOE,EAAG,GAmB9B,OAhBKL,EAAER,IAAMS,EAAET,GAAKW,IAAOA,EAAG,KAAOE,GAAMA,IAAOA,EAAG,KAAOF,EAC1DF,EAAEG,EAAIH,EAAEM,EAAIN,EAAET,EAAI,MAElBS,EAAET,GAAKQ,EAAER,EAGJW,GAAOE,GAKVJ,EAAEG,EAAI,CAAC,GACPH,EAAEM,EAAI,GALNN,EAAEG,EAAIH,EAAEM,EAAI,MASTN,EAYT,IATAM,EAAIpB,EAASa,EAAEO,EAAIzB,GAAYK,EAASc,EAAEM,EAAIzB,GAC9CmB,EAAET,GAAKQ,EAAER,GACTiN,EAAMtM,EAAGR,SACT+M,EAAMrM,EAAGV,UAGMkN,EAAK1M,EAAIA,EAAKE,EAAIA,EAAKwM,EAAIxN,EAAIoN,EAAKA,EAAMC,EAAKA,EAAMrN,GAG/DA,EAAIoN,EAAMC,EAAKG,EAAK,GAAIxN,IAAKwN,EAAG3I,KAAK,IAK1C,IAHAiE,EAAOtJ,EACPiO,EAAW7N,EAENI,EAAIqN,IAAOrN,GAAK,GAAI,CAKvB,IAJAe,EAAI,EACJuM,EAAMtM,EAAGhB,GAAKyN,EACdF,EAAMvM,EAAGhB,GAAKyN,EAAW,EAEXpN,EAAIL,GAAbiB,EAAImM,GAAgB/M,EAAIL,GAK3Be,IADAiI,EAAMsE,GAHNtE,EAAMlI,IAAKG,GAAKwM,IAEhBnI,EAAIiI,EAAMvE,GADVC,EAAMnI,EAAGG,GAAKwM,EAAW,GACHH,GACEG,EAAYA,EAAYD,EAAGnN,GAAKU,GAC7C+H,EAAO,IAAMxD,EAAImI,EAAW,GAAKF,EAAMtE,EAClDuE,EAAGnN,KAAO2I,EAAMF,EAGlB0E,EAAGnN,GAAKU,EASV,OANIA,IACAG,EAEFsM,EAAGvF,OAAO,EAAG,GAGR1C,EAAU3E,EAAG4M,EAAItM,IAQ1ByB,EAAE+K,QAAU,WACV,IAAI/M,EAAI,IAAI5B,EAAUoF,MAEtB,OADAxD,EAAER,GAAKQ,EAAER,GAAK,KACPQ,GAwBTgC,EAAEoK,KAAO,SAAUnM,EAAGC,GACpB,IAAIgM,EACFlM,EAAIwD,KACJjE,EAAIS,EAAER,EAMR,GAHAU,GADAD,EAAI,IAAI7B,EAAU6B,EAAGC,IACfV,GAGDD,IAAMW,EAAG,OAAO,IAAI9B,EAAUuL,KAGlC,GAAIpK,GAAKW,EAER,OADAD,EAAET,GAAKU,EACAF,EAAEiM,MAAMhM,GAGjB,IAAIoM,EAAKrM,EAAEO,EAAIzB,EACbwN,EAAKrM,EAAEM,EAAIzB,EACXqB,EAAKH,EAAEI,EACPC,EAAKJ,EAAEG,EAET,IAAKiM,IAAOC,EAAI,CAGd,IAAKnM,IAAOE,EAAI,OAAO,IAAIjC,EAAUmB,EAAI,GAIzC,IAAKY,EAAG,KAAOE,EAAG,GAAI,OAAOA,EAAG,GAAKJ,EAAI,IAAI7B,EAAU+B,EAAG,GAAKH,EAAQ,EAAJT,GAQrE,GALA8M,EAAKlN,EAASkN,GACdC,EAAKnN,EAASmN,GACdnM,EAAKA,EAAGL,QAGJP,EAAI8M,EAAKC,EAAI,CAUf,IATI/M,EAAI,GACN+M,EAAKD,EACLH,EAAI7L,IAEJd,GAAKA,EACL2M,EAAI/L,GAGN+L,EAAErE,UACKtI,IAAK2M,EAAEhI,KAAK,IACnBgI,EAAErE,UAUJ,KAPAtI,EAAIY,EAAGR,SACPO,EAAIG,EAAGV,QAGK,IAAGuM,EAAI7L,EAAIA,EAAKF,EAAIA,EAAK+L,EAAGhM,EAAIX,GAGvCA,EAAI,EAAGW,GACVX,GAAKY,IAAKD,GAAKC,EAAGD,GAAKG,EAAGH,GAAKX,GAAKV,EAAO,EAC3CsB,EAAGD,GAAKrB,IAASsB,EAAGD,GAAK,EAAIC,EAAGD,GAAKrB,EAUvC,OAPIU,IACFY,EAAK,CAACZ,GAAG0I,OAAO9H,KACdmM,GAKG1H,EAAU3E,EAAGE,EAAImM,IAmB1BtK,EAAEgL,UAAYhL,EAAE8C,GAAK,SAAUA,EAAIV,GACjC,IAAIhE,EAAGhB,EAAG6G,EACRjG,EAAIwD,KAEN,GAAU,MAANsB,GAAcA,MAASA,EAKzB,OAJArE,EAASqE,EAAI,EAAG5F,GACN,MAANkF,EAAYA,EAAK/B,EAChB5B,EAAS2D,EAAI,EAAG,GAEdN,EAAM,IAAI1F,EAAU4B,GAAI8E,EAAIV,GAGrC,KAAMhE,EAAIJ,EAAEI,GAAI,OAAO,KAIvB,GAFAhB,GADA6G,EAAI7F,EAAET,OAAS,GACPb,EAAW,EAEfmH,EAAI7F,EAAE6F,GAAI,CAGZ,KAAOA,EAAI,IAAM,EAAGA,GAAK,GAAI7G,KAG7B,IAAK6G,EAAI7F,EAAE,GAAI6F,GAAK,GAAIA,GAAK,GAAI7G,MAKnC,OAFI0F,GAAM9E,EAAEO,EAAI,EAAInB,IAAGA,EAAIY,EAAEO,EAAI,GAE1BnB,GAYT4C,EAAEiL,UAAY,SAAU3M,GAEtB,OADAG,EAASH,GAAG,iBAAmBvB,GACxByE,KAAK2H,MAAM,KAAO7K,IAe3B0B,EAAEkL,WAAalL,EAAEmL,KAAO,WACtB,IAAIxI,EAAGvF,EAAGQ,EAAGwN,EAAKlB,EAChBlM,EAAIwD,KACJpD,EAAIJ,EAAEI,EACNZ,EAAIQ,EAAER,EACNe,EAAIP,EAAEO,EACN2G,EAAK9E,EAAiB,EACtBwI,EAAO,IAAIxM,EAAU,OAGvB,GAAU,IAANoB,IAAYY,IAAMA,EAAE,GACtB,OAAO,IAAIhC,GAAWoB,GAAKA,EAAI,KAAOY,GAAKA,EAAE,IAAMuJ,IAAMvJ,EAAIJ,EAAI,KA8BnE,GAtBS,IAJTR,EAAIjB,KAAK4O,MAAMnN,KAIDR,GAAK,OACjBJ,EAAIE,EAAcc,IACXT,OAASY,GAAK,GAAK,IAAGnB,GAAK,KAClCI,EAAIjB,KAAK4O,KAAK/N,GACdmB,EAAIpB,GAAUoB,EAAI,GAAK,IAAMA,EAAI,GAAKA,EAAI,GAS1CX,EAAI,IAAIxB,EANNgB,EADEI,GAAK,IACH,KAAOe,GAEXnB,EAAII,EAAE6B,iBACAvB,MAAM,EAAGV,EAAEsE,QAAQ,KAAO,GAAKnD,IAKvCX,EAAI,IAAIxB,EAAUoB,EAAI,IAOpBI,EAAEQ,EAAE,GAMN,KAJAZ,GADAe,EAAIX,EAAEW,GACE2G,GACA,IAAG1H,EAAI,KAOb,GAHA0M,EAAItM,EACJA,EAAIgL,EAAKO,MAAMe,EAAEE,KAAKvK,EAAI7B,EAAGkM,EAAGhF,EAAI,KAEhC5H,EAAc4M,EAAE9L,GAAKN,MAAM,EAAGN,MAAQJ,EACvCE,EAAcM,EAAEQ,IAAIN,MAAM,EAAGN,GAAI,CAWlC,GANII,EAAEW,EAAIA,KAAKf,EAMN,SALTJ,EAAIA,EAAEU,MAAMN,EAAI,EAAGA,EAAI,MAKH4N,GAAY,QAALhO,GAgBpB,EAICA,KAAOA,EAAEU,MAAM,IAAqB,KAAfV,EAAEmC,OAAO,MAGlCuC,EAAMlE,EAAGA,EAAEW,EAAI6B,EAAiB,EAAG,GACnCuC,GAAK/E,EAAEuL,MAAMvL,GAAG0L,GAAGtL,IAGrB,MAvBA,IAAKoN,IACHtJ,EAAMoI,EAAGA,EAAE3L,EAAI6B,EAAiB,EAAG,GAE/B8J,EAAEf,MAAMe,GAAGZ,GAAGtL,IAAI,CACpBJ,EAAIsM,EACJ,MAIJhF,GAAM,EACN1H,GAAK,EACL4N,EAAM,EAkBd,OAAOtJ,EAAMlE,EAAGA,EAAEW,EAAI6B,EAAiB,EAAGC,EAAesC,IAa3D3C,EAAEX,cAAgB,SAAU6F,EAAI9C,GAK9B,OAJU,MAAN8C,IACFzG,EAASyG,EAAI,EAAGhI,GAChBgI,KAEK/C,EAAOX,KAAM0D,EAAI9C,EAAI,IAgB9BpC,EAAEqL,QAAU,SAAUnG,EAAI9C,GAKxB,OAJU,MAAN8C,IACFzG,EAASyG,EAAI,EAAGhI,GAChBgI,EAAKA,EAAK1D,KAAKjD,EAAI,GAEd4D,EAAOX,KAAM0D,EAAI9C,IAuB1BpC,EAAEsL,SAAW,SAAUpG,EAAI9C,GACzB,IAAI9C,EAAMkC,KAAK6J,QAAQnG,EAAI9C,GAE3B,GAAIZ,KAAKpD,EAAG,CACV,IAAIf,EACFuI,EAAMtG,EAAIiM,MAAM,KAChBC,GAAM3K,EAAOG,UACbyK,GAAM5K,EAAOI,mBACbF,EAAiBF,EAAOE,eACxB2K,EAAU9F,EAAI,GACd+F,EAAe/F,EAAI,GACnBgG,EAAQpK,KAAKhE,EAAI,EACjBqO,EAAYD,EAAQF,EAAQ5N,MAAM,GAAK4N,EACvCjM,EAAMoM,EAAUlO,OAIlB,GAFI8N,IAAIpO,EAAImO,EAAIA,EAAKC,EAAIA,EAAKpO,EAAGoC,GAAOpC,GAEpCmO,EAAK,GAAK/L,EAAM,EAAG,CAIrB,IAHApC,EAAIoC,EAAM+L,GAAMA,EAChBE,EAAUG,EAAUC,OAAO,EAAGzO,GAEvBA,EAAIoC,EAAKpC,GAAKmO,EACnBE,GAAW3K,EAAiB8K,EAAUC,OAAOzO,EAAGmO,GAG9CC,EAAK,IAAGC,GAAW3K,EAAiB8K,EAAU/N,MAAMT,IACpDuO,IAAOF,EAAU,IAAMA,GAG7BpM,EAAMqM,EACHD,EAAU7K,EAAOC,mBAAqB2K,GAAM5K,EAAOM,mBAClDwK,EAAahK,QAAQ,IAAIoK,OAAO,OAASN,EAAK,OAAQ,KACvD,KAAO5K,EAAOK,wBACbyK,GACDD,EAGL,OAAOpM,GAeTU,EAAEgM,WAAa,SAAUC,GACvB,IAAIrG,EAAK7C,EAAGmJ,EAAIC,EAAIC,EAAI7N,EAAG8N,EAAKjP,EAAGkP,EAAIC,EAAItF,EAAGzJ,EAC5CQ,EAAIwD,KACJrD,EAAKH,EAAEI,EAET,GAAU,MAAN6N,MACF7O,EAAI,IAAIhB,EAAU6P,IAGXhD,cAAgB7L,EAAEgB,GAAa,IAARhB,EAAEI,IAAYJ,EAAEwH,GAAGzE,IAC/C,MAAMtB,MACHlC,EAAiB,aACfS,EAAE6L,YAAc,iBAAmB,oBAAsBgD,GAIlE,IAAK9N,EAAI,OAAOH,EAAEkB,WAoBlB,IAlBA6D,EAAI,IAAI3G,EAAU+D,GAClBoM,EAAKL,EAAK,IAAI9P,EAAU+D,GACxBgM,EAAKG,EAAK,IAAIlQ,EAAU+D,GACxB3C,EAAIF,EAAca,GAIlBI,EAAIwE,EAAExE,EAAIf,EAAEG,OAASK,EAAEO,EAAI,EAC3BwE,EAAE3E,EAAE,GAAKpB,GAAUqP,EAAM9N,EAAIzB,GAAY,EAAIA,EAAWuP,EAAMA,GAC9DJ,GAAMA,GAAM7O,EAAEkL,WAAWvF,GAAK,EAAKxE,EAAI,EAAIwE,EAAIwJ,EAAMnP,EAErDiP,EAAM5L,EACNA,EAAU,IACVrD,EAAI,IAAIhB,EAAUoB,GAGlB8O,EAAGlO,EAAE,GAAK,EAGR6I,EAAIpH,EAAIzC,EAAG2F,EAAG,EAAG,GAEQ,IADzBqJ,EAAKF,EAAG9B,KAAKnD,EAAEkC,MAAMgD,KACd7D,WAAW2D,IAClBC,EAAKC,EACLA,EAAKC,EACLG,EAAKD,EAAGlC,KAAKnD,EAAEkC,MAAMiD,EAAKG,IAC1BD,EAAKF,EACLrJ,EAAI3F,EAAE6M,MAAMhD,EAAEkC,MAAMiD,EAAKrJ,IACzB3F,EAAIgP,EAgBN,OAbAA,EAAKvM,EAAIoM,EAAGhC,MAAMiC,GAAKC,EAAI,EAAG,GAC9BG,EAAKA,EAAGlC,KAAKgC,EAAGjD,MAAMoD,IACtBL,EAAKA,EAAG9B,KAAKgC,EAAGjD,MAAMgD,IACtBG,EAAG9O,EAAI+O,EAAG/O,EAAIQ,EAAER,EAIhBoI,EAAM/F,EAAI0M,EAAIJ,EAHd5N,GAAK,EAGgB8B,GAAe4J,MAAMjM,GAAGqK,MAAMC,WAChDzI,EAAIyM,EAAIJ,EAAI3N,EAAG8B,GAAe4J,MAAMjM,GAAGqK,OAAS,EAC7C,CAACkE,EAAGrN,WAAYiN,EAAGjN,YACnB,CAACoN,EAAGpN,WAAYgN,EAAGhN,YAEzBuB,EAAU4L,EACHzG,GAOT5F,EAAEwM,SAAW,WACX,OAAQhL,MAeVxB,EAAEyM,YAAc,SAAU3J,EAAIV,GAE5B,OADU,MAANU,GAAYrE,EAASqE,EAAI,EAAG5F,GACzBiF,EAAOX,KAAMsB,EAAIV,EAAI,IAe9BpC,EAAEd,SAAW,SAAUhB,GACrB,IAAIoB,EACFlC,EAAIoE,KACJhE,EAAIJ,EAAEI,EACNe,EAAInB,EAAEmB,EA0BR,OAvBU,OAANA,EAEEf,GACF8B,EAAM,WACF9B,EAAI,IAAG8B,EAAM,IAAMA,IAEvBA,EAAM,OAGRA,EAAMhC,EAAcF,EAAEgB,GAEb,MAALF,EACFoB,EAAMf,GAAK+B,GAAc/B,GAAKgC,EAC3BlB,EAAcC,EAAKf,GACnBiB,EAAaF,EAAKf,EAAG,MAExBE,EAASP,EAAG,EAAGkD,EAASzD,OAAQ,QAChC2B,EAAMQ,EAAYN,EAAaF,EAAKf,EAAG,KAAM,GAAIL,EAAGV,GAAG,IAGrDA,EAAI,GAAKJ,EAAEgB,EAAE,KAAIkB,EAAM,IAAMA,IAG5BA,GAQTU,EAAEE,QAAUF,EAAE0M,OAAS,WACrB,IAAIpN,EACFlC,EAAIoE,KACJjD,EAAInB,EAAEmB,EAER,OAAU,OAANA,EAAmBnB,EAAE8B,YAEzBI,EAAMhC,EAAcF,EAAEgB,GAEtBkB,EAAMf,GAAK+B,GAAc/B,GAAKgC,EAC1BlB,EAAcC,EAAKf,GACnBiB,EAAaF,EAAKf,EAAG,KAElBnB,EAAEI,EAAI,EAAI,IAAM8B,EAAMA,IAI/BU,EAAEyE,cAAe,EAEG,MAAhB7E,GAAsBxD,EAAU2H,IAAInE,GAEjCxD,EAuIGuD,GACZvD,EAAS,QAAcA,EAAUA,UAAYA,OAIrC,KAANuQ,aAAqB,OAAOvQ,GAAtB,8BA/uFT,I,iCCAD,kCAAO,IAAMwQ,EAAuB,CAAC,OAAQ,SAAU,OAAQ","file":"static/js/6.2991d60b.chunk.js","sourcesContent":[";(function (globalObject) {\r\n  'use strict';\r\n\r\n/*\r\n *      bignumber.js v7.2.1\r\n *      A JavaScript library for arbitrary-precision arithmetic.\r\n *      https://github.com/MikeMcl/bignumber.js\r\n *      Copyright (c) 2018 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *      MIT Licensed.\r\n *\r\n *      BigNumber.prototype methods     |  BigNumber methods\r\n *                                      |\r\n *      absoluteValue            abs    |  clone\r\n *      comparedTo                      |  config               set\r\n *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n *      dividedBy                div    |      ROUNDING_MODE\r\n *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n *      exponentiatedBy          pow    |      RANGE\r\n *      integerValue                    |      CRYPTO\r\n *      isEqualTo                eq     |      MODULO_MODE\r\n *      isFinite                        |      POW_PRECISION\r\n *      isGreaterThan            gt     |      FORMAT\r\n *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n *      isInteger                       |  isBigNumber\r\n *      isLessThan               lt     |  maximum              max\r\n *      isLessThanOrEqualTo      lte    |  minimum              min\r\n *      isNaN                           |  random\r\n *      isNegative                      |\r\n *      isPositive                      |\r\n *      isZero                          |\r\n *      minus                           |\r\n *      modulo                   mod    |\r\n *      multipliedBy             times  |\r\n *      negated                         |\r\n *      plus                            |\r\n *      precision                sd     |\r\n *      shiftedBy                       |\r\n *      squareRoot               sqrt   |\r\n *      toExponential                   |\r\n *      toFixed                         |\r\n *      toFormat                        |\r\n *      toFraction                      |\r\n *      toJSON                          |\r\n *      toNumber                        |\r\n *      toPrecision                     |\r\n *      toString                        |\r\n *      valueOf                         |\r\n *\r\n */\r\n\r\n\r\n  var BigNumber,\r\n    isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\r\n\r\n    mathceil = Math.ceil,\r\n    mathfloor = Math.floor,\r\n\r\n    bignumberError = '[BigNumber Error] ',\r\n    tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\r\n\r\n    BASE = 1e14,\r\n    LOG_BASE = 14,\r\n    MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\r\n    // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\r\n    POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\r\n    SQRT_BASE = 1e7,\r\n\r\n    // EDITABLE\r\n    // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n    // the arguments to toExponential, toFixed, toFormat, and toPrecision.\r\n    MAX = 1E9;                                   // 0 to MAX_INT32\r\n\r\n\r\n  /*\r\n   * Create and return a BigNumber constructor.\r\n   */\r\n  function clone(configObject) {\r\n    var div, convertBase, parseNumeric,\r\n      P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },\r\n      ONE = new BigNumber(1),\r\n\r\n\r\n      //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\r\n\r\n\r\n      // The default values below must be integers within the inclusive ranges stated.\r\n      // The values can also be changed at run-time using BigNumber.set.\r\n\r\n      // The maximum number of decimal places for operations involving division.\r\n      DECIMAL_PLACES = 20,                     // 0 to MAX\r\n\r\n      // The rounding mode used when rounding to the above decimal places, and when using\r\n      // toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n      // UP         0 Away from zero.\r\n      // DOWN       1 Towards zero.\r\n      // CEIL       2 Towards +Infinity.\r\n      // FLOOR      3 Towards -Infinity.\r\n      // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n      // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n      // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n      // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n      // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n      ROUNDING_MODE = 4,                       // 0 to 8\r\n\r\n      // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\r\n\r\n      // The exponent value at and beneath which toString returns exponential notation.\r\n      // Number type: -7\r\n      TO_EXP_NEG = -7,                         // 0 to -MAX\r\n\r\n      // The exponent value at and above which toString returns exponential notation.\r\n      // Number type: 21\r\n      TO_EXP_POS = 21,                         // 0 to MAX\r\n\r\n      // RANGE : [MIN_EXP, MAX_EXP]\r\n\r\n      // The minimum exponent value, beneath which underflow to zero occurs.\r\n      // Number type: -324  (5e-324)\r\n      MIN_EXP = -1e7,                          // -1 to -MAX\r\n\r\n      // The maximum exponent value, above which overflow to Infinity occurs.\r\n      // Number type:  308  (1.7976931348623157e+308)\r\n      // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\r\n      MAX_EXP = 1e7,                           // 1 to MAX\r\n\r\n      // Whether to use cryptographically-secure random number generation, if available.\r\n      CRYPTO = false,                          // true or false\r\n\r\n      // The modulo mode used when calculating the modulus: a mod n.\r\n      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n      // The remainder (r) is calculated as: r = a - n * q.\r\n      //\r\n      // UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n      // DOWN      1 The remainder has the same sign as the dividend.\r\n      //             This modulo mode is commonly known as 'truncated division' and is\r\n      //             equivalent to (a % n) in JavaScript.\r\n      // FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n      // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n      // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n      //             The remainder is always positive.\r\n      //\r\n      // The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n      // modes are commonly used for the modulus operation.\r\n      // Although the other rounding modes can also be used, they may not give useful results.\r\n      MODULO_MODE = 1,                         // 0 to 9\r\n\r\n      // The maximum number of significant digits of the result of the exponentiatedBy operation.\r\n      // If POW_PRECISION is 0, there will be unlimited significant digits.\r\n      POW_PRECISION = 0,                    // 0 to MAX\r\n\r\n      // The format specification used by the BigNumber.prototype.toFormat method.\r\n      FORMAT = {\r\n        decimalSeparator: '.',\r\n        groupSeparator: ',',\r\n        groupSize: 3,\r\n        secondaryGroupSize: 0,\r\n        fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n        fractionGroupSize: 0\r\n      },\r\n\r\n      // The alphabet used for base conversion.\r\n      // It must be at least 2 characters long, with no '.' or repeated character.\r\n      // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\r\n      ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz';\r\n\r\n\r\n    //------------------------------------------------------------------------------------------\r\n\r\n\r\n    // CONSTRUCTOR\r\n\r\n\r\n    /*\r\n     * The BigNumber constructor and exported function.\r\n     * Create and return a new instance of a BigNumber object.\r\n     *\r\n     * n {number|string|BigNumber} A numeric value.\r\n     * [b] {number} The base of n. Integer, 2 to ALPHABET.length inclusive.\r\n     */\r\n    function BigNumber(n, b) {\r\n      var alphabet, c, caseChanged, e, i, isNum, len, str,\r\n        x = this;\r\n\r\n      // Enable constructor usage without new.\r\n      if (!(x instanceof BigNumber)) {\r\n\r\n        // Don't throw on constructor call without new (#81).\r\n        // '[BigNumber Error] Constructor call without new: {n}'\r\n        //throw Error(bignumberError + ' Constructor call without new: ' + n);\r\n        return new BigNumber(n, b);\r\n      }\r\n\r\n      if (b == null) {\r\n\r\n        // Duplicate.\r\n        if (n instanceof BigNumber) {\r\n          x.s = n.s;\r\n          x.e = n.e;\r\n          x.c = (n = n.c) ? n.slice() : n;\r\n          return;\r\n        }\r\n\r\n        isNum = typeof n == 'number';\r\n\r\n        if (isNum && n * 0 == 0) {\r\n\r\n          // Use `1 / n` to handle minus zero also.\r\n          x.s = 1 / n < 0 ? (n = -n, -1) : 1;\r\n\r\n          // Faster path for integers.\r\n          if (n === ~~n) {\r\n            for (e = 0, i = n; i >= 10; i /= 10, e++);\r\n            x.e = e;\r\n            x.c = [n];\r\n            return;\r\n          }\r\n\r\n          str = n + '';\r\n        } else {\r\n          if (!isNumeric.test(str = n + '')) return parseNumeric(x, str, isNum);\r\n          x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n        // Exponential form?\r\n        if ((i = str.search(/e/i)) > 0) {\r\n\r\n          // Determine exponent.\r\n          if (e < 0) e = i;\r\n          e += +str.slice(i + 1);\r\n          str = str.substring(0, i);\r\n        } else if (e < 0) {\r\n\r\n          // Integer.\r\n          e = str.length;\r\n        }\r\n\r\n      } else {\r\n\r\n        // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n        intCheck(b, 2, ALPHABET.length, 'Base');\r\n        str = n + '';\r\n\r\n        // Allow exponential notation to be used with base 10 argument, while\r\n        // also rounding to DECIMAL_PLACES as with other bases.\r\n        if (b == 10) {\r\n          x = new BigNumber(n instanceof BigNumber ? n : str);\r\n          return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\r\n        }\r\n\r\n        isNum = typeof n == 'number';\r\n\r\n        if (isNum) {\r\n\r\n          // Avoid potential interpretation of Infinity and NaN as base 44+ values.\r\n          if (n * 0 != 0) return parseNumeric(x, str, isNum, b);\r\n\r\n          x.s = 1 / n < 0 ? (str = str.slice(1), -1) : 1;\r\n\r\n          // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n          if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\r\n            throw Error\r\n             (tooManyDigits + n);\r\n          }\r\n\r\n          // Prevent later check for length on converted number.\r\n          isNum = false;\r\n        } else {\r\n          x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        alphabet = ALPHABET.slice(0, b);\r\n        e = i = 0;\r\n\r\n        // Check that str is a valid base b number.\r\n        // Don't use RegExp so alphabet can contain special characters.\r\n        for (len = str.length; i < len; i++) {\r\n          if (alphabet.indexOf(c = str.charAt(i)) < 0) {\r\n            if (c == '.') {\r\n\r\n              // If '.' is not the first character and it has not be found before.\r\n              if (i > e) {\r\n                e = len;\r\n                continue;\r\n              }\r\n            } else if (!caseChanged) {\r\n\r\n              // Allow e.g. hexadecimal 'FF' as well as 'ff'.\r\n              if (str == str.toUpperCase() && (str = str.toLowerCase()) ||\r\n                  str == str.toLowerCase() && (str = str.toUpperCase())) {\r\n                caseChanged = true;\r\n                i = -1;\r\n                e = 0;\r\n                continue;\r\n              }\r\n            }\r\n\r\n            return parseNumeric(x, n + '', isNum, b);\r\n          }\r\n        }\r\n\r\n        str = convertBase(str, b, 10, x.s);\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n        else e = str.length;\r\n      }\r\n\r\n      // Determine leading zeros.\r\n      for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n      // Determine trailing zeros.\r\n      for (len = str.length; str.charCodeAt(--len) === 48;);\r\n\r\n      str = str.slice(i, ++len);\r\n\r\n      if (str) {\r\n        len -= i;\r\n\r\n        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n        if (isNum && BigNumber.DEBUG &&\r\n          len > 15 && (n > MAX_SAFE_INTEGER || n !== mathfloor(n))) {\r\n            throw Error\r\n             (tooManyDigits + (x.s * n));\r\n        }\r\n\r\n        e = e - i - 1;\r\n\r\n         // Overflow?\r\n        if (e > MAX_EXP) {\r\n\r\n          // Infinity.\r\n          x.c = x.e = null;\r\n\r\n        // Underflow?\r\n        } else if (e < MIN_EXP) {\r\n\r\n          // Zero.\r\n          x.c = [x.e = 0];\r\n        } else {\r\n          x.e = e;\r\n          x.c = [];\r\n\r\n          // Transform base\r\n\r\n          // e is the base 10 exponent.\r\n          // i is where to slice str to get the first element of the coefficient array.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (e < 0) i += LOG_BASE;\r\n\r\n          if (i < len) {\r\n            if (i) x.c.push(+str.slice(0, i));\r\n\r\n            for (len -= LOG_BASE; i < len;) {\r\n              x.c.push(+str.slice(i, i += LOG_BASE));\r\n            }\r\n\r\n            str = str.slice(i);\r\n            i = LOG_BASE - str.length;\r\n          } else {\r\n            i -= len;\r\n          }\r\n\r\n          for (; i--; str += '0');\r\n          x.c.push(+str);\r\n        }\r\n      } else {\r\n\r\n        // Zero.\r\n        x.c = [x.e = 0];\r\n      }\r\n    }\r\n\r\n\r\n    // CONSTRUCTOR PROPERTIES\r\n\r\n\r\n    BigNumber.clone = clone;\r\n\r\n    BigNumber.ROUND_UP = 0;\r\n    BigNumber.ROUND_DOWN = 1;\r\n    BigNumber.ROUND_CEIL = 2;\r\n    BigNumber.ROUND_FLOOR = 3;\r\n    BigNumber.ROUND_HALF_UP = 4;\r\n    BigNumber.ROUND_HALF_DOWN = 5;\r\n    BigNumber.ROUND_HALF_EVEN = 6;\r\n    BigNumber.ROUND_HALF_CEIL = 7;\r\n    BigNumber.ROUND_HALF_FLOOR = 8;\r\n    BigNumber.EUCLID = 9;\r\n\r\n\r\n    /*\r\n     * Configure infrequently-changing library-wide settings.\r\n     *\r\n     * Accept an object with the following optional properties (if the value of a property is\r\n     * a number, it must be an integer within the inclusive range stated):\r\n     *\r\n     *   DECIMAL_PLACES   {number}           0 to MAX\r\n     *   ROUNDING_MODE    {number}           0 to 8\r\n     *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n     *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n     *   CRYPTO           {boolean}          true or false\r\n     *   MODULO_MODE      {number}           0 to 9\r\n     *   POW_PRECISION       {number}           0 to MAX\r\n     *   ALPHABET         {string}           A string of two or more unique characters which does\r\n     *                                       not contain '.'.\r\n     *   FORMAT           {object}           An object with some of the following properties:\r\n     *      decimalSeparator       {string}\r\n     *      groupSeparator         {string}\r\n     *      groupSize              {number}\r\n     *      secondaryGroupSize     {number}\r\n     *      fractionGroupSeparator {string}\r\n     *      fractionGroupSize      {number}\r\n     *\r\n     * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n     *\r\n     * E.g.\r\n     * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n     *\r\n     * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n     *\r\n     * Return an object with the properties current values.\r\n     */\r\n    BigNumber.config = BigNumber.set = function (obj) {\r\n      var p, v;\r\n\r\n      if (obj != null) {\r\n\r\n        if (typeof obj == 'object') {\r\n\r\n          // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            DECIMAL_PLACES = v;\r\n          }\r\n\r\n          // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\r\n          // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 8, p);\r\n            ROUNDING_MODE = v;\r\n          }\r\n\r\n          // EXPONENTIAL_AT {number|number[]}\r\n          // Integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\r\n          // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\r\n            v = obj[p];\r\n            if (isArray(v)) {\r\n              intCheck(v[0], -MAX, 0, p);\r\n              intCheck(v[1], 0, MAX, p);\r\n              TO_EXP_NEG = v[0];\r\n              TO_EXP_POS = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\r\n            }\r\n          }\r\n\r\n          // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\r\n          // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\r\n          if (obj.hasOwnProperty(p = 'RANGE')) {\r\n            v = obj[p];\r\n            if (isArray(v)) {\r\n              intCheck(v[0], -MAX, -1, p);\r\n              intCheck(v[1], 1, MAX, p);\r\n              MIN_EXP = v[0];\r\n              MAX_EXP = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              if (v) {\r\n                MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\r\n              } else {\r\n                throw Error\r\n                 (bignumberError + p + ' cannot be zero: ' + v);\r\n              }\r\n            }\r\n          }\r\n\r\n          // CRYPTO {boolean} true or false.\r\n          // '[BigNumber Error] CRYPTO not true or false: {v}'\r\n          // '[BigNumber Error] crypto unavailable'\r\n          if (obj.hasOwnProperty(p = 'CRYPTO')) {\r\n            v = obj[p];\r\n            if (v === !!v) {\r\n              if (v) {\r\n                if (typeof crypto != 'undefined' && crypto &&\r\n                 (crypto.getRandomValues || crypto.randomBytes)) {\r\n                  CRYPTO = v;\r\n                } else {\r\n                  CRYPTO = !v;\r\n                  throw Error\r\n                   (bignumberError + 'crypto unavailable');\r\n                }\r\n              } else {\r\n                CRYPTO = v;\r\n              }\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' not true or false: ' + v);\r\n            }\r\n          }\r\n\r\n          // MODULO_MODE {number} Integer, 0 to 9 inclusive.\r\n          // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 9, p);\r\n            MODULO_MODE = v;\r\n          }\r\n\r\n          // POW_PRECISION {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            POW_PRECISION = v;\r\n          }\r\n\r\n          // FORMAT {object}\r\n          // '[BigNumber Error] FORMAT not an object: {v}'\r\n          if (obj.hasOwnProperty(p = 'FORMAT')) {\r\n            v = obj[p];\r\n            if (typeof v == 'object') FORMAT = v;\r\n            else throw Error\r\n             (bignumberError + p + ' not an object: ' + v);\r\n          }\r\n\r\n          // ALPHABET {string}\r\n          // '[BigNumber Error] ALPHABET invalid: {v}'\r\n          if (obj.hasOwnProperty(p = 'ALPHABET')) {\r\n            v = obj[p];\r\n\r\n            // Disallow if only one character, or contains '.' or a repeated character.\r\n            if (typeof v == 'string' && !/^.$|\\.|(.).*\\1/.test(v)) {\r\n              ALPHABET = v;\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' invalid: ' + v);\r\n            }\r\n          }\r\n\r\n        } else {\r\n\r\n          // '[BigNumber Error] Object expected: {v}'\r\n          throw Error\r\n           (bignumberError + 'Object expected: ' + obj);\r\n        }\r\n      }\r\n\r\n      return {\r\n        DECIMAL_PLACES: DECIMAL_PLACES,\r\n        ROUNDING_MODE: ROUNDING_MODE,\r\n        EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\r\n        RANGE: [MIN_EXP, MAX_EXP],\r\n        CRYPTO: CRYPTO,\r\n        MODULO_MODE: MODULO_MODE,\r\n        POW_PRECISION: POW_PRECISION,\r\n        FORMAT: FORMAT,\r\n        ALPHABET: ALPHABET\r\n      };\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if v is a BigNumber instance, otherwise return false.\r\n     *\r\n     * v {any}\r\n     */\r\n    BigNumber.isBigNumber = function (v) {\r\n      return v instanceof BigNumber || v && v._isBigNumber === true || false;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the maximum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.maximum = BigNumber.max = function () {\r\n      return maxOrMin(arguments, P.lt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the minimum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.minimum = BigNumber.min = function () {\r\n      return maxOrMin(arguments, P.gt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n     * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n     * zeros are produced).\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n     * '[BigNumber Error] crypto unavailable'\r\n     */\r\n    BigNumber.random = (function () {\r\n      var pow2_53 = 0x20000000000000;\r\n\r\n      // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\r\n      // Check if Math.random() produces more than 32 bits of randomness.\r\n      // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\r\n      // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\r\n      var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\r\n       ? function () { return mathfloor(Math.random() * pow2_53); }\r\n       : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\r\n         (Math.random() * 0x800000 | 0); };\r\n\r\n      return function (dp) {\r\n        var a, b, e, k, v,\r\n          i = 0,\r\n          c = [],\r\n          rand = new BigNumber(ONE);\r\n\r\n        if (dp == null) dp = DECIMAL_PLACES;\r\n        else intCheck(dp, 0, MAX);\r\n\r\n        k = mathceil(dp / LOG_BASE);\r\n\r\n        if (CRYPTO) {\r\n\r\n          // Browsers supporting crypto.getRandomValues.\r\n          if (crypto.getRandomValues) {\r\n\r\n            a = crypto.getRandomValues(new Uint32Array(k *= 2));\r\n\r\n            for (; i < k;) {\r\n\r\n              // 53 bits:\r\n              // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\r\n              // 11111 11111111 11111111 11111111 11100000 00000000 00000000\r\n              // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\r\n              //                                     11111 11111111 11111111\r\n              // 0x20000 is 2^21.\r\n              v = a[i] * 0x20000 + (a[i + 1] >>> 11);\r\n\r\n              // Rejection sampling:\r\n              // 0 <= v < 9007199254740992\r\n              // Probability that v >= 9e15, is\r\n              // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\r\n              if (v >= 9e15) {\r\n                b = crypto.getRandomValues(new Uint32Array(2));\r\n                a[i] = b[0];\r\n                a[i + 1] = b[1];\r\n              } else {\r\n\r\n                // 0 <= v <= 8999999999999999\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 2;\r\n              }\r\n            }\r\n            i = k / 2;\r\n\r\n          // Node.js supporting crypto.randomBytes.\r\n          } else if (crypto.randomBytes) {\r\n\r\n            // buffer\r\n            a = crypto.randomBytes(k *= 7);\r\n\r\n            for (; i < k;) {\r\n\r\n              // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\r\n              // 0x100000000 is 2^32, 0x1000000 is 2^24\r\n              // 11111 11111111 11111111 11111111 11111111 11111111 11111111\r\n              // 0 <= v < 9007199254740992\r\n              v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +\r\n                 (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +\r\n                 (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\r\n\r\n              if (v >= 9e15) {\r\n                crypto.randomBytes(7).copy(a, i);\r\n              } else {\r\n\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 7;\r\n              }\r\n            }\r\n            i = k / 7;\r\n          } else {\r\n            CRYPTO = false;\r\n            throw Error\r\n             (bignumberError + 'crypto unavailable');\r\n          }\r\n        }\r\n\r\n        // Use Math.random.\r\n        if (!CRYPTO) {\r\n\r\n          for (; i < k;) {\r\n            v = random53bitInt();\r\n            if (v < 9e15) c[i++] = v % 1e14;\r\n          }\r\n        }\r\n\r\n        k = c[--i];\r\n        dp %= LOG_BASE;\r\n\r\n        // Convert trailing digits to zeros according to dp.\r\n        if (k && dp) {\r\n          v = POWS_TEN[LOG_BASE - dp];\r\n          c[i] = mathfloor(k / v) * v;\r\n        }\r\n\r\n        // Remove trailing elements which are zero.\r\n        for (; c[i] === 0; c.pop(), i--);\r\n\r\n        // Zero?\r\n        if (i < 0) {\r\n          c = [e = 0];\r\n        } else {\r\n\r\n          // Remove leading elements which are zero and adjust exponent accordingly.\r\n          for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\r\n\r\n          // Count the digits of the first element of c to determine leading zeros, and...\r\n          for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\r\n\r\n          // adjust the exponent accordingly.\r\n          if (i < LOG_BASE) e -= LOG_BASE - i;\r\n        }\r\n\r\n        rand.e = e;\r\n        rand.c = c;\r\n        return rand;\r\n      };\r\n    })();\r\n\r\n\r\n    // PRIVATE FUNCTIONS\r\n\r\n\r\n    // Called by BigNumber and BigNumber.prototype.toString.\r\n    convertBase = (function () {\r\n      var decimal = '0123456789';\r\n\r\n      /*\r\n       * Convert string of baseIn to an array of numbers of baseOut.\r\n       * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n       * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n       */\r\n      function toBaseOut(str, baseIn, baseOut, alphabet) {\r\n        var j,\r\n          arr = [0],\r\n          arrL,\r\n          i = 0,\r\n          len = str.length;\r\n\r\n        for (; i < len;) {\r\n          for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\r\n\r\n          arr[0] += alphabet.indexOf(str.charAt(i++));\r\n\r\n          for (j = 0; j < arr.length; j++) {\r\n\r\n            if (arr[j] > baseOut - 1) {\r\n              if (arr[j + 1] == null) arr[j + 1] = 0;\r\n              arr[j + 1] += arr[j] / baseOut | 0;\r\n              arr[j] %= baseOut;\r\n            }\r\n          }\r\n        }\r\n\r\n        return arr.reverse();\r\n      }\r\n\r\n      // Convert a numeric string of baseIn to a numeric string of baseOut.\r\n      // If the caller is toString, we are converting from base 10 to baseOut.\r\n      // If the caller is BigNumber, we are converting from baseIn to base 10.\r\n      return function (str, baseIn, baseOut, sign, callerIsToString) {\r\n        var alphabet, d, e, k, r, x, xc, y,\r\n          i = str.indexOf('.'),\r\n          dp = DECIMAL_PLACES,\r\n          rm = ROUNDING_MODE;\r\n\r\n        // Non-integer.\r\n        if (i >= 0) {\r\n          k = POW_PRECISION;\r\n\r\n          // Unlimited precision.\r\n          POW_PRECISION = 0;\r\n          str = str.replace('.', '');\r\n          y = new BigNumber(baseIn);\r\n          x = y.pow(str.length - i);\r\n          POW_PRECISION = k;\r\n\r\n          // Convert str as if an integer, then restore the fraction part by dividing the\r\n          // result by its base raised to a power.\r\n\r\n          y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),\r\n           10, baseOut, decimal);\r\n          y.e = y.c.length;\r\n        }\r\n\r\n        // Convert the number as integer.\r\n\r\n        xc = toBaseOut(str, baseIn, baseOut, callerIsToString\r\n         ? (alphabet = ALPHABET, decimal)\r\n         : (alphabet = decimal, ALPHABET));\r\n\r\n        // xc now represents str as an integer and converted to baseOut. e is the exponent.\r\n        e = k = xc.length;\r\n\r\n        // Remove trailing zeros.\r\n        for (; xc[--k] == 0; xc.pop());\r\n\r\n        // Zero?\r\n        if (!xc[0]) return alphabet.charAt(0);\r\n\r\n        // Does str represent an integer? If so, no need for the division.\r\n        if (i < 0) {\r\n          --e;\r\n        } else {\r\n          x.c = xc;\r\n          x.e = e;\r\n\r\n          // The sign is needed for correct rounding.\r\n          x.s = sign;\r\n          x = div(x, y, dp, rm, baseOut);\r\n          xc = x.c;\r\n          r = x.r;\r\n          e = x.e;\r\n        }\r\n\r\n        // xc now represents str converted to baseOut.\r\n\r\n        // THe index of the rounding digit.\r\n        d = e + dp + 1;\r\n\r\n        // The rounding digit: the digit to the right of the digit that may be rounded up.\r\n        i = xc[d];\r\n\r\n        // Look at the rounding digits and mode to determine whether to round up.\r\n\r\n        k = baseOut / 2;\r\n        r = r || d < 0 || xc[d + 1] != null;\r\n\r\n        r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n              : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\r\n               rm == (x.s < 0 ? 8 : 7));\r\n\r\n        // If the index of the rounding digit is not greater than zero, or xc represents\r\n        // zero, then the result of the base conversion is zero or, if rounding up, a value\r\n        // such as 0.00001.\r\n        if (d < 1 || !xc[0]) {\r\n\r\n          // 1^-dp or 0\r\n          str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0))\r\n              : alphabet.charAt(0);\r\n        } else {\r\n\r\n          // Truncate xc to the required number of decimal places.\r\n          xc.length = d;\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            // Rounding up may mean the previous digit has to be rounded up and so on.\r\n            for (--baseOut; ++xc[--d] > baseOut;) {\r\n              xc[d] = 0;\r\n\r\n              if (!d) {\r\n                ++e;\r\n                xc = [1].concat(xc);\r\n              }\r\n            }\r\n          }\r\n\r\n          // Determine trailing zeros.\r\n          for (k = xc.length; !xc[--k];);\r\n\r\n          // E.g. [4, 11, 15] becomes 4bf.\r\n          for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));\r\n\r\n          // Add leading zeros, decimal point and trailing zeros as required.\r\n          str = toFixedPoint(str, e, alphabet.charAt(0));\r\n        }\r\n\r\n        // The caller will add the sign.\r\n        return str;\r\n      };\r\n    })();\r\n\r\n\r\n    // Perform division in the specified base. Called by div and convertBase.\r\n    div = (function () {\r\n\r\n      // Assume non-zero x and k.\r\n      function multiply(x, k, base) {\r\n        var m, temp, xlo, xhi,\r\n          carry = 0,\r\n          i = x.length,\r\n          klo = k % SQRT_BASE,\r\n          khi = k / SQRT_BASE | 0;\r\n\r\n        for (x = x.slice(); i--;) {\r\n          xlo = x[i] % SQRT_BASE;\r\n          xhi = x[i] / SQRT_BASE | 0;\r\n          m = khi * xlo + xhi * klo;\r\n          temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;\r\n          carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\r\n          x[i] = temp % base;\r\n        }\r\n\r\n        if (carry) x = [carry].concat(x);\r\n\r\n        return x;\r\n      }\r\n\r\n      function compare(a, b, aL, bL) {\r\n        var i, cmp;\r\n\r\n        if (aL != bL) {\r\n          cmp = aL > bL ? 1 : -1;\r\n        } else {\r\n\r\n          for (i = cmp = 0; i < aL; i++) {\r\n\r\n            if (a[i] != b[i]) {\r\n              cmp = a[i] > b[i] ? 1 : -1;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        return cmp;\r\n      }\r\n\r\n      function subtract(a, b, aL, base) {\r\n        var i = 0;\r\n\r\n        // Subtract b from a.\r\n        for (; aL--;) {\r\n          a[aL] -= i;\r\n          i = a[aL] < b[aL] ? 1 : 0;\r\n          a[aL] = i * base + a[aL] - b[aL];\r\n        }\r\n\r\n        // Remove leading zeros.\r\n        for (; !a[0] && a.length > 1; a.splice(0, 1));\r\n      }\r\n\r\n      // x: dividend, y: divisor.\r\n      return function (x, y, dp, rm, base) {\r\n        var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\r\n          yL, yz,\r\n          s = x.s == y.s ? 1 : -1,\r\n          xc = x.c,\r\n          yc = y.c;\r\n\r\n        // Either NaN, Infinity or 0?\r\n        if (!xc || !xc[0] || !yc || !yc[0]) {\r\n\r\n          return new BigNumber(\r\n\r\n           // Return NaN if either NaN, or both Infinity or 0.\r\n           !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\r\n\r\n            // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\r\n            xc && xc[0] == 0 || !yc ? s * 0 : s / 0\r\n         );\r\n        }\r\n\r\n        q = new BigNumber(s);\r\n        qc = q.c = [];\r\n        e = x.e - y.e;\r\n        s = dp + e + 1;\r\n\r\n        if (!base) {\r\n          base = BASE;\r\n          e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\r\n          s = s / LOG_BASE | 0;\r\n        }\r\n\r\n        // Result exponent may be one less then the current value of e.\r\n        // The coefficients of the BigNumbers from convertBase may have trailing zeros.\r\n        for (i = 0; yc[i] == (xc[i] || 0); i++);\r\n\r\n        if (yc[i] > (xc[i] || 0)) e--;\r\n\r\n        if (s < 0) {\r\n          qc.push(1);\r\n          more = true;\r\n        } else {\r\n          xL = xc.length;\r\n          yL = yc.length;\r\n          i = 0;\r\n          s += 2;\r\n\r\n          // Normalise xc and yc so highest order digit of yc is >= base / 2.\r\n\r\n          n = mathfloor(base / (yc[0] + 1));\r\n\r\n          // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\r\n          // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\r\n          if (n > 1) {\r\n            yc = multiply(yc, n, base);\r\n            xc = multiply(xc, n, base);\r\n            yL = yc.length;\r\n            xL = xc.length;\r\n          }\r\n\r\n          xi = yL;\r\n          rem = xc.slice(0, yL);\r\n          remL = rem.length;\r\n\r\n          // Add zeros to make remainder as long as divisor.\r\n          for (; remL < yL; rem[remL++] = 0);\r\n          yz = yc.slice();\r\n          yz = [0].concat(yz);\r\n          yc0 = yc[0];\r\n          if (yc[1] >= base / 2) yc0++;\r\n          // Not necessary, but to prevent trial digit n > base, when using base 3.\r\n          // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\r\n\r\n          do {\r\n            n = 0;\r\n\r\n            // Compare divisor and remainder.\r\n            cmp = compare(yc, rem, yL, remL);\r\n\r\n            // If divisor < remainder.\r\n            if (cmp < 0) {\r\n\r\n              // Calculate trial digit, n.\r\n\r\n              rem0 = rem[0];\r\n              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n              // n is how many times the divisor goes into the current remainder.\r\n              n = mathfloor(rem0 / yc0);\r\n\r\n              //  Algorithm:\r\n              //  product = divisor multiplied by trial digit (n).\r\n              //  Compare product and remainder.\r\n              //  If product is greater than remainder:\r\n              //    Subtract divisor from product, decrement trial digit.\r\n              //  Subtract product from remainder.\r\n              //  If product was less than remainder at the last compare:\r\n              //    Compare new remainder and divisor.\r\n              //    If remainder is greater than divisor:\r\n              //      Subtract divisor from remainder, increment trial digit.\r\n\r\n              if (n > 1) {\r\n\r\n                // n may be > base only when base is 3.\r\n                if (n >= base) n = base - 1;\r\n\r\n                // product = divisor * trial digit.\r\n                prod = multiply(yc, n, base);\r\n                prodL = prod.length;\r\n                remL = rem.length;\r\n\r\n                // Compare product and remainder.\r\n                // If product > remainder then trial digit n too high.\r\n                // n is 1 too high about 5% of the time, and is not known to have\r\n                // ever been more than 1 too high.\r\n                while (compare(prod, rem, prodL, remL) == 1) {\r\n                  n--;\r\n\r\n                  // Subtract divisor from product.\r\n                  subtract(prod, yL < prodL ? yz : yc, prodL, base);\r\n                  prodL = prod.length;\r\n                  cmp = 1;\r\n                }\r\n              } else {\r\n\r\n                // n is 0 or 1, cmp is -1.\r\n                // If n is 0, there is no need to compare yc and rem again below,\r\n                // so change cmp to 1 to avoid it.\r\n                // If n is 1, leave cmp as -1, so yc and rem are compared again.\r\n                if (n == 0) {\r\n\r\n                  // divisor < remainder, so n must be at least 1.\r\n                  cmp = n = 1;\r\n                }\r\n\r\n                // product = divisor\r\n                prod = yc.slice();\r\n                prodL = prod.length;\r\n              }\r\n\r\n              if (prodL < remL) prod = [0].concat(prod);\r\n\r\n              // Subtract product from remainder.\r\n              subtract(rem, prod, remL, base);\r\n              remL = rem.length;\r\n\r\n               // If product was < remainder.\r\n              if (cmp == -1) {\r\n\r\n                // Compare divisor and new remainder.\r\n                // If divisor < new remainder, subtract divisor from remainder.\r\n                // Trial digit n too low.\r\n                // n is 1 too low about 5% of the time, and very rarely 2 too low.\r\n                while (compare(yc, rem, yL, remL) < 1) {\r\n                  n++;\r\n\r\n                  // Subtract divisor from remainder.\r\n                  subtract(rem, yL < remL ? yz : yc, remL, base);\r\n                  remL = rem.length;\r\n                }\r\n              }\r\n            } else if (cmp === 0) {\r\n              n++;\r\n              rem = [0];\r\n            } // else cmp === 1 and n will be 0\r\n\r\n            // Add the next digit, n, to the result array.\r\n            qc[i++] = n;\r\n\r\n            // Update the remainder.\r\n            if (rem[0]) {\r\n              rem[remL++] = xc[xi] || 0;\r\n            } else {\r\n              rem = [xc[xi]];\r\n              remL = 1;\r\n            }\r\n          } while ((xi++ < xL || rem[0] != null) && s--);\r\n\r\n          more = rem[0] != null;\r\n\r\n          // Leading zero?\r\n          if (!qc[0]) qc.splice(0, 1);\r\n        }\r\n\r\n        if (base == BASE) {\r\n\r\n          // To calculate q.e, first get the number of digits of qc[0].\r\n          for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\r\n\r\n          round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\r\n\r\n        // Caller is convertBase.\r\n        } else {\r\n          q.e = e;\r\n          q.r = +more;\r\n        }\r\n\r\n        return q;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n     * notation rounded to the specified decimal places or significant digits.\r\n     *\r\n     * n: a BigNumber.\r\n     * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n     * rm: the rounding mode.\r\n     * id: 1 (toExponential) or 2 (toPrecision).\r\n     */\r\n    function format(n, i, rm, id) {\r\n      var c0, e, ne, len, str;\r\n\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      if (!n.c) return n.toString();\r\n\r\n      c0 = n.c[0];\r\n      ne = n.e;\r\n\r\n      if (i == null) {\r\n        str = coeffToString(n.c);\r\n        str = id == 1 || id == 2 && ne <= TO_EXP_NEG\r\n         ? toExponential(str, ne)\r\n         : toFixedPoint(str, ne, '0');\r\n      } else {\r\n        n = round(new BigNumber(n), i, rm);\r\n\r\n        // n.e may have changed if the value was rounded up.\r\n        e = n.e;\r\n\r\n        str = coeffToString(n.c);\r\n        len = str.length;\r\n\r\n        // toPrecision returns exponential notation if the number of significant digits\r\n        // specified is less than the number of digits necessary to represent the integer\r\n        // part of the value in fixed-point notation.\r\n\r\n        // Exponential notation.\r\n        if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\r\n\r\n          // Append zeros?\r\n          for (; len < i; str += '0', len++);\r\n          str = toExponential(str, e);\r\n\r\n        // Fixed-point notation.\r\n        } else {\r\n          i -= ne;\r\n          str = toFixedPoint(str, e, '0');\r\n\r\n          // Append zeros?\r\n          if (e + 1 > len) {\r\n            if (--i > 0) for (str += '.'; i--; str += '0');\r\n          } else {\r\n            i += e - len;\r\n            if (i > 0) {\r\n              if (e + 1 == len) str += '.';\r\n              for (; i--; str += '0');\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return n.s < 0 && c0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // Handle BigNumber.max and BigNumber.min.\r\n    function maxOrMin(args, method) {\r\n      var m, n,\r\n        i = 0;\r\n\r\n      if (isArray(args[0])) args = args[0];\r\n      m = new BigNumber(args[0]);\r\n\r\n      for (; ++i < args.length;) {\r\n        n = new BigNumber(args[i]);\r\n\r\n        // If any number is NaN, return NaN.\r\n        if (!n.s) {\r\n          m = n;\r\n          break;\r\n        } else if (method.call(m, n)) {\r\n          m = n;\r\n        }\r\n      }\r\n\r\n      return m;\r\n    }\r\n\r\n\r\n    /*\r\n     * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n     * Called by minus, plus and times.\r\n     */\r\n    function normalise(n, c, e) {\r\n      var i = 1,\r\n        j = c.length;\r\n\r\n       // Remove trailing zeros.\r\n      for (; !c[--j]; c.pop());\r\n\r\n      // Calculate the base 10 exponent. First get the number of digits of c[0].\r\n      for (j = c[0]; j >= 10; j /= 10, i++);\r\n\r\n      // Overflow?\r\n      if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\r\n\r\n        // Infinity.\r\n        n.c = n.e = null;\r\n\r\n      // Underflow?\r\n      } else if (e < MIN_EXP) {\r\n\r\n        // Zero.\r\n        n.c = [n.e = 0];\r\n      } else {\r\n        n.e = e;\r\n        n.c = c;\r\n      }\r\n\r\n      return n;\r\n    }\r\n\r\n\r\n    // Handle values that fail the validity test in BigNumber.\r\n    parseNumeric = (function () {\r\n      var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\r\n        dotAfter = /^([^.]+)\\.$/,\r\n        dotBefore = /^\\.([^.]+)$/,\r\n        isInfinityOrNaN = /^-?(Infinity|NaN)$/,\r\n        whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\r\n\r\n      return function (x, str, isNum, b) {\r\n        var base,\r\n          s = isNum ? str : str.replace(whitespaceOrPlus, '');\r\n\r\n        // No exception on ±Infinity or NaN.\r\n        if (isInfinityOrNaN.test(s)) {\r\n          x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\r\n          x.c = x.e = null;\r\n        } else {\r\n          if (!isNum) {\r\n\r\n            // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\r\n            s = s.replace(basePrefix, function (m, p1, p2) {\r\n              base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\r\n              return !b || b == base ? p1 : m;\r\n            });\r\n\r\n            if (b) {\r\n              base = b;\r\n\r\n              // E.g. '1.' to '1', '.1' to '0.1'\r\n              s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\r\n            }\r\n\r\n            if (str != s) return new BigNumber(s, base);\r\n          }\r\n\r\n          // '[BigNumber Error] Not a number: {n}'\r\n          // '[BigNumber Error] Not a base {b} number: {n}'\r\n          if (BigNumber.DEBUG) {\r\n            throw Error\r\n              (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\r\n          }\r\n\r\n          // NaN\r\n          x.c = x.e = x.s = null;\r\n        }\r\n      }\r\n    })();\r\n\r\n\r\n    /*\r\n     * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n     * If r is truthy, it is known that there are more digits after the rounding digit.\r\n     */\r\n    function round(x, sd, rm, r) {\r\n      var d, i, j, k, n, ni, rd,\r\n        xc = x.c,\r\n        pows10 = POWS_TEN;\r\n\r\n      // if x is not Infinity or NaN...\r\n      if (xc) {\r\n\r\n        // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n        // n is a base 1e14 number, the value of the element of array x.c containing rd.\r\n        // ni is the index of n within x.c.\r\n        // d is the number of digits of n.\r\n        // i is the index of rd within n including leading zeros.\r\n        // j is the actual index of rd within n (if < 0, rd is a leading zero).\r\n        out: {\r\n\r\n          // Get the number of digits of the first element of xc.\r\n          for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\r\n          i = sd - d;\r\n\r\n          // If the rounding digit is in the first element of xc...\r\n          if (i < 0) {\r\n            i += LOG_BASE;\r\n            j = sd;\r\n            n = xc[ni = 0];\r\n\r\n            // Get the rounding digit at index j of n.\r\n            rd = n / pows10[d - j - 1] % 10 | 0;\r\n          } else {\r\n            ni = mathceil((i + 1) / LOG_BASE);\r\n\r\n            if (ni >= xc.length) {\r\n\r\n              if (r) {\r\n\r\n                // Needed by sqrt.\r\n                for (; xc.length <= ni; xc.push(0));\r\n                n = rd = 0;\r\n                d = 1;\r\n                i %= LOG_BASE;\r\n                j = i - LOG_BASE + 1;\r\n              } else {\r\n                break out;\r\n              }\r\n            } else {\r\n              n = k = xc[ni];\r\n\r\n              // Get the number of digits of n.\r\n              for (d = 1; k >= 10; k /= 10, d++);\r\n\r\n              // Get the index of rd within n.\r\n              i %= LOG_BASE;\r\n\r\n              // Get the index of rd within n, adjusted for leading zeros.\r\n              // The number of leading zeros of n is given by LOG_BASE - d.\r\n              j = i - LOG_BASE + d;\r\n\r\n              // Get the rounding digit at index j of n.\r\n              rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;\r\n            }\r\n          }\r\n\r\n          r = r || sd < 0 ||\r\n\r\n          // Are there any non-zero digits after the rounding digit?\r\n          // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\r\n          // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\r\n           xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\r\n\r\n          r = rm < 4\r\n           ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n           : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\r\n\r\n            // Check whether the digit to the left of the rounding digit is odd.\r\n            ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||\r\n             rm == (x.s < 0 ? 8 : 7));\r\n\r\n          if (sd < 1 || !xc[0]) {\r\n            xc.length = 0;\r\n\r\n            if (r) {\r\n\r\n              // Convert sd to decimal places.\r\n              sd -= x.e + 1;\r\n\r\n              // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n              xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\r\n              x.e = -sd || 0;\r\n            } else {\r\n\r\n              // Zero.\r\n              xc[0] = x.e = 0;\r\n            }\r\n\r\n            return x;\r\n          }\r\n\r\n          // Remove excess digits.\r\n          if (i == 0) {\r\n            xc.length = ni;\r\n            k = 1;\r\n            ni--;\r\n          } else {\r\n            xc.length = ni + 1;\r\n            k = pows10[LOG_BASE - i];\r\n\r\n            // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n            // j > 0 means i > number of leading zeros of n.\r\n            xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\r\n          }\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            for (; ;) {\r\n\r\n              // If the digit to be rounded up is in the first element of xc...\r\n              if (ni == 0) {\r\n\r\n                // i will be the length of xc[0] before k is added.\r\n                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\r\n                j = xc[0] += k;\r\n                for (k = 1; j >= 10; j /= 10, k++);\r\n\r\n                // if i != k the length has increased.\r\n                if (i != k) {\r\n                  x.e++;\r\n                  if (xc[0] == BASE) xc[0] = 1;\r\n                }\r\n\r\n                break;\r\n              } else {\r\n                xc[ni] += k;\r\n                if (xc[ni] != BASE) break;\r\n                xc[ni--] = 0;\r\n                k = 1;\r\n              }\r\n            }\r\n          }\r\n\r\n          // Remove trailing zeros.\r\n          for (i = xc.length; xc[--i] === 0; xc.pop());\r\n        }\r\n\r\n        // Overflow? Infinity.\r\n        if (x.e > MAX_EXP) {\r\n          x.c = x.e = null;\r\n\r\n        // Underflow? Zero.\r\n        } else if (x.e < MIN_EXP) {\r\n          x.c = [x.e = 0];\r\n        }\r\n      }\r\n\r\n      return x;\r\n    }\r\n\r\n\r\n    // PROTOTYPE/INSTANCE METHODS\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n     */\r\n    P.absoluteValue = P.abs = function () {\r\n      var x = new BigNumber(this);\r\n      if (x.s < 0) x.s = 1;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return\r\n     *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     *   0 if they have the same value,\r\n     *   or null if the value of either is NaN.\r\n     */\r\n    P.comparedTo = function (y, b) {\r\n      return compare(this, new BigNumber(y, b));\r\n    };\r\n\r\n\r\n    /*\r\n     * If dp is undefined or null or true or false, return the number of decimal places of the\r\n     * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     *\r\n     * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.decimalPlaces = P.dp = function (dp, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), dp + x.e + 1, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n      // Subtract the number of trailing zeros of the last number.\r\n      if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\r\n      if (n < 0) n = 0;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n / 0 = I\r\n     *  n / N = N\r\n     *  n / I = 0\r\n     *  0 / n = 0\r\n     *  0 / 0 = N\r\n     *  0 / N = N\r\n     *  0 / I = 0\r\n     *  N / n = N\r\n     *  N / 0 = N\r\n     *  N / N = N\r\n     *  N / I = N\r\n     *  I / n = I\r\n     *  I / 0 = I\r\n     *  I / N = N\r\n     *  I / I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n     * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.dividedBy = P.div = function (y, b) {\r\n      return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n     * BigNumber by the value of BigNumber(y, b).\r\n     */\r\n    P.dividedToIntegerBy = P.idiv = function (y, b) {\r\n      return div(this, new BigNumber(y, b), 0, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n     *\r\n     * If m is present, return the result modulo m.\r\n     * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n     *\r\n     * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n     * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n     *\r\n     * n {number|string|BigNumber} The exponent. An integer.\r\n     * [m] {number|string|BigNumber} The modulus.\r\n     *\r\n     * '[BigNumber Error] Exponent not an integer: {n}'\r\n     */\r\n    P.exponentiatedBy = P.pow = function (n, m) {\r\n      var half, isModExp, k, more, nIsBig, nIsNeg, nIsOdd, y,\r\n        x = this;\r\n\r\n      n = new BigNumber(n);\r\n\r\n      // Allow NaN and ±Infinity, but not other non-integers.\r\n      if (n.c && !n.isInteger()) {\r\n        throw Error\r\n          (bignumberError + 'Exponent not an integer: ' + n);\r\n      }\r\n\r\n      if (m != null) m = new BigNumber(m);\r\n\r\n      // Exponent of MAX_SAFE_INTEGER is 15.\r\n      nIsBig = n.e > 14;\r\n\r\n      // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\r\n      if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\r\n\r\n        // The sign of the result of pow when x is negative depends on the evenness of n.\r\n        // If +n overflows to ±Infinity, the evenness of n would be not be known.\r\n        y = new BigNumber(Math.pow(+x.valueOf(), nIsBig ? 2 - isOdd(n) : +n));\r\n        return m ? y.mod(m) : y;\r\n      }\r\n\r\n      nIsNeg = n.s < 0;\r\n\r\n      if (m) {\r\n\r\n        // x % m returns NaN if abs(m) is zero, or m is NaN.\r\n        if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\r\n\r\n        isModExp = !nIsNeg && x.isInteger() && m.isInteger();\r\n\r\n        if (isModExp) x = x.mod(m);\r\n\r\n      // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\r\n      // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\r\n      } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0\r\n        // [1, 240000000]\r\n        ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7\r\n        // [80000000000000]  [99999750000000]\r\n        : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\r\n\r\n        // If x is negative and n is odd, k = -0, else k = 0.\r\n        k = x.s < 0 && isOdd(n) ? -0 : 0;\r\n\r\n        // If x >= 1, k = ±Infinity.\r\n        if (x.e > -1) k = 1 / k;\r\n\r\n        // If n is negative return ±0, else return ±Infinity.\r\n        return new BigNumber(nIsNeg ? 1 / k : k);\r\n\r\n      } else if (POW_PRECISION) {\r\n\r\n        // Truncating each coefficient array to a length of k after each multiplication\r\n        // equates to truncating significant digits to POW_PRECISION + [28, 41],\r\n        // i.e. there will be a minimum of 28 guard digits retained.\r\n        k = mathceil(POW_PRECISION / LOG_BASE + 2);\r\n      }\r\n\r\n      if (nIsBig) {\r\n        half = new BigNumber(0.5);\r\n        nIsOdd = isOdd(n);\r\n      } else {\r\n        nIsOdd = n % 2;\r\n      }\r\n\r\n      if (nIsNeg) n.s = 1;\r\n\r\n      y = new BigNumber(ONE);\r\n\r\n      // Performs 54 loop iterations for n of 9007199254740991.\r\n      for (; ;) {\r\n\r\n        if (nIsOdd) {\r\n          y = y.times(x);\r\n          if (!y.c) break;\r\n\r\n          if (k) {\r\n            if (y.c.length > k) y.c.length = k;\r\n          } else if (isModExp) {\r\n            y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\r\n          }\r\n        }\r\n\r\n        if (nIsBig) {\r\n          n = n.times(half);\r\n          round(n, n.e + 1, 1);\r\n          if (!n.c[0]) break;\r\n          nIsBig = n.e > 14;\r\n          nIsOdd = isOdd(n);\r\n        } else {\r\n          n = mathfloor(n / 2);\r\n          if (!n) break;\r\n          nIsOdd = n % 2;\r\n        }\r\n\r\n        x = x.times(x);\r\n\r\n        if (k) {\r\n          if (x.c && x.c.length > k) x.c.length = k;\r\n        } else if (isModExp) {\r\n          x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\r\n        }\r\n      }\r\n\r\n      if (isModExp) return y;\r\n      if (nIsNeg) y = ONE.div(y);\r\n\r\n      return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n     * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n     */\r\n    P.integerValue = function (rm) {\r\n      var n = new BigNumber(this);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n      return round(n, n.e + 1, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isEqualTo = P.eq = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n     */\r\n    P.isFinite = function () {\r\n      return !!this.c;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isGreaterThan = P.gt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\r\n\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n     */\r\n    P.isInteger = function () {\r\n      return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isLessThan = P.lt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isLessThanOrEqualTo = P.lte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n     */\r\n    P.isNaN = function () {\r\n      return !this.s;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is negative, otherwise return false.\r\n     */\r\n    P.isNegative = function () {\r\n      return this.s < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is positive, otherwise return false.\r\n     */\r\n    P.isPositive = function () {\r\n      return this.s > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n     */\r\n    P.isZero = function () {\r\n      return !!this.c && this.c[0] == 0;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n - 0 = n\r\n     *  n - N = N\r\n     *  n - I = -I\r\n     *  0 - n = -n\r\n     *  0 - 0 = 0\r\n     *  0 - N = N\r\n     *  0 - I = -I\r\n     *  N - n = N\r\n     *  N - 0 = N\r\n     *  N - N = N\r\n     *  N - I = N\r\n     *  I - n = I\r\n     *  I - 0 = I\r\n     *  I - N = N\r\n     *  I - I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.minus = function (y, b) {\r\n      var i, j, t, xLTy,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n      if (a != b) {\r\n        y.s = -b;\r\n        return x.plus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Either Infinity?\r\n        if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\r\n\r\n        // Either zero?\r\n        if (!xc[0] || !yc[0]) {\r\n\r\n          // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n          return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\r\n\r\n           // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\r\n           ROUNDING_MODE == 3 ? -0 : 0);\r\n        }\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Determine which is the bigger number.\r\n      if (a = xe - ye) {\r\n\r\n        if (xLTy = a < 0) {\r\n          a = -a;\r\n          t = xc;\r\n        } else {\r\n          ye = xe;\r\n          t = yc;\r\n        }\r\n\r\n        t.reverse();\r\n\r\n        // Prepend zeros to equalise exponents.\r\n        for (b = a; b--; t.push(0));\r\n        t.reverse();\r\n      } else {\r\n\r\n        // Exponents equal. Check digit by digit.\r\n        j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\r\n\r\n        for (a = b = 0; b < j; b++) {\r\n\r\n          if (xc[b] != yc[b]) {\r\n            xLTy = xc[b] < yc[b];\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      // x < y? Point xc to the array of the bigger number.\r\n      if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;\r\n\r\n      b = (j = yc.length) - (i = xc.length);\r\n\r\n      // Append zeros to xc if shorter.\r\n      // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\r\n      if (b > 0) for (; b--; xc[i++] = 0);\r\n      b = BASE - 1;\r\n\r\n      // Subtract yc from xc.\r\n      for (; j > a;) {\r\n\r\n        if (xc[--j] < yc[j]) {\r\n          for (i = j; i && !xc[--i]; xc[i] = b);\r\n          --xc[i];\r\n          xc[j] += BASE;\r\n        }\r\n\r\n        xc[j] -= yc[j];\r\n      }\r\n\r\n      // Remove leading zeros and adjust exponent accordingly.\r\n      for (; xc[0] == 0; xc.splice(0, 1), --ye);\r\n\r\n      // Zero?\r\n      if (!xc[0]) {\r\n\r\n        // Following IEEE 754 (2008) 6.3,\r\n        // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\r\n        y.s = ROUNDING_MODE == 3 ? -1 : 1;\r\n        y.c = [y.e = 0];\r\n        return y;\r\n      }\r\n\r\n      // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\r\n      // for finite x and y.\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     *   n % 0 =  N\r\n     *   n % N =  N\r\n     *   n % I =  n\r\n     *   0 % n =  0\r\n     *  -0 % n = -0\r\n     *   0 % 0 =  N\r\n     *   0 % N =  N\r\n     *   0 % I =  0\r\n     *   N % n =  N\r\n     *   N % 0 =  N\r\n     *   N % N =  N\r\n     *   N % I =  N\r\n     *   I % n =  N\r\n     *   I % 0 =  N\r\n     *   I % N =  N\r\n     *   I % I =  N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n     * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n     */\r\n    P.modulo = P.mod = function (y, b) {\r\n      var q, s,\r\n        x = this;\r\n\r\n      y = new BigNumber(y, b);\r\n\r\n      // Return NaN if x is Infinity or NaN, or y is NaN or zero.\r\n      if (!x.c || !y.s || y.c && !y.c[0]) {\r\n        return new BigNumber(NaN);\r\n\r\n      // Return x if y is Infinity or x is zero.\r\n      } else if (!y.c || x.c && !x.c[0]) {\r\n        return new BigNumber(x);\r\n      }\r\n\r\n      if (MODULO_MODE == 9) {\r\n\r\n        // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n        // r = x - qy    where  0 <= r < abs(y)\r\n        s = y.s;\r\n        y.s = 1;\r\n        q = div(x, y, 0, 3);\r\n        y.s = s;\r\n        q.s *= s;\r\n      } else {\r\n        q = div(x, y, 0, MODULO_MODE);\r\n      }\r\n\r\n      y = x.minus(q.times(y));\r\n\r\n      // To match JavaScript %, ensure sign of zero is sign of dividend.\r\n      if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\r\n\r\n      return y;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n * 0 = 0\r\n     *  n * N = N\r\n     *  n * I = I\r\n     *  0 * n = 0\r\n     *  0 * 0 = 0\r\n     *  0 * N = N\r\n     *  0 * I = N\r\n     *  N * n = N\r\n     *  N * 0 = N\r\n     *  N * N = N\r\n     *  N * I = N\r\n     *  I * n = I\r\n     *  I * 0 = N\r\n     *  I * N = N\r\n     *  I * I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n     * of BigNumber(y, b).\r\n     */\r\n    P.multipliedBy = P.times = function (y, b) {\r\n      var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\r\n        base, sqrtBase,\r\n        x = this,\r\n        xc = x.c,\r\n        yc = (y = new BigNumber(y, b)).c;\r\n\r\n      // Either NaN, ±Infinity or ±0?\r\n      if (!xc || !yc || !xc[0] || !yc[0]) {\r\n\r\n        // Return NaN if either is NaN, or one is 0 and the other is Infinity.\r\n        if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\r\n          y.c = y.e = y.s = null;\r\n        } else {\r\n          y.s *= x.s;\r\n\r\n          // Return ±Infinity if either is ±Infinity.\r\n          if (!xc || !yc) {\r\n            y.c = y.e = null;\r\n\r\n          // Return ±0 if either is ±0.\r\n          } else {\r\n            y.c = [0];\r\n            y.e = 0;\r\n          }\r\n        }\r\n\r\n        return y;\r\n      }\r\n\r\n      e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\r\n      y.s *= x.s;\r\n      xcL = xc.length;\r\n      ycL = yc.length;\r\n\r\n      // Ensure xc points to longer array and xcL to its length.\r\n      if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;\r\n\r\n      // Initialise the result array with zeros.\r\n      for (i = xcL + ycL, zc = []; i--; zc.push(0));\r\n\r\n      base = BASE;\r\n      sqrtBase = SQRT_BASE;\r\n\r\n      for (i = ycL; --i >= 0;) {\r\n        c = 0;\r\n        ylo = yc[i] % sqrtBase;\r\n        yhi = yc[i] / sqrtBase | 0;\r\n\r\n        for (k = xcL, j = i + k; j > i;) {\r\n          xlo = xc[--k] % sqrtBase;\r\n          xhi = xc[k] / sqrtBase | 0;\r\n          m = yhi * xlo + xhi * ylo;\r\n          xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;\r\n          c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\r\n          zc[j--] = xlo % base;\r\n        }\r\n\r\n        zc[j] = c;\r\n      }\r\n\r\n      if (c) {\r\n        ++e;\r\n      } else {\r\n        zc.splice(0, 1);\r\n      }\r\n\r\n      return normalise(y, zc, e);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n     * i.e. multiplied by -1.\r\n     */\r\n    P.negated = function () {\r\n      var x = new BigNumber(this);\r\n      x.s = -x.s || null;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n + 0 = n\r\n     *  n + N = N\r\n     *  n + I = I\r\n     *  0 + n = n\r\n     *  0 + 0 = 0\r\n     *  0 + N = N\r\n     *  0 + I = I\r\n     *  N + n = N\r\n     *  N + 0 = N\r\n     *  N + N = N\r\n     *  N + I = N\r\n     *  I + n = I\r\n     *  I + 0 = I\r\n     *  I + N = N\r\n     *  I + I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.plus = function (y, b) {\r\n      var t,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n       if (a != b) {\r\n        y.s = -b;\r\n        return x.minus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Return ±Infinity if either ±Infinity.\r\n        if (!xc || !yc) return new BigNumber(a / 0);\r\n\r\n        // Either zero?\r\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n        if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\r\n      if (a = xe - ye) {\r\n        if (a > 0) {\r\n          ye = xe;\r\n          t = yc;\r\n        } else {\r\n          a = -a;\r\n          t = xc;\r\n        }\r\n\r\n        t.reverse();\r\n        for (; a--; t.push(0));\r\n        t.reverse();\r\n      }\r\n\r\n      a = xc.length;\r\n      b = yc.length;\r\n\r\n      // Point xc to the longer array, and b to the shorter length.\r\n      if (a - b < 0) t = yc, yc = xc, xc = t, b = a;\r\n\r\n      // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\r\n      for (a = 0; b;) {\r\n        a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\r\n        xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\r\n      }\r\n\r\n      if (a) {\r\n        xc = [a].concat(xc);\r\n        ++ye;\r\n      }\r\n\r\n      // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n      // ye = MAX_EXP + 1 possible\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     * If sd is undefined or null or true or false, return the number of significant digits of\r\n     * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     * If sd is true include integer-part trailing zeros in the count.\r\n     *\r\n     * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n     *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.precision = P.sd = function (sd, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (sd != null && sd !== !!sd) {\r\n        intCheck(sd, 1, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), sd, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      v = c.length - 1;\r\n      n = v * LOG_BASE + 1;\r\n\r\n      if (v = c[v]) {\r\n\r\n        // Subtract the number of trailing zeros of the last element.\r\n        for (; v % 10 == 0; v /= 10, n--);\r\n\r\n        // Add the number of digits of the first element.\r\n        for (v = c[0]; v >= 10; v /= 10, n++);\r\n      }\r\n\r\n      if (sd && x.e + 1 > n) n = x.e + 1;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n     * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n     *\r\n     * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n     */\r\n    P.shiftedBy = function (k) {\r\n      intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\r\n      return this.times('1e' + k);\r\n    };\r\n\r\n\r\n    /*\r\n     *  sqrt(-n) =  N\r\n     *  sqrt(N) =  N\r\n     *  sqrt(-I) =  N\r\n     *  sqrt(I) =  I\r\n     *  sqrt(0) =  0\r\n     *  sqrt(-0) = -0\r\n     *\r\n     * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n     * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.squareRoot = P.sqrt = function () {\r\n      var m, n, r, rep, t,\r\n        x = this,\r\n        c = x.c,\r\n        s = x.s,\r\n        e = x.e,\r\n        dp = DECIMAL_PLACES + 4,\r\n        half = new BigNumber('0.5');\r\n\r\n      // Negative/NaN/Infinity/zero?\r\n      if (s !== 1 || !c || !c[0]) {\r\n        return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\r\n      }\r\n\r\n      // Initial estimate.\r\n      s = Math.sqrt(+x);\r\n\r\n      // Math.sqrt underflow/overflow?\r\n      // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n      if (s == 0 || s == 1 / 0) {\r\n        n = coeffToString(c);\r\n        if ((n.length + e) % 2 == 0) n += '0';\r\n        s = Math.sqrt(n);\r\n        e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n        if (s == 1 / 0) {\r\n          n = '1e' + e;\r\n        } else {\r\n          n = s.toExponential();\r\n          n = n.slice(0, n.indexOf('e') + 1) + e;\r\n        }\r\n\r\n        r = new BigNumber(n);\r\n      } else {\r\n        r = new BigNumber(s + '');\r\n      }\r\n\r\n      // Check for zero.\r\n      // r could be zero if MIN_EXP is changed after the this value was created.\r\n      // This would cause a division by zero (x/t) and hence Infinity below, which would cause\r\n      // coeffToString to throw.\r\n      if (r.c[0]) {\r\n        e = r.e;\r\n        s = e + dp;\r\n        if (s < 3) s = 0;\r\n\r\n        // Newton-Raphson iteration.\r\n        for (; ;) {\r\n          t = r;\r\n          r = half.times(t.plus(div(x, t, dp, 1)));\r\n\r\n          if (coeffToString(t.c  ).slice(0, s) === (n =\r\n             coeffToString(r.c)).slice(0, s)) {\r\n\r\n            // The exponent of r may here be one less than the final result exponent,\r\n            // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\r\n            // are indexed correctly.\r\n            if (r.e < e) --s;\r\n            n = n.slice(s - 3, s + 1);\r\n\r\n            // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\r\n            // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\r\n            // iteration.\r\n            if (n == '9999' || !rep && n == '4999') {\r\n\r\n              // On the first iteration only, check to see if rounding up gives the\r\n              // exact result as the nines may infinitely repeat.\r\n              if (!rep) {\r\n                round(t, t.e + DECIMAL_PLACES + 2, 0);\r\n\r\n                if (t.times(t).eq(x)) {\r\n                  r = t;\r\n                  break;\r\n                }\r\n              }\r\n\r\n              dp += 4;\r\n              s += 4;\r\n              rep = 1;\r\n            } else {\r\n\r\n              // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\r\n              // result. If not, then there are further digits and m will be truthy.\r\n              if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n                // Truncate to the first rounding digit.\r\n                round(r, r.e + DECIMAL_PLACES + 2, 1);\r\n                m = !r.times(r).eq(x);\r\n              }\r\n\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in exponential notation and\r\n     * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toExponential = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp++;\r\n      }\r\n      return format(this, dp, rm, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n     * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n     * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toFixed = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp = dp + this.e + 1;\r\n      }\r\n      return format(this, dp, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n     * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n     * of the FORMAT object (see BigNumber.set).\r\n     *\r\n     * FORMAT = {\r\n     *      decimalSeparator : '.',\r\n     *      groupSeparator : ',',\r\n     *      groupSize : 3,\r\n     *      secondaryGroupSize : 0,\r\n     *      fractionGroupSeparator : '\\xA0',    // non-breaking space\r\n     *      fractionGroupSize : 0\r\n     * };\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toFormat = function (dp, rm) {\r\n      var str = this.toFixed(dp, rm);\r\n\r\n      if (this.c) {\r\n        var i,\r\n          arr = str.split('.'),\r\n          g1 = +FORMAT.groupSize,\r\n          g2 = +FORMAT.secondaryGroupSize,\r\n          groupSeparator = FORMAT.groupSeparator,\r\n          intPart = arr[0],\r\n          fractionPart = arr[1],\r\n          isNeg = this.s < 0,\r\n          intDigits = isNeg ? intPart.slice(1) : intPart,\r\n          len = intDigits.length;\r\n\r\n        if (g2) i = g1, g1 = g2, g2 = i, len -= i;\r\n\r\n        if (g1 > 0 && len > 0) {\r\n          i = len % g1 || g1;\r\n          intPart = intDigits.substr(0, i);\r\n\r\n          for (; i < len; i += g1) {\r\n            intPart += groupSeparator + intDigits.substr(i, g1);\r\n          }\r\n\r\n          if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\r\n          if (isNeg) intPart = '-' + intPart;\r\n        }\r\n\r\n        str = fractionPart\r\n         ? intPart + FORMAT.decimalSeparator + ((g2 = +FORMAT.fractionGroupSize)\r\n          ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'),\r\n           '$&' + FORMAT.fractionGroupSeparator)\r\n          : fractionPart)\r\n         : intPart;\r\n      }\r\n\r\n      return str;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string array representing the value of this BigNumber as a simple fraction with\r\n     * an integer numerator and an integer denominator. The denominator will be a positive\r\n     * non-zero value less than or equal to the specified maximum denominator. If a maximum\r\n     * denominator is not specified, the denominator will be the lowest value necessary to\r\n     * represent the number exactly.\r\n     *\r\n     * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n     *\r\n     * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n     */\r\n    P.toFraction = function (md) {\r\n      var arr, d, d0, d1, d2, e, exp, n, n0, n1, q, s,\r\n        x = this,\r\n        xc = x.c;\r\n\r\n      if (md != null) {\r\n        n = new BigNumber(md);\r\n\r\n        // Throw if md is less than one or is not an integer, unless it is Infinity.\r\n        if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\r\n          throw Error\r\n            (bignumberError + 'Argument ' +\r\n              (n.isInteger() ? 'out of range: ' : 'not an integer: ') + md);\r\n        }\r\n      }\r\n\r\n      if (!xc) return x.toString();\r\n\r\n      d = new BigNumber(ONE);\r\n      n1 = d0 = new BigNumber(ONE);\r\n      d1 = n0 = new BigNumber(ONE);\r\n      s = coeffToString(xc);\r\n\r\n      // Determine initial denominator.\r\n      // d is a power of 10 and the minimum max denominator that specifies the value exactly.\r\n      e = d.e = s.length - x.e - 1;\r\n      d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\r\n      md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;\r\n\r\n      exp = MAX_EXP;\r\n      MAX_EXP = 1 / 0;\r\n      n = new BigNumber(s);\r\n\r\n      // n0 = d1 = 0\r\n      n0.c[0] = 0;\r\n\r\n      for (; ;)  {\r\n        q = div(n, d, 0, 1);\r\n        d2 = d0.plus(q.times(d1));\r\n        if (d2.comparedTo(md) == 1) break;\r\n        d0 = d1;\r\n        d1 = d2;\r\n        n1 = n0.plus(q.times(d2 = n1));\r\n        n0 = d2;\r\n        d = n.minus(q.times(d2 = d));\r\n        n = d2;\r\n      }\r\n\r\n      d2 = div(md.minus(d0), d1, 0, 1);\r\n      n0 = n0.plus(d2.times(n1));\r\n      d0 = d0.plus(d2.times(d1));\r\n      n0.s = n1.s = x.s;\r\n      e *= 2;\r\n\r\n      // Determine which fraction is closer to x, n0/d0 or n1/d1\r\n      arr = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(\r\n         div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1\r\n          ? [n1.toString(), d1.toString()]\r\n          : [n0.toString(), d0.toString()];\r\n\r\n      MAX_EXP = exp;\r\n      return arr;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return the value of this BigNumber converted to a number primitive.\r\n     */\r\n    P.toNumber = function () {\r\n      return +this;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n     * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n     * necessary to represent the integer part of the value in fixed-point notation, then use\r\n     * exponential notation.\r\n     *\r\n     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.toPrecision = function (sd, rm) {\r\n      if (sd != null) intCheck(sd, 1, MAX);\r\n      return format(this, sd, rm, 2);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n     * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n     * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n     * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n     * TO_EXP_NEG, return exponential notation.\r\n     *\r\n     * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n     *\r\n     * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n     */\r\n    P.toString = function (b) {\r\n      var str,\r\n        n = this,\r\n        s = n.s,\r\n        e = n.e;\r\n\r\n      // Infinity or NaN?\r\n      if (e === null) {\r\n\r\n        if (s) {\r\n          str = 'Infinity';\r\n          if (s < 0) str = '-' + str;\r\n        } else {\r\n          str = 'NaN';\r\n        }\r\n      } else {\r\n        str = coeffToString(n.c);\r\n\r\n        if (b == null) {\r\n          str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n           ? toExponential(str, e)\r\n           : toFixedPoint(str, e, '0');\r\n        } else {\r\n          intCheck(b, 2, ALPHABET.length, 'Base');\r\n          str = convertBase(toFixedPoint(str, e, '0'), 10, b, s, true);\r\n        }\r\n\r\n        if (s < 0 && n.c[0]) str = '-' + str;\r\n      }\r\n\r\n      return str;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return as toString, but do not accept a base argument, and include the minus sign for\r\n     * negative zero.\r\n     */\r\n    P.valueOf = P.toJSON = function () {\r\n      var str,\r\n        n = this,\r\n        e = n.e;\r\n\r\n      if (e === null) return n.toString();\r\n\r\n      str = coeffToString(n.c);\r\n\r\n      str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n        ? toExponential(str, e)\r\n        : toFixedPoint(str, e, '0');\r\n\r\n      return n.s < 0 ? '-' + str : str;\r\n    };\r\n\r\n\r\n    P._isBigNumber = true;\r\n\r\n    if (configObject != null) BigNumber.set(configObject);\r\n\r\n    return BigNumber;\r\n  }\r\n\r\n\r\n  // PRIVATE HELPER FUNCTIONS\r\n\r\n\r\n  function bitFloor(n) {\r\n    var i = n | 0;\r\n    return n > 0 || n === i ? i : i - 1;\r\n  }\r\n\r\n\r\n  // Return a coefficient array as a string of base 10 digits.\r\n  function coeffToString(a) {\r\n    var s, z,\r\n      i = 1,\r\n      j = a.length,\r\n      r = a[0] + '';\r\n\r\n    for (; i < j;) {\r\n      s = a[i++] + '';\r\n      z = LOG_BASE - s.length;\r\n      for (; z--; s = '0' + s);\r\n      r += s;\r\n    }\r\n\r\n    // Determine trailing zeros.\r\n    for (j = r.length; r.charCodeAt(--j) === 48;);\r\n    return r.slice(0, j + 1 || 1);\r\n  }\r\n\r\n\r\n  // Compare the value of BigNumbers x and y.\r\n  function compare(x, y) {\r\n    var a, b,\r\n      xc = x.c,\r\n      yc = y.c,\r\n      i = x.s,\r\n      j = y.s,\r\n      k = x.e,\r\n      l = y.e;\r\n\r\n    // Either NaN?\r\n    if (!i || !j) return null;\r\n\r\n    a = xc && !xc[0];\r\n    b = yc && !yc[0];\r\n\r\n    // Either zero?\r\n    if (a || b) return a ? b ? 0 : -j : i;\r\n\r\n    // Signs differ?\r\n    if (i != j) return i;\r\n\r\n    a = i < 0;\r\n    b = k == l;\r\n\r\n    // Either Infinity?\r\n    if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\r\n\r\n    // Compare exponents.\r\n    if (!b) return k > l ^ a ? 1 : -1;\r\n\r\n    j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n    // Compare digit by digit.\r\n    for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\r\n\r\n    // Compare lengths.\r\n    return k == l ? 0 : k > l ^ a ? 1 : -1;\r\n  }\r\n\r\n\r\n  /*\r\n   * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n   */\r\n  function intCheck(n, min, max, name) {\r\n    if (n < min || n > max || n !== (n < 0 ? mathceil(n) : mathfloor(n))) {\r\n      throw Error\r\n       (bignumberError + (name || 'Argument') + (typeof n == 'number'\r\n         ? n < min || n > max ? ' out of range: ' : ' not an integer: '\r\n         : ' not a primitive number: ') + n);\r\n    }\r\n  }\r\n\r\n\r\n  function isArray(obj) {\r\n    return Object.prototype.toString.call(obj) == '[object Array]';\r\n  }\r\n\r\n\r\n  // Assumes finite n.\r\n  function isOdd(n) {\r\n    var k = n.c.length - 1;\r\n    return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\r\n  }\r\n\r\n\r\n  function toExponential(str, e) {\r\n    return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +\r\n     (e < 0 ? 'e' : 'e+') + e;\r\n  }\r\n\r\n\r\n  function toFixedPoint(str, e, z) {\r\n    var len, zs;\r\n\r\n    // Negative exponent?\r\n    if (e < 0) {\r\n\r\n      // Prepend zeros.\r\n      for (zs = z + '.'; ++e; zs += z);\r\n      str = zs + str;\r\n\r\n    // Positive exponent\r\n    } else {\r\n      len = str.length;\r\n\r\n      // Append zeros.\r\n      if (++e > len) {\r\n        for (zs = z, e -= len; --e; zs += z);\r\n        str += zs;\r\n      } else if (e < len) {\r\n        str = str.slice(0, e) + '.' + str.slice(e);\r\n      }\r\n    }\r\n\r\n    return str;\r\n  }\r\n\r\n\r\n  // EXPORT\r\n\r\n\r\n  BigNumber = clone();\r\n  BigNumber['default'] = BigNumber.BigNumber = BigNumber;\r\n\r\n  // AMD.\r\n  if (typeof define == 'function' && define.amd) {\r\n    define(function () { return BigNumber; });\r\n\r\n  // Node.js and other environments that support module.exports.\r\n  } else if (typeof module != 'undefined' && module.exports) {\r\n    module.exports = BigNumber;\r\n\r\n  // Browser.\r\n  } else {\r\n    if (!globalObject) {\r\n      globalObject = typeof self != 'undefined' && self ? self : window;\r\n    }\r\n\r\n    globalObject.BigNumber = BigNumber;\r\n  }\r\n})(this);\r\n","export const GAS_SPEEDS: string[] = ['slow', 'medium', 'fast', 'ape']\n"],"sourceRoot":""}