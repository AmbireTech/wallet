{"version":3,"sources":["components/Wallet/Security/AddAuthSigner/AddAuthSigner.js","components/Modals/OtpTwoFAModal/OtpTwoFAModal.js","components/Modals/OtpTwoFADisableModal/OtpTwoFADisableModal.js","components/Wallet/Security/Backup/Backup.js","components/Wallet/Security/Security.js","lib/ledgerWebHID.js","lib/validations/formValidations.js","components/Wallet/Security/PendingRecoveryNotice/PendingRecoveryNotice.js"],"names":["AddAuthSigner","selectedNetwork","selectedAcc","onAddBtnClicked","useState","address","index","signerAddress","setSignerAddress","addAccErr","setAddAccErr","disabled","setDisabled","modalToggle","setModalToggle","signersToChoose","setChooseSigners","showLoading","setShowLoading","textInputInfo","setTextInputInfo","showModal","useModals","success","message","validationFormMgs","setValidationFormMgs","connectLedgerAndGetAccounts","a","isFirefox","connectLedgerAndGetAccountsU2F","connectLedgerAndGetAccountsWebHID","provider","LedgerSubprovider","networkId","ledgerEthereumClientFactoryAsync","ledgerEthereumBrowserClientFactoryAsync","baseDerivationPath","PARENT_HD_PATH","getAccountsAsync","addresses","signerName","error","ledgerGetAddresses","addrData","length","onSignerAddressClicked","console","log","statusCode","id","connectTrezorAndGetAccounts","TrezorConnect","manifest","email","appUrl","TrezorSubprovider","trezorConnectClientApi","connectWeb3AndGetAccounts","window","ethereum","Error","request","method","web3Accs","setLatticeAddresses","deviceId","commKey","isPaired","signerExtra","type","connectGridPlusAndGetAccounts","client","latticeInit","latticeConnect","errConnect","pair","timeout","latticeGetAddresses","res","errGetAddresses","LatticeModal","wrapErr","fn","useCallback","value","prevState","handleSelectSignerAccountModalCloseClicked","useEffect","SelectSignerAccountModal","description","onCloseBtnClicked","addFromSignerButtons","className","onClick","style","backgroundImage","isAddressValid","validateAddAuthSignerAddress","placeholder","info","onInput","height","title","closeOnClick","icon","small","size","OtpTwoFAModal","relayerURL","setCacheBreak","hideModal","addToast","useToasts","secret","useMemo","authenticator","generateSecret","isLoading","setLoading","imageURL","setImageURL","receivedOtp","setReceivedOTP","showSecret","setShowSecret","emailConfirmCode","setEmailConfirmCode","isTimeIsUp","setIsTimeIsUp","hexSecret","setHexSecret","ethers","utils","hexlify","toUtf8Bytes","JSON","stringify","otp","timestamp","Date","getTime","generateQR","otpAuth","keyuri","QRCode","toDataURL","quality","margin","url","sendEmail","fetchPost","toSign","confCodeRequired","verifyOTP","verify","token","code","signatureEthers","sig","resp","resetForm","topLeft","seconds","setTimeIsUp","val","alt","src","marginBottom","onSubmit","e","preventDefault","pattern","autoComplete","required","minLength","maxLength","OtpTwoFADisableModal","disableOTP","Backup","account","selectedAccount","accounts","onOpen","onAddAccount","onPaperBackupClick","onPaperImportClick","slice","href","encodeURIComponent","download","full","downloadedBackup","primaryKeyBackup","renderPaperImportButton","IDENTITY_INTERFACE","Interface","require","Security","addRequest","showSendTxns","humanizerInfo","useConstants","constants","now","cacheBreak","intvl","setTimeout","clearTimeout","useRelayerData","data","errMsg","privileges","otpEnabled","recoveryLock","history","useHistory","find","x","craftTransaction","privLevel","to","encodeFunctionData","addTransactionToAddRequest","txn","chainId","err","onMakeDefaultBtnClicked","isQuickAccount","signer","push","showResetPasswordModal","ResetPasswordModal","handleEnableOtp","handleDisableOtp","onDrop","acceptedFiles","rejectedFiles","reader","FileReader","file","path","toFixed","errors","readAsText","onload","readerEvent","content","target","result","fileContent","parse","validatedFile","validateImportedAccountProps","select","useDropzone","noClick","noKeyboard","accept","maxFiles","validator","fileSizeValidator","getRootProps","getInputProps","open","isDragActive","isDragAccept","isDragReject","hasPendingReset","quickAccManager","status","preRecovery","abiCoder","AbiCoder","timelock","one","two","keccak256","encode","accHash","privList","Object","entries","map","addr","addressName","getName","isQuickAcc","accountPresets","privText","isSelected","canChangePassword","red","key","privilegesOptions","false","onRemoveBtnClicked","filter","signersFragment","PendingRecoveryNotice","name","rel","newSignerAddress","true","ethUtil","HDNode","connectedDevices","getTransport","TransportWebHID","list","opened","includes","transport","getAccounts","close","parentKeyDerivationPath","getAddressInternal","then","o","catch","ledgerResponse","hdKey","publicKey","Buffer","from","chainCode","mainAddress","addressOfHDKey","initialDerivedKeyInfo","derivationPath","calculateDerivedHDKeyInfos","appEth","AppEth","ledgerTimeout","Promise","resolve","reject","timeoutHandle","race","getAddress","ledgerSignTransaction","fromAddr","unsignedTxObj","gasLimit","gas","serializedUnsigned","serialize","accountsData","toLowerCase","signTransaction","substr","rsvResponse","intV","parseInt","v","Math","floor","serializedSigned","r","s","ledgerSignMessage","hash","signPersonalMessage","rsvReply","signedMsg","toString","ledgerSignMessage712","domainSeparator","hashStructMessage","signEIP712HashedMessage","count","derivedKeys","i","fullDerivationPath","derive","derivedKey","derivedPublicKey","ethereumAddressUnprefixed","publicToAddress","addHexPrefix","validateAddress","isValidAddress","isValidAddr","validateSendTransferAddress","addressConfirmed","isKnownAddress","isUDAddress","isEnsAddress","feeCollector","isKnownTokenOrContract","validateSendTransferAmount","amount","selectedAsset","decimals","parsedAmount","indexOf","bigNumberAmount","parseUnits","balanceRaw","gt","balance","symbol","validateSendNftAddress","metadata","network","owner","isAlreadyInitiated","createRecoveryRequest","bundle","buildRecoveryBundle","recoveryLockStatus","remainingTime","ceil","styleClass","remaining"],"mappings":"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","file":"static/js/15.38108412.chunk.js","sourcesContent":["import './AddAuthSigner.scss'\nimport { useState, useEffect, useCallback } from 'react'\n\nimport { TextInput, Button, DropDown, Loading } from 'components/common'\nimport { LedgerSubprovider } from '@0x/subproviders/lib/src/subproviders/ledger' // https://github.com/0xProject/0x-monorepo/issues/1400\nimport { ledgerEthereumBrowserClientFactoryAsync } from '@0x/subproviders/lib/src' // https://github.com/0xProject/0x-monorepo/issues/1400\nimport TrezorConnect from '@trezor/connect-web'\nimport { TrezorSubprovider } from '@0x/subproviders/lib/src/subproviders/trezor' // https://github.com/0xProject/0x-monorepo/issues/1400\nimport SelectSignerAccountModal from 'components/Modals/SelectSignerAccountModal/SelectSignerAccountModal'\nimport { useModals } from 'hooks'\nimport { isFirefox } from 'lib/isFirefox'\nimport { ledgerGetAddresses, PARENT_HD_PATH } from \"lib/ledgerWebHID\"\nimport { validateAddAuthSignerAddress } from 'lib/validations/formValidations'\nimport { BsXLg } from 'react-icons/bs'\nimport { MdOutlineAdd } from 'react-icons/md'\nimport LatticeModal from 'components/Modals/LatticeModal/LatticeModal'\nimport { latticeInit, latticeConnect, latticeGetAddresses } from 'lib/lattice'\n\nconst AddAuthSigner = ({ selectedNetwork, selectedAcc, onAddBtnClicked }) => {\n  const [signerAddress, setSignerAddress] = useState({\n    address: '',\n    index: 0,\n  })\n  const [addAccErr, setAddAccErr] = useState('')\n  const [disabled, setDisabled] = useState(true)\n  const [modalToggle, setModalToggle] = useState(true)\n  const [signersToChoose, setChooseSigners] = useState(null)\n  const [showLoading, setShowLoading] = useState(false)\n  const [textInputInfo, setTextInputInfo] = useState('')\n  const { showModal } = useModals()\n  const [validationFormMgs, setValidationFormMgs] = useState({ \n    success: false, \n    message: ''\n  })\n  \n  async function connectLedgerAndGetAccounts() {\n    if (isFirefox()) {\n      await connectLedgerAndGetAccountsU2F()\n    } else {\n      await connectLedgerAndGetAccountsWebHID()\n    }\n  }\n\n  async function connectLedgerAndGetAccountsU2F() {\n    const provider = new LedgerSubprovider({\n      networkId: 0, // @TODO: is this needed?\n      ledgerEthereumClientFactoryAsync: ledgerEthereumBrowserClientFactoryAsync,\n      baseDerivationPath: PARENT_HD_PATH\n    })\n    // NOTE: do not attempt to do both of these together (await Promise.all)\n    // there is a bug in the ledger subprovider (race condition), so it will think we're trying to make two connections simultaniously\n    // cause one call won't be aware of the other's attempt to connect\n      const addresses = await provider.getAccountsAsync(100)\n      setChooseSigners({ addresses, signerName: 'Ledger' })\n      setModalToggle(true)\n  }\n\n  async function connectLedgerAndGetAccountsWebHID() {\n    let error = null\n    try {\n      const addrData = await ledgerGetAddresses()\n      if (addrData.length === 1) {\n        return onSignerAddressClicked({\n          address: addrData[0],\n          index: 0,\n        })\n      } else {\n        setChooseSigners({ address: addrData, signerName: 'Ledger' })\n        setModalToggle(true)\n      }\n    } catch (e) {\n      console.log(e)\n      if (e.statusCode && e.id === 'InvalidChannel') {\n        error = \"Invalid channel\"\n      } else if (e.statusCode && e.statusCode === 25873) {\n        error = \"Please make sure your ledger is connected and the ethereum app is open\"\n      } else {\n        error = e.message\n      }\n    }\n\n    if (error) {\n      setAddAccErr(`Ledger error: ${error.message || error}`)\n    }\n  }\n\n  async function connectTrezorAndGetAccounts() {\n    /*\n      const engine = new Web3ProviderEngine({ pollingInterval: this.pollingInterval })\n      engine.addProvider(new TrezorSubprovider({ trezorConnectClientApi: TrezorConnect, ...this.config }))\n      engine.addProvider(new CacheSubprovider())\n      engine.addProvider(new RPCSubprovider(this.url, this.requestTimeoutMs))\n      */\n    TrezorConnect.manifest({\n      email: 'contactus@ambire.com',\n      appUrl: 'https://wallet.ambire.com'\n    })\n    const provider = new TrezorSubprovider({\n      trezorConnectClientApi: TrezorConnect,\n    })\n    const addresses = await provider.getAccountsAsync(100)\n    setChooseSigners({ addresses, signerName: 'Trezor' })\n    setModalToggle(true)\n  }\n\n  async function connectWeb3AndGetAccounts() {\n    // @TODO: pending state; should bein the LoginORSignup (AddAccount) component\n    if (typeof window.ethereum === 'undefined') {\n      // @TODO catch this\n      throw new Error('MetaMask not available')\n    }\n    const ethereum = window.ethereum\n    const web3Accs = await ethereum.request({ method: 'eth_requestAccounts' })\n    if (!web3Accs.length) throw new Error('No accounts connected')\n    if (web3Accs.length === 1)\n      return onSignerAddressClicked({\n        address: web3Accs[0],\n        index: 0,\n      })\n\n    setChooseSigners({ addresses: web3Accs, signerName: 'Web3' })\n    setModalToggle(true)\n  }\n\n  const setLatticeAddresses = ({ addresses, deviceId, commKey, isPaired }) => {\n    setChooseSigners({\n      addresses, signerName: 'Lattice', signerExtra: {\n        type: 'Lattice',\n        deviceId: deviceId,\n        commKey: commKey,\n        isPaired: isPaired\n      }\n    })\n\n    setModalToggle(true)\n  }\n  \n  async function connectGridPlusAndGetAccounts() {\n    if (selectedAcc.signerExtra && \n      selectedAcc.signerExtra.type === 'Lattice' && \n      selectedAcc.signerExtra.isPaired) {\n        const { commKey, deviceId } = selectedAcc.signerExtra\n        const client = latticeInit(commKey)\n\n        setShowLoading(true)\n\n        const { isPaired, errConnect } = await latticeConnect(client, deviceId)\n        if (errConnect) {\n          setShowLoading(false)\n          setAddAccErr(errConnect.message || errConnect)\n\n          return\n        }\n\n        if (!isPaired) {\n          setShowLoading(false)\n          // Canceling the visualization of the secret code on the device's screen.\n          client.pair('')\n          setAddAccErr(`The Lattice device is not paired! Please re-add your account!.`, { timeout: 30000 })\n          \n          return \n        }\n\n        const { res, errGetAddresses } = await latticeGetAddresses(client)\n        if (errGetAddresses) {\n            setShowLoading(false)\n            setAddAccErr(`Lattice: ${errGetAddresses}`, { error: true })\n\n            return\n        }\n        \n        if (res) {\n          setShowLoading(false)\n          setLatticeAddresses({ addresses: res, deviceId, commKey, isPaired: true })\n        }\n      } else {\n        showModal(<LatticeModal addresses={setLatticeAddresses} />)\n      }\n  }\n\n  const modalHandler = () => {\n    setModalToggle(prevState => !prevState)\n  }\n\n  const wrapErr = async fn => {\n    setAddAccErr('')\n    try {\n      await fn()\n    } catch (e) {\n      console.error(e)\n      setAddAccErr(`Unexpected error: ${e.message || e}`)\n    }\n  }\n\n  const onSignerAddressClicked = useCallback(value => {\n    setSignerAddress(value)\n    modalHandler()\n    if (signersToChoose) setTextInputInfo(`${signersToChoose.signerName} address # ${value.index + 1}`)\n    setChooseSigners(null)\n  }, [signersToChoose])\n\n  const handleSelectSignerAccountModalCloseClicked = useCallback(() => setChooseSigners(null), [])\n\n  useEffect(() => {\n    if (modalToggle && signersToChoose)\n      showModal(\n        <SelectSignerAccountModal\n          signersToChoose={signersToChoose.addresses}\n          selectedNetwork={selectedNetwork}\n          onSignerAddressClicked={onSignerAddressClicked}\n          description={`You will authorize the selected ${signersToChoose.signerName} address to sign transactions for your account.`}\n          onCloseBtnClicked={handleSelectSignerAccountModalCloseClicked}\n        />\n      )\n  }, [handleSelectSignerAccountModalCloseClicked, modalToggle, onSignerAddressClicked, selectedNetwork, showModal, signersToChoose])\n\n  const addFromSignerButtons = (\n    <div className=\"wallet-btns-wrapper\">\n      <Button\n        onClick={() => wrapErr(connectTrezorAndGetAccounts)}\n      >\n        <div\n          className=\"icon\"\n          style={{ backgroundImage: 'url(./resources/trezor.png)' }}\n        />\n        Trezor\n      </Button>\n      <Button\n        onClick={() => wrapErr(connectLedgerAndGetAccounts)}\n      >\n        <div\n          className=\"icon\"\n          style={{ backgroundImage: 'url(./resources/ledger.png)' }}\n        />\n        Ledger\n      </Button>\n      <Button\n        onClick={() => wrapErr(connectGridPlusAndGetAccounts)}\n      >\n        <div\n          className=\"icon\"\n          style={{ backgroundImage: 'url(./resources/grid-plus.png)' }}\n        />\n        Grid+ Lattice1\n      </Button>\n      <Button\n        onClick={() => wrapErr(connectWeb3AndGetAccounts)}\n      >\n        <div\n          className=\"icon\"\n          style={{ backgroundImage: 'url(./resources/metamask.png)' }}\n        />\n        Metamask / Browser\n      </Button>\n    </div>\n  )\n\n  const onTextInput = value => {\n    if (textInputInfo.length) setTextInputInfo('')\n    setSignerAddress({ ...signerAddress, address: value })\n  }\n\n  useEffect(() => {\n    const isAddressValid = validateAddAuthSignerAddress(signerAddress.address, selectedAcc.id)\n    \n    setDisabled(!isAddressValid.success)\n\n    setValidationFormMgs({ \n      success: isAddressValid.success, \n      message: isAddressValid.message ? isAddressValid.message : ''\n    })\n\n  }, [selectedAcc, signerAddress.address])\n\n  return (\n    <div className=\"content\">\n      {showLoading && \n      (<>\n        <h3>It may takes a while.</h3>\n        <h3>Please wait...</h3>\n        <Loading />\n      </>)}\n      {!showLoading && (<div className=\"signer\">\n        <div className=\"signer-address-input\">\n          <TextInput\n            placeholder=\"Enter signer address\"\n            className=\"depositAddress\"\n            value={signerAddress.address}\n            info={textInputInfo}\n            onInput={onTextInput}\n          />\n          <DropDown\n            style={{ height: '60px' }}\n            title=\"Connect signer\"\n            closeOnClick\n          >\n            {addFromSignerButtons}\n          </DropDown>\n        </div>\n        <div className=\"btns-wrapper\">\n          <Button\n            disabled={disabled}\n            icon={<MdOutlineAdd/>}\n            onClick={() => onAddBtnClicked(signerAddress)}\n            small\n          >\n            Add\n          </Button>\n        </div>\n      </div>)}\n      { validationFormMgs.message && \n        (<div className='validation-error'><BsXLg size={12}/>&nbsp;{validationFormMgs.message}</div>) \n      }\n      {addAccErr ? <h3 className=\"error\">{addAccErr}</h3> : <></>}\n    </div>\n  )\n}\n\nexport default AddAuthSigner\n","import './OtpTwoFAModal.scss'\n\nimport { Modal, Button, TextInput, Loading } from 'components/common'\nimport { authenticator } from '@otplib/preset-default'\nimport QRCode from 'qrcode'\nimport { useCallback, useEffect, useMemo, useState } from 'react'\nimport { useToasts } from 'hooks/toasts'\nimport { fetchPost } from 'lib/fetch'\nimport { useModals } from 'hooks'\nimport { ethers } from 'ethers'\nimport { CountdownTimer } from 'components/common'\n\nconst TIMER_IN_SECONDS = 300\n\nconst OtpTwoFAModal = ({ relayerURL, selectedAcc, setCacheBreak }) => {\n    const { hideModal } = useModals()\n    const { addToast } = useToasts()\n\n    const secret = useMemo(() => authenticator.generateSecret(20), []) \n    \n    const [isLoading, setLoading] = useState(false)\n    const [imageURL, setImageURL] = useState(null)\n    const [receivedOtp, setReceivedOTP] = useState('')\n    const [showSecret, setShowSecret] = useState(false)\n    const [emailConfirmCode, setEmailConfirmCode] = useState('')\n    const [isTimeIsUp, setIsTimeIsUp] = useState(false)\n    const [hexSecret, setHexSecret] = useState()\n    \n    useEffect(() => {\n      setHexSecret(ethers.utils.hexlify(ethers.utils.toUtf8Bytes(JSON.stringify({ otp: secret, timestamp: new Date().getTime() }))))\n    }, [secret])\n\n    const generateQR = useCallback(() => {\n        const otpAuth = authenticator.keyuri(\n            selectedAcc.email,\n            'Ambire Wallet',\n            secret\n        )\n\n        const qrCodeOptions = {\n            quality: 1,\n            margin: 1,\n        }\n        \n        QRCode.toDataURL(otpAuth, qrCodeOptions, (error, url) => {\n            if (error) {\n                console.log(error)\n                addToast(error.message, { error: true })\n            } else {\n                setImageURL(url)\n            }\n        })\n    }, [addToast, secret, selectedAcc.email])\n\n    useEffect(generateQR, [generateQR])\n\n    const handleSubmit = e => {\n        e.preventDefault()\n        setLoading(true)\n        verifyOTP()\n    }\n\n    const sendEmail = async() => {\n        if (!relayerURL) {\n            addToast('Email/pass accounts not supported without a relayer connection', { error: true })\n            return\n        }\n        \n        const { success, confCodeRequired } = await fetchPost(\n            // network doesn't matter when signing\n            `${relayerURL}/second-key/${selectedAcc.id}/ethereum/sign`, { \n                toSign: hexSecret \n            })\n        if (!success) addToast('Unexpected error. This should never happen, please report this on help.ambire.com', { error: true })\n        if (confCodeRequired !== 'email') addToast('Expected email verification. This should never happen, please report this on help.ambire.com', { error: true })\n        if (success && confCodeRequired === 'email') addToast('A confirmation code was sent to your email, please enter it along...')\n    }\n    \n    const verifyOTP = async () => {\n        const isValid = authenticator.verify({ token: receivedOtp, secret })\n        \n        if (!isValid) {\n            addToast('Invalid or outdated OTP code entered. If you keep seeing this, please ensure your system clock is synced correctly.', { error: true })\n            setLoading(false)\n            return\n        }\n\n        try {\n            if (!emailConfirmCode.length) {\n                addToast('Please enter the code from authenticator app.')\n                return\n            }\n\n            const { success, signatureEthers, message } = await fetchPost(\n                // network doesn't matter when signing\n                `${relayerURL}/second-key/${selectedAcc.id}/ethereum/sign`, {\n                    toSign: hexSecret, \n                    code: emailConfirmCode\n                })\n            \n            if (!success) {\n                throw new Error(message || 'unknown error')\n            }\n            \n            const resp = await fetchPost(\n                `${relayerURL}/identity/${selectedAcc.id}/modify`, { \n                    otp: hexSecret, \n                    sig: signatureEthers \n                })\n\n            if (resp.success) {\n                addToast(`You have successfully enabled two-factor authentication.`)\n                setCacheBreak()\n                resetForm()\n                setLoading(false)\n                hideModal()\n            } else {\n                throw new Error(`${resp.message || 'unknown error'}`)\n            }\n        } catch (e) {\n            console.error(e)\n            addToast('OTP: ' + e.message || e, { error: true })\n            setLoading(false)\n        }\n    }\n\n    const resetForm = () => {\n        setEmailConfirmCode('')\n        setReceivedOTP('')\n    }\n\n    const handleTimeIsUp = (val) => {\n        setIsTimeIsUp(val)\n    }\n\n    return (\n        <Modal\n            title=\"Two Factor Authentication\" \n            topLeft={(<CountdownTimer seconds={TIMER_IN_SECONDS} setTimeIsUp={handleTimeIsUp}/>)}\n        >\n            <div id=\"otp-auth\">\n                {isTimeIsUp && <div className='timer-reset-msg'>Please reopen the modal to reset the session.</div>}\n                <div className=\"img-wrapper\">\n                    <img alt=\"qr-code\" src={imageURL}></img>\n                </div>\n                <div className=\"img-msg\" style={{ marginBottom: showSecret ? '0px' : '22px'}}>\n                    {!showSecret && \n                    (<span className=\"click-here\" onClick={() => { setShowSecret(prevState => !prevState) }}>\n                        Unable to scan code? Click here.\n                    </span>)}\n                    {showSecret && (<><span>Enter this OTP in your app:</span><div>{secret}</div></>)}\n                </div>\n                <form onSubmit={handleSubmit}>\n                    <div>\n                        <h4>Confirmation code sent via Email</h4>\n                        <div className='input-wrapper'>\n                            <TextInput\n                                small\n                                pattern='[0-9]+'\n                                title='Confirmation code should be 6 digits'\n                                autoComplete='nope'\n                                required minLength={6} maxLength={6}\n                                placeholder='Confirmation code'\n                                value={emailConfirmCode}\n                                onInput={value => setEmailConfirmCode(value)}\n                            ></TextInput>\n                            \n                            <Button type=\"button\" small disabled={isTimeIsUp} onClick={sendEmail}>Send Email</Button>\n                        </div>\n                        <h4>Authenticator app code</h4>\n                        <TextInput\n                            placeholder=\"Enter the code from authenticator app\"\n                            onInput={setReceivedOTP}\n                            value={receivedOtp}\n                            pattern=\"[0-9]{6}\"\n                            required\n                        />\n                    </div>\n                    <div className=\"buttons\">\n                        {!isLoading ? (<Button type=\"submit\" disabled={isTimeIsUp}>Enable 2FA</Button>) : (<Button disabled><Loading /></Button>)}\n                    </div>\n                </form>\n            </div>\n        </Modal>\n    )\n}\n\nexport default OtpTwoFAModal\n","import './OtpTwoFADisableModal.scss'\nimport { useModals } from 'hooks'\nimport { fetchPost } from 'lib/fetch'\nimport { Modal, Button, TextInput, Loading } from 'components/common'\nimport { useState, useEffect } from 'react'\nimport { useToasts } from 'hooks/toasts'\nimport { ethers } from 'ethers'\nimport { CountdownTimer } from 'components/common'\n\nconst TIMER_IN_SECONDS = 300\n\nconst OtpTwoFADisableModal = ({ relayerURL, selectedAcc, setCacheBreak }) => {\n    const { hideModal } = useModals()\n    const { addToast } = useToasts()\n    const [isLoading, setLoading] = useState(false)\n\n    const [receivedOtp, setReceivedOTP] = useState('')\n    const [isTimeIsUp, setIsTimeIsUp] = useState(false)\n    const [hexSecret, setHexSecret] = useState()\n    \n    useEffect(() => {\n      setHexSecret(ethers.utils.hexlify(ethers.utils.toUtf8Bytes(JSON.stringify({ otp: null, timestamp: new Date().getTime() }))))\n    }, [])\n\n    const handleSubmit = e => {\n      e.preventDefault()\n      setLoading(true)\n      disableOTP()\n    }\n\n    const disableOTP = async() => {\n      try {\n          const { success, signatureEthers, message } = await fetchPost(\n            // network doesn't matter when signing\n            `${relayerURL}/second-key/${selectedAcc.id}/ethereum/sign`, { \n              toSign: hexSecret, \n              code: receivedOtp \n            })\n          if (!success) {\n              throw new Error(message || 'unknown error')\n          }\n\n          const resp = await fetchPost(\n            `${relayerURL}/identity/${selectedAcc.id}/modify`, { \n              otp: hexSecret, \n              sig: signatureEthers \n            })\n\n          if (resp.success) {\n              addToast(`You have successfully disabled two-factor authentication.`)\n              setCacheBreak() \n              resetForm()\n              setLoading(false)\n              hideModal()\n          } else {\n              throw new Error(`${resp.message || 'unknown error'}`)\n          }\n      } catch (e) {\n          console.error(e)\n          addToast('OTP: ' + e.message || e, { error: true })\n          setLoading(false)\n      }\n    }\n\n    const resetForm = () => {\n      setReceivedOTP('')\n    }\n\n    const handleTimeIsUp = (val) => {\n        setIsTimeIsUp(val)\n    }\n\n    return (\n        <Modal id='disable-otp-modal' \n          title=\"Disable Two Factor Authentication\" \n          topLeft={(<CountdownTimer seconds={TIMER_IN_SECONDS} setTimeIsUp={handleTimeIsUp}/>)}\n        >\n          <form onSubmit={handleSubmit}>\n            {isTimeIsUp && <div className='timer-reset-msg'>Please reopen the modal to reset the session.</div>}\n            <div>\n              <h4>Authenticator app code</h4>\n                <TextInput\n                    placeholder=\"Enter the code from authenticator app\"\n                    onInput={setReceivedOTP}\n                    value={receivedOtp}\n                    pattern=\"[0-9]{6}\"\n                    required\n                />\n            </div>\n            <div className=\"buttons\">\n              {!isLoading ? (<Button type=\"submit\" disabled={isTimeIsUp}>Disable 2FA</Button>) : (<Button disabled><Loading /></Button>)}\n            </div>\n          </form>\n        </Modal>\n    )\n}\n\nexport default OtpTwoFADisableModal\n","import './Backup.scss'\n\nimport { BsFileEarmarkTextFill, BsFileEarmarkArrowDownFill, BsFileEarmarkArrowUpFill, BsFileMedicalFill } from \"react-icons/bs\"\n\nimport { Button } from \"components/common\"\nimport { PaperBackupModal, PaperImportModal } from 'components/Modals'\nimport useModals from 'hooks/modals'\n\nconst Backup = ({ selectedAccount, accounts, onOpen, onAddAccount, relayerURL }) => {\n\n    const { showModal } = useModals()\n\n    const onBackupDownloaded = () => {\n        onAddAccount({\n            ...selectedAccount,\n            downloadedBackup: true\n        })\n    }\n\n    const onPaperBackupClick = () => {\n        showModal(<PaperBackupModal\n          selectedAccount={selectedAccount}\n          accounts={accounts}\n          onAddAccount={onAddAccount}\n        />)\n    }\n\n    const onPaperImportClick = () => {\n        showModal(<PaperImportModal\n          accounts={accounts}\n          onAddAccount={onAddAccount}\n          selectedAccount={selectedAccount}\n          relayerURL={relayerURL}\n        />)\n    }\n\n    const renderPaperExportButton = (account) => {\n        if (account.email) {\n            if (account.primaryKeyBackup) {\n                return <Button full small onClick={onPaperBackupClick}>Backup on paper</Button>\n            }\n            return <Button full small disabled className='email-accounts-only'>Keys required for paper backup</Button>\n        }\n        return <Button full small disabled className='email-accounts-only'>Available for emails accounts only</Button>\n    }\n\n    const renderPaperImportButton = (account) => {\n        if (account.email) {\n            if (account.primaryKeyBackup) {\n                return <Button full small disabled >Keys already active</Button>\n            }\n            return <Button small full onClick={onPaperImportClick}>Import from paper</Button>\n        }\n        return <Button full small disabled className='email-accounts-only'>Available for emails accounts only</Button>\n    }\n\n    return (\n        <div id=\"backup\">\n            <div className=\"panel\">\n                <div className=\"panel-title\">Backup current account</div>\n                <div className='backup-note'>\n                    <b>Note:</b> Those backups exports will be importable in Ambire Wallet only. They are not importable in other wallets.\n                </div>\n                <div className=\"content\" id=\"export\">\n\n                    <div className='panel-sub'>\n                        <div className='backupIcon'>\n                            <BsFileEarmarkArrowDownFill />\n                        </div>\n                        <div className='backup-info'>\n                            <p>\n                                Download a backup of your current account ({selectedAccount.id.slice(0, 5)}...{selectedAccount.id.slice(-3)}) encrypted with\n                                your password. It's safe to store in iCloud/Google Drive, but you cannot use it to restore your account if you forget the password.\n                            </p>\n\n                            <a\n                              className='buttonLink'\n                              type=\"button\"\n                              href={`data:text/json;charset=utf-8,${encodeURIComponent(\n                                JSON.stringify(selectedAccount)\n                              )}`}\n                              download={`${selectedAccount.id}.json`}\n                            >\n                                <Button small full onClick={onBackupDownloaded}>Export as JSON</Button>\n                            </a>\n                        </div>\n                    </div>\n\n                    <div className='panel-sub'>\n                        <div className='backupIcon'>\n                            <BsFileEarmarkTextFill />\n                        </div>\n                        <div className='backup-info'>\n                            <p>\n                                Backup your account ({selectedAccount.id.slice(0, 5)}...{selectedAccount.id.slice(-3)}) on paper as a seed phrase.\n                                The seed phrase will be unencrypted, so store it safely.\n                            </p>\n                            {\n                                renderPaperExportButton(selectedAccount)\n                            }\n                        </div>\n                    </div>\n\n                </div>\n            </div>\n            <div className=\"panel\" id=\"import\">\n                <div className=\"panel-title\">Import an account from backup</div>\n                <div className='backup-note'>\n                    <b>Note:</b> Only backups previously saved with Ambire Wallet are compatible.\n                </div>\n                <div className='panel-sub'>\n                    <div className='backupIcon'>\n                        <BsFileEarmarkArrowUpFill />\n                    </div>\n                    <div className='backup-info'>\n                        <p>\n                            Import an Ambire account from a backed up JSON file.<br />\n                            You can also drag and drop an account backup JSON file on this page\n                        </p>\n                        <Button small full onClick={onOpen}>Import from JSON</Button>\n                    </div>\n                </div>\n\n                <div className='panel-sub'>\n                    <div className='backupIcon'>\n                        <BsFileMedicalFill />\n                    </div>\n                    <div className='backup-info'>\n                        <p>\n                            Update your Ambire account ({selectedAccount.id.slice(0, 5)}...{selectedAccount.id.slice(-3)}) with signer keys from a backed up seed phrase\n                        </p>\n                        {\n                            renderPaperImportButton(selectedAccount)\n                        }\n                    </div>\n                </div>\n\n            </div>\n        </div>\n    )\n}\n\nexport default Backup\n","import './Security.scss'\n\nimport { MdOutlineRemove } from 'react-icons/md'\nimport { RiDragDropLine } from 'react-icons/ri'\nimport { useState, useEffect, useCallback } from 'react'\nimport { Loading, TextInput, Button } from 'components/common'\nimport { Interface, AbiCoder, keccak256 } from 'ethers/lib/utils'\nimport accountPresets from 'ambire-common/src/constants/accountPresets'\nimport privilegesOptions from 'ambire-common/src/constants/privilegesOptions'\nimport { useRelayerData, useModals } from 'hooks'\nimport ResetPasswordModal from 'components/Modals/ResetPasswordModal/ResetPasswordModal'\nimport AddAuthSigner from './AddAuthSigner/AddAuthSigner'\nimport { useToasts } from 'hooks/toasts'\nimport { useHistory } from 'react-router-dom'\nimport { useDropzone } from 'react-dropzone'\nimport { MdInfoOutline } from 'react-icons/md'\nimport { validateImportedAccountProps, fileSizeValidator } from 'lib/validations/importedAccountValidations'\nimport OtpTwoFAModal from 'components/Modals/OtpTwoFAModal/OtpTwoFAModal'\nimport OtpTwoFADisableModal from 'components/Modals/OtpTwoFADisableModal/OtpTwoFADisableModal'\nimport Backup from './Backup/Backup'\nimport PendingRecoveryNotice from './PendingRecoveryNotice/PendingRecoveryNotice'\nimport { getName } from 'lib/humanReadableTransactions'\nimport useConstants from 'hooks/useConstants'\n\nconst IDENTITY_INTERFACE = new Interface(\n  require('adex-protocol-eth/abi/Identity5.2')\n)\n\nconst REFRESH_INTVL = 40000\n\nconst Security = ({\n  relayerURL,\n  selectedAcc,\n  selectedNetwork,\n  accounts,\n  addRequest,\n  showSendTxns,\n  onAddAccount\n}) => {\n  const { constants: { humanizerInfo } } = useConstants()\n  const { showModal } = useModals()\n  const [ cacheBreak, setCacheBreak ] = useState(() => Date.now())\n  \n  useEffect(() => {\n    if (Date.now() - cacheBreak > 30000) setCacheBreak(Date.now())\n    const intvl = setTimeout(() => setCacheBreak(Date.now()), REFRESH_INTVL)\n    return () => clearTimeout(intvl)\n  }, [cacheBreak])\n\n  const url = relayerURL\n    ? `${relayerURL}/identity/${selectedAcc}/${selectedNetwork.id}/privileges?cacheBreak=${cacheBreak}`\n    : null\n  const { data, errMsg, isLoading } = useRelayerData({ url })\n  const privileges = data ? data.privileges : {}\n  const otpEnabled = data ? data.otpEnabled : null\n  const recoveryLock = data && data.recoveryLock\n  const { addToast } = useToasts()\n  const history = useHistory()\n  const selectedAccount = accounts.find(x => x.id === selectedAcc)\n\n  const craftTransaction = (address, privLevel) => {\n    return {\n      to: selectedAcc,\n      data: IDENTITY_INTERFACE.encodeFunctionData('setAddrPrivilege', [\n        address,\n        privLevel,\n      ]),\n      value: '0x00',\n    }\n  }\n\n  const addTransactionToAddRequest = txn => {\n    try {\n      addRequest({\n        id: `setPriv_${txn.data}`,\n        type: 'eth_sendTransaction',\n        txn: txn,\n        chainId: selectedNetwork.chainId,\n        account: selectedAcc,\n      })\n    } catch (err) {\n      console.error(err)\n      addToast(`Error: ${err.message || err}`, { error: true })\n    }\n  }\n\n  const onRemoveBtnClicked = key => {\n    const txn = craftTransaction(key, privilegesOptions.false)\n    addTransactionToAddRequest(txn)\n  }\n\n  const onAddBtnClickedHandler = newSignerAddress => {\n    const txn = craftTransaction(\n      newSignerAddress.address,\n      privilegesOptions.true\n    )\n    addTransactionToAddRequest(txn)\n  }\n\n  const onMakeDefaultBtnClicked = async (account, address, isQuickAccount) => {\n    if (isQuickAccount) {\n      return addToast((<span>To make this signer default, please <a href='#/email-login'>please login with the email</a></span>), {url: '/#/email-login', error: true})\n    } else {\n      onAddAccount({ ...account, signer: { address: address }, signerExtra: null })\n      addToast(\n        'This signer is now the default. If it is a hardware wallet, you will have to re-add the account manually to connect it directly, otherwise you will have to add this signer address to your web3 wallet.',\n        { timeout: 30000 }\n      )\n    }\n\n    history.push('/wallet/security')\n  }\n\n  const showResetPasswordModal = () => {\n    if (!relayerURL) {\n      addToast('Unsupported without a connection to the relayer', { error: true })\n      return\n    }\n    showModal(<ResetPasswordModal\n      account={selectedAccount}\n      selectedNetwork={selectedNetwork}\n      relayerURL={relayerURL}\n      onAddAccount={onAddAccount}\n      showSendTxns={showSendTxns}\n    />)\n  }\n\n  const handleEnableOtp = () => {\n    if (!relayerURL) {\n      return addToast('Unsupported without a connection to the relayer', { error: true })\n    }\n\n    showModal(<OtpTwoFAModal \n      relayerURL={relayerURL} \n      selectedAcc={selectedAccount} \n      setCacheBreak={() => { setCacheBreak(Date.now()) }} \n      />)\n  }\n\n  const handleDisableOtp = async() => {\n    if (!relayerURL) {\n      return addToast('Unsupported without a connection to the relayer', { error: true })\n    }\n    \n    showModal(<OtpTwoFADisableModal \n      relayerURL={relayerURL} \n      selectedAcc={selectedAccount} \n      setCacheBreak={() => { setCacheBreak(Date.now()) }} \n      />)\n  }\n  \n  // JSON import\n  const onDrop = useCallback((acceptedFiles, rejectedFiles) => {\n    const reader = new FileReader()\n    \n    if (rejectedFiles.length) {\n      addToast(`${rejectedFiles[0].file.path} - ${(rejectedFiles[0].file.size / 1024).toFixed(2)} KB. ${rejectedFiles[0].errors[0].message}`, { error: true })\n    }\n\n    if (acceptedFiles.length){\n      const file = acceptedFiles[0]\n\n      reader.readAsText(file,'UTF-8')\n      reader.onload = readerEvent => {\n        const content = readerEvent.target.result\n        const fileContent = JSON.parse(content)\n        const validatedFile = validateImportedAccountProps(fileContent)\n        \n        if (validatedFile.success) onAddAccount(fileContent, { select: true })\n        else addToast(validatedFile.message, { error: true})\n      }\n    }\n  }, [addToast, onAddAccount])\n  const { getRootProps, getInputProps, open, isDragActive, isDragAccept, isDragReject } = useDropzone({\n    onDrop,\n    noClick: true,\n    noKeyboard: true,\n    accept: 'application/json',\n    maxFiles: 1,\n    validator: fileSizeValidator\n  })\n\n  // @TODO relayerless mode: it's not that hard to implement in a primitive form, we need everything as-is\n  // but rendering the initial privileges instead; or maybe using the relayerless transactions hook/service\n  // and aggregate from that\n  const accHash = signer => {\n      const abiCoder = new AbiCoder()\n      const { timelock, one, two } = signer\n      return keccak256(abiCoder.encode(['tuple(uint, address, address)'], [[timelock, one, two]]))\n  }\n  const hasPendingReset = privileges[selectedAccount.signer.quickAccManager] && (\n    (recoveryLock && recoveryLock.status && !isLoading)\n      || (\n          privileges && selectedAccount.signer.quickAccManager\n          // is or has been in recovery state\n          && selectedAccount.signer.preRecovery\n          // but that's not finalized yet\n          && accHash(selectedAccount.signer) !== privileges[selectedAccount.signer.quickAccManager]\n      )\n    )\n\n  const privList = Object.entries(privileges)\n    .map(([addr, privValue]) => {\n      if (!privValue) return null\n  \n      const addressName = getName(humanizerInfo, addr) || null\n      const isQuickAcc = addr === accountPresets.quickAccManager\n      const privText = isQuickAcc\n        ? `Email/password signer (${selectedAccount.email || 'unknown email'})`\n        : `${addr} ${addressName && addressName !== addr ? `(${addressName})` : ''}`\n      const signerAddress = isQuickAcc\n        ? selectedAccount.signer.quickAccManager\n        : selectedAccount.signer.address\n      const isSelected = signerAddress === addr\n      const canChangePassword = isQuickAcc && !hasPendingReset\n\n      return (\n        <li key={addr}>\n          <TextInput className=\"depositAddress\" value={privText} disabled />\n          <div className=\"btns-wrapper\">\n            {isQuickAcc && (otpEnabled !== null) && (otpEnabled ? \n              (<Button red onClick={handleDisableOtp} small>Disable 2FA</Button>) : \n              (<Button onClick={handleEnableOtp} small>Enable 2FA</Button>)\n            )}\n            {isQuickAcc && (<Button\n              disabled={!canChangePassword}\n              title={hasPendingReset ? 'Account recovery already in progress' : ''}\n              onClick={showResetPasswordModal} small>Change password</Button>\n            )}\n            <Button\n              disabled={isSelected}\n              title={isSelected ? 'Signer is already default' : ''}\n              onClick={() =>\n                onMakeDefaultBtnClicked(selectedAccount, addr, isQuickAcc)\n              }\n              small\n            >\n              Make default\n            </Button>\n            <Button\n              onClick={() => onRemoveBtnClicked(addr)}\n              small\n              red\n              icon={<MdOutlineRemove/>}\n              title={\n                isSelected ? 'Cannot remove the currently used signer' : ''\n              }\n              disabled={isSelected}\n            >\n              Remove\n            </Button>\n          </div>\n        </li>\n      )\n    })\n    .filter(x => x)\n\n  const showLoading = isLoading && !data\n  const signersFragment = relayerURL ? (<>\n    <div className=\"panel\" id=\"signers\">\n      {hasPendingReset && !showLoading && (<PendingRecoveryNotice\n        recoveryLock={recoveryLock}\n        showSendTxns={showSendTxns}\n        selectedAccount={selectedAccount}\n        selectedNetwork={selectedNetwork}\n      />)}\n      <div className='network-warning'>\n        <MdInfoOutline size={36}></MdInfoOutline>\n        <div>\n          Please note: signer settings are network-specific. You are currently looking at and modifying the signers on {selectedNetwork.name}.\n          &nbsp;<a href='https://help.ambire.com/hc/en-us/articles/4410885684242-Signers' target='_blank' rel='noreferrer'>Need help? Click here.</a>\n        </div>\n      </div>\n      <div className=\"panel-title\">Authorized signers</div>\n      {errMsg && (\n        <h3 className=\"error\">Error getting authorized signers: {errMsg}</h3>\n      )}\n      {showLoading && <Loading />}\n      <ul className=\"content\">{!showLoading && privList}</ul>\n    </div>\n    <div className=\"panel\">\n      <div className=\"panel-title\">Add new signer</div>\n      <AddAuthSigner\n        onAddBtnClicked={onAddBtnClickedHandler}\n        selectedNetwork={selectedNetwork}\n        selectedAcc={selectedAccount}\n      />\n    </div>\n  </>) : (\n    <div className=\"panel\">\n      <div className=\"panel-title\">Authorized signers</div>\n      <h3 className=\"error\">\n        Unsupported: not connected to a relayer.\n      </h3>\n    </div>\n  )\n  return (\n    <section id=\"security\" className={(isDragActive ? 'activeStyle ' : '') + (isDragAccept ? 'acceptStyle ' : '') + (isDragReject ? 'rejectStyle ' : '')} {...getRootProps()}>\n      {\n        (isDragAccept || isDragReject)\n        && (<div className={isDragAccept ? 'acceptStyleIcon' : 'rejectStyleIcon'}><RiDragDropLine size={100}/></div>)\n      }\n      \n      <input {...getInputProps()} />\n      {signersFragment}\n\n      <Backup \n        selectedAccount={selectedAccount}\n        onOpen={open}\n        onAddAccount={onAddAccount}\n      />\n    </section>\n  )\n}\n\nexport default Security\n","import TransportWebHID from '@ledgerhq/hw-transport-webhid'\nimport AppEth from '@ledgerhq/hw-app-eth'\nimport { serialize } from '@ethersproject/transactions'\n\nconst EIP_155_CONSTANT = 35\n\nconst ethUtil = require('ethereumjs-util')\nconst HDNode = require('hdkey')\n\nlet connectedDevices = null\n\nexport const PARENT_HD_PATH = \"44'/60'/0'/0\"\n\nasync function getTransport() {\n  connectedDevices = await TransportWebHID.list()\n  if (connectedDevices.length) {\n    if (connectedDevices[0].opened) {\n      return new TransportWebHID(connectedDevices[0])\n    } else { // when transport is still not closed and time between 2 requests is short\n      return TransportWebHID.open(connectedDevices[0])\n    }\n  } else {\n    try {\n      return await TransportWebHID.request()\n    } catch (e) {\n      if (e.message.includes('reading \\'open\\'')) {\n        throw new Error('ledger WebHID request denied')\n      }\n      throw new Error('Could not request WebHID ledger: ' + e.message)\n    }\n  }\n}\n\nexport async function ledgerGetAddresses() {\n  const transport = await getTransport()\n  const accounts = await getAccounts(transport)\n  transport.close()\n\n  return accounts.map(a => a.address)\n}\n\nasync function getAccounts(transport) {\n  const parentKeyDerivationPath = `m/${PARENT_HD_PATH}`\n  let ledgerResponse\n  ledgerResponse = await getAddressInternal(transport, parentKeyDerivationPath).then(o => o).catch(err => {\n    if (err.statusCode === 25871 || err.statusCode === 27404) {\n      throw Error('Please make sure your ledger is unlocked and running the Ethereum app. ' + err.message)\n    } else {\n      throw Error('Could not get address from ledger : ' + err)\n    }\n  })\n\n  const hdKey = new HDNode()\n  hdKey.publicKey = Buffer.from(ledgerResponse.publicKey, 'hex')\n  hdKey.chainCode = Buffer.from(ledgerResponse.chainCode, 'hex')\n  const mainAddress = addressOfHDKey(hdKey)\n\n  const initialDerivedKeyInfo = {\n    hdKey,\n    address: mainAddress,\n    derivationPath: parentKeyDerivationPath,\n    baseDerivationPath: PARENT_HD_PATH,\n  }\n\n  // currently we can't get addrs to match with what appears in MM/Ledger live so only one is derived\n  return calculateDerivedHDKeyInfos(initialDerivedKeyInfo, 1)\n}\n\n\nasync function getAddressInternal(transport, parentKeyDerivationPath) {\n  let timeoutHandle\n  const appEth = new AppEth(transport)\n\n  const ledgerTimeout = new Promise((resolve, reject) => {\n    timeoutHandle = setTimeout(() => {\n      return reject(new Error('Device took too long to respond...'))\n    }, 10000)\n  })\n\n  return Promise.race([\n    appEth.getAddress(parentKeyDerivationPath, false, true),\n    ledgerTimeout\n  ]).then((res) => {\n    clearTimeout(timeoutHandle)\n    return res\n  })\n}\n\nexport async function ledgerSignTransaction(txn, chainId) {\n  const transport = await getTransport()\n\n  const fromAddr = txn.from\n\n  const unsignedTxObj = {\n    ...txn,\n    gasLimit: txn.gasLimit || txn.gas,\n    chainId: chainId\n  }\n  delete unsignedTxObj.from\n  delete unsignedTxObj.gas\n\n  let serializedUnsigned = serialize(unsignedTxObj)\n  const accountsData = await getAccounts(transport)\n\n  //Managing only 1 addr for now\n  const address = accountsData[0].address\n\n  let serializedSigned\n  if (address.toLowerCase() === fromAddr.toLowerCase()) {\n    let rsvResponse\n    try {\n      rsvResponse = await new AppEth(transport).signTransaction(accountsData[0].derivationPath, serializedUnsigned.substr(2))\n    } catch (e) {\n      throw new Error('Could not sign transaction ' + e)\n    }\n\n    const intV = parseInt(rsvResponse.v, 16)\n    const signedChainId = Math.floor((intV - EIP_155_CONSTANT) / 2)\n\n    if (signedChainId !== chainId) {\n      throw new Error('Invalid returned V 0x' + rsvResponse.v)\n    }\n\n    delete unsignedTxObj.v\n    serializedSigned = serialize(unsignedTxObj, {\n      r: '0x' + rsvResponse.r,\n      s: '0x' + rsvResponse.s,\n      v: intV\n    })\n  } else {\n    throw new Error('Incorrect address. Are you using the correct account/ledger?')\n  }\n\n  transport.close()\n\n  return serializedSigned\n}\n\nexport async function ledgerSignMessage(hash, signerAddress) {\n  const transport = await getTransport()\n\n  const accountsData = await getAccounts(transport)\n\n  //TODO for multiple accs?\n  const account = accountsData[0]\n\n  let signedMsg\n  if (account.address.toLowerCase() === signerAddress.toLowerCase()) {\n    try {\n      const rsvReply = await new AppEth(transport).signPersonalMessage(account.derivationPath, hash.substr(2))\n      signedMsg = '0x' + rsvReply.r + rsvReply.s + rsvReply.v.toString(16)\n    } catch (e) {\n      throw new Error('Signature denied ' + e.message)\n    }\n  } else {\n    throw new Error('Incorrect address. Are you using the correct account/ledger?')\n  }\n  transport.close()\n  return signedMsg\n}\n\nexport async function ledgerSignMessage712(domainSeparator, hashStructMessage, signerAddress) {\n  const transport = await getTransport()\n\n  const accountsData = await getAccounts(transport)\n\n  //TODO for multiple accs?\n  const account = accountsData[0]\n\n  let signedMsg\n  if (account.address.toLowerCase() === signerAddress.toLowerCase()) {\n    try {\n      const rsvReply = await new AppEth(transport).signEIP712HashedMessage(account.derivationPath, domainSeparator, hashStructMessage)\n      signedMsg = '0x' + rsvReply.r + rsvReply.s + rsvReply.v.toString(16)\n    } catch (e) {\n      throw new Error('Signature denied ' + e.message)\n    }\n  } else {\n    throw new Error('Incorrect address. Are you using the correct account/ledger?')\n  }\n  transport.close()\n  return signedMsg\n}\n\nfunction calculateDerivedHDKeyInfos(initialDerivedKeyInfo, count) {\n  const derivedKeys = []\n  for (let i = 0; i < count; i++) {\n\n    const fullDerivationPath = `m/${initialDerivedKeyInfo.baseDerivationPath}/${i}`\n    const path = `m/${i}`\n    const hdKey = initialDerivedKeyInfo.hdKey.derive(path)\n    const address = addressOfHDKey(hdKey)\n    const derivedKey = {\n      address,\n      hdKey,\n      baseDerivationPath: initialDerivedKeyInfo.baseDerivationPath,\n      derivationPath: fullDerivationPath,\n    }\n\n    derivedKeys.push(derivedKey)\n  }\n  return derivedKeys\n}\n\nexport function addressOfHDKey(hdKey) {\n  const shouldSanitizePublicKey = true\n  const derivedPublicKey = hdKey.publicKey\n  const ethereumAddressUnprefixed = ethUtil\n    .publicToAddress(derivedPublicKey, shouldSanitizePublicKey)\n    .toString('hex')\n  return ethUtil.addHexPrefix(ethereumAddressUnprefixed).toLowerCase()\n}\n","import { parseUnits } from 'ethers/lib/utils'\nimport { isValidAddress, isKnownTokenOrContract } from 'ambire-common/src/services/address'\nimport accountPresets from 'ambire-common/src/constants/accountPresets'\n\nconst validateAddress = address => {\n    if (!(address && address.length)) {\n        return {\n            success: false,\n            message: ''\n        }\n    }\n\n    if (!(address && isValidAddress(address))) {\n        return {\n            success: false,\n            message: 'Invalid address.'\n        }\n    }\n\n    return { success: true }\n}\n\nconst validateAddAuthSignerAddress = (address, selectedAcc) => {\n    const isValidAddr = validateAddress(address)\n    if (!isValidAddr.success) return isValidAddr\n\n    if (address && selectedAcc && (address === selectedAcc)) {\n        return {\n            success: false,\n            message: 'The entered address should be different than the your own account address.'\n        }\n    }\n    \n    return { success: true }\n}\n\nconst validateSendTransferAddress = (address, selectedAcc, addressConfirmed, isKnownAddress, isUDAddress, isEnsAddress) => {\n    const isValidAddr = validateAddress(address)\n    if (!isValidAddr.success) return isValidAddr\n\n    if (address && address === accountPresets.feeCollector) {\n        return {\n            success: true\n        }\n    }\n\n    if (address && selectedAcc && (address === selectedAcc)) {\n        return {\n            success: false,\n            message: 'The entered address should be different than the your own account address.'\n        }\n    }\n    \n    if (address && isKnownTokenOrContract(address)) {\n        return {\n            success: false,\n            message: 'You are trying to send tokens to a smart contract. Doing so would burn them.'\n        }\n    }\n\n    if (address && (!isKnownAddress(address) && !addressConfirmed && !isUDAddress && !isEnsAddress)) { \n        return {\n            success: false,\n            message: `You're trying to send to an unknown address. If you're really sure, confirm using the checkbox below.`\n        }\n    }\n\n    if (address && (!isKnownAddress(address) && !addressConfirmed && (isUDAddress || isEnsAddress))) { \n        const name = isUDAddress ? 'Unstoppable domain' : 'Ethereum Name Service'\n        return {\n            success: false,\n            message: `You're trying to send to an ${name}. If you really trust to the person who gave you, confirm using the checkbox below.`\n        }\n    }\n\n    return { success: true }\n}\n\nconst validateSendTransferAmount = (amount, selectedAsset) => {\n    if (!(amount && amount.length)) {\n        return {\n            success: false,\n            message: ''\n        }\n    }\n    \n    if (!(amount && (amount > 0))) {\n        return {\n            success: false,\n            message: 'The amount must be greater than 0.'\n        }\n    }\n\n    try {\n        if (amount && selectedAsset && selectedAsset.decimals) {\n            const parsedAmount = amount.slice(0, amount.indexOf('.') + selectedAsset.decimals + 1); // Fixed decimals in case amount is bigger than selectedAsset.decimals, otherwise would cause overflow error\n            const bigNumberAmount = parseUnits(parsedAmount, selectedAsset.decimals)\n            if (bigNumberAmount && selectedAsset.balanceRaw && bigNumberAmount.gt(selectedAsset.balanceRaw)) {\n                return {\n                    success: false,\n                    message: `The amount is greater than the asset's balance: ${selectedAsset?.balance} ${selectedAsset?.symbol}.`\n                }\n            }\n        }\n    } catch(e) {\n        console.error(e);\n    }\n\n    return { success: true }\n}\n\nconst validateSendNftAddress = (address, selectedAcc, addressConfirmed, isKnownAddress, metadata, selectedNetwork, network, isUDAddress, isEnsAddress) => {\n    const isValidAddr = validateSendTransferAddress(address, selectedAcc, addressConfirmed, isKnownAddress, isUDAddress, isEnsAddress)\n    if (!isValidAddr.success) return isValidAddr\n\n    if (metadata && selectedAcc && (metadata.owner?.address.toLowerCase() !== selectedAcc.toLowerCase())) {\n        return {\n            success: false,\n            message: `The NFT you're trying to send is not owned by you!`\n        }\n    }\n\n    if (selectedNetwork && network && (selectedNetwork.id !== network)) {\n        return {\n            success: false,\n            message: 'The selected network is not the correct one.'\n        }\n    }\n\n    return { success: true }\n}\n\nexport {\n    validateAddAuthSignerAddress,\n    validateSendNftAddress,\n    validateSendTransferAddress,\n    validateSendTransferAmount\n}\n","import { AiFillWarning } from \"react-icons/ai\"\nimport { FaCheck } from \"react-icons/fa\"\nimport buildRecoveryBundle from 'lib/recoveryBundle'\n\nconst PendingRecoveryNotice = ({ recoveryLock, showSendTxns, selectedAccount, selectedNetwork }) => {\n    const isAlreadyInitiated = recoveryLock && recoveryLock.status !== 'requestedButNotInitiated'\n    const createRecoveryRequest = async () => {\n        if (isAlreadyInitiated) return\n        const bundle = buildRecoveryBundle(\n            selectedAccount.id,\n            selectedNetwork.id,\n            selectedAccount.signer.preRecovery,\n            { signer: selectedAccount.signer, primaryKeyBackup: selectedAccount.primaryKeyBackup }\n        )\n        showSendTxns(bundle, true)\n    }\n    const recoveryLockStatus = recoveryLock ? recoveryLock.status : 'requestedButNotInitiated'\n    const remainingTime = seconds => {\n        if (seconds > 86400) return `${Math.ceil(seconds / 86400)} days`\n        else return `${Math.ceil(seconds/1440)} hours`\n    }\n    const styleClass = isAlreadyInitiated\n        ? (recoveryLockStatus === 'ready' ? 'success' : 'warning')\n        : 'warning action'\n\n    return (\n        <div className={`notification-banner notification-hollow ${styleClass}`} onClick={() => createRecoveryRequest()}>\n            {\n              recoveryLockStatus === 'ready'\n                ? <FaCheck />\n                : <AiFillWarning />\n            }\n\n            {\n                recoveryLockStatus === 'requestedButNotInitiated' ?\n                    <>Password reset requested but not initiated for {selectedNetwork.name}. Click here to initiate it.</> :\n                recoveryLockStatus === 'initiationTxnPending' ?\n                    <>Initiation transaction is currently pending. Once mined, you will need to wait {remainingTime(recoveryLock.timelock)} for the reset to be done on {selectedNetwork.name}.</> :\n                recoveryLockStatus === 'waitingTimelock' ?\n                    <>Password reset on {selectedNetwork.name} is currently pending. {remainingTime(recoveryLock.remaining)} remaining.</> :\n                recoveryLockStatus === 'ready' ?\n                    <>Password reset on {selectedNetwork.name} is now complete! You can start signing transactions with your new password!</> :\n                recoveryLockStatus === 'failed' ?\n                    <>Something went wrong while resetting your password. Please contact support at help.ambire.com</> : null\n            }\n        </div>\n    )\n}\n\nexport default PendingRecoveryNotice\n"],"sourceRoot":""}