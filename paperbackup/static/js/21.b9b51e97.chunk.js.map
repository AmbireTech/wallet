{"version":3,"sources":["components/Wallet/Transfer/Addresses/Addresses.js","components/Wallet/Transfer/Transfer.js","../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","lib/validations/formValidations.js","../node_modules/ambire-common/src/helpers/sendTxnHelpers/sendTxnHelpers.ts","../node_modules/ambire-common/src/services/isFeeCollectorTxn/isFeeCollectorTxn.ts","../node_modules/ambire-common/src/hooks/useGasTankData/index.ts","../node_modules/ambire-common/src/hooks/useGasTankData/useGasTankData.ts"],"names":["Addresses","addresses","addAddress","removeAddress","onSelectAddress","selectedNetwork","showModal","useModals","modalInputs","inputType","label","placeholder","validate","value","isValidAddress","addAddressModal","AddAddressModal","title","inputs","onClose","name","address","type","id","className","AddressList","noAccounts","icon","onClick","ERC20","Interface","require","unsupportedSWPlatforms","withRouter","history","portfolio","selectedAcc","addRequest","addressBook","relayerURL","isKnownAddress","feeAssetsRes","useGasTankData","network","useRelayerData","feeAssetsPerNetwork","length","filter","item","disableGasTankDeposit","tokenAddressOrSymbol","useParams","addToast","useToasts","state","useLocation","useState","gasTankDetails","tokenAddress","tokens","find","symbol","asset","setAsset","amount","setAmount","bigNumberHexAmount","setBigNumberHexAmount","accountPresets","feeCollector","setAddress","uDAddress","setUDAddress","ensAddress","setEnsAddress","disabled","setDisabled","addressConfirmed","setAddressConfirmed","sWAddressConfirmed","setSWAddressConfirmed","newAddress","setNewAddress","success","messages","validationFormMgs","setValidationFormMgs","feeBaseTokenWarning","setFeeBaseTokenWarning","timer","useRef","assetsItems","isTopUp","some","i","toLowerCase","map","img","tokenImageUrl","fallbackIcon","getTokenIcon","selectedAsset","useMemo","maxAmount","maxAmountFormatted","balanceRaw","decimals","balance","ethers","utils","formatUnits","formatFloatTokenAmount","showSWAddressWarning","Number","networks","includes","onAmountChange","bigNumberAmount","parseUnits","toHexString","useEffect","gasFeeToken","ft","baseToken","feeBaseToken","toUpperCase","replace","pathname","isValidSendTransferAmount","validateSendTransferAmount","startsWith","indexOf","isValidRecipientAddress","validateSendTransferAddress","message","current","clearTimeout","validateForm","a","resolveUDomain","unstoppableDomainsChain","UDAddress","bip44Item","getBip44Items","resolveENSDomain","ensAddr","isUDAddress","selectedAddress","isEnsAddress","setTimeout","catch","console","error","amountLabel","style","justifyContent","isCurrNetworkBalanceLoading","searchable","defaultValue","items","sort","b","onChange","precision","onInput","button","onButtonClick","size","gasTankMsg","info","x","onAddNewAddress","join","href","target","rel","checked","recipientAddress","txn","to","data","encodeFunctionData","req","Date","now","chainId","account","meta","addressLabel","e","_objectWithoutProperties","source","excluded","key","Object","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call","validateAddress","validateAddAuthSignerAddress","isValidAddr","isKnownTokenOrContract","parsedAmount","slice","gt","validateSendNftAddress","metadata","owner","getAddedGas","token","ERC20AbiInterface","ERC20ABI","TRANSFER_SIGHASH","getSighash","getFunction","format","isFeeCollectorTxn","res","decodeFunctionData","BigNumber","from","_value","getTxnTransferInfo","_to","cacheBreak","useCacheBreak","urlGetBalance","urlGetFeeAssets","urlGetTransactions","url","balancesRes","isLoading","executedTxnsRes","gasTankBalances","balanceInUSD","reduce","gasTankTxns","txns","gasTankFee","executedTxns","gasTankFilledTxns","transactions","depositTxns","forEach","txId","submittedAt","identity","rest","filteredTxns","txnCall","fillTxn","push","getGasTankFilledTxns","availableFeeAssets","isFound","balanceUSD","parseFloat","price","totalSavedResult","feeTokenDetails","feeToken","savedGas","saved","feeInUSDPerGas","cashback","toString"],"mappings":"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","file":"static/js/21.b9b51e97.chunk.js","sourcesContent":["import './Addresses.scss'\n\nimport { MdOutlineAdd } from 'react-icons/md'\nimport AddressList from 'components/common/AddressBook/AddressList/AddressList'\nimport { Button } from 'components/common'\nimport { isValidAddress } from 'ambire-common/src/services/address'\nimport AddAddressModal from 'components/Modals/AddAddressModal/AddAddressModal'\nimport { useModals } from 'hooks'\n\nconst Addresses = ({ addresses, addAddress, removeAddress, onSelectAddress, selectedNetwork }) => {\n    const { showModal } = useModals()\n\n    const modalInputs = [\n        { inputType: 'name', label: 'Name', placeholder: 'Address title' },\n        { inputType: 'address', label: 'Address / Unstoppable domainsⓇ / ENSⓇ', placeholder: 'Address / Unstoppable Domains / ENS', validate: value => isValidAddress(value) } \n    ]\n\n    const addAddressModal = <AddAddressModal \n            title=\"Add New Address\" \n            selectedNetwork={selectedNetwork} \n            inputs={modalInputs} \n            onClose={([name, address, type]) => addAddress(name, address, type)}\n        ></AddAddressModal>\n    const showInputModal = () => showModal(addAddressModal)\n\n    return (\n        <div id=\"addresses\" className='panel'>\n            <div className='title'>Address Book</div>\n            <div className=\"content\">\n                <AddressList\n                    noAccounts={true}\n                    addresses={addresses}\n                    removeAddress={removeAddress}\n                    onSelectAddress={onSelectAddress}\n                />\n            </div>\n            <div className=\"separator\"></div>\n            <Button icon={<MdOutlineAdd/>} onClick={showInputModal}>Add Address</Button>\n        </div>\n    )\n}\n\nexport default Addresses","import './Transfer.scss'\n\nimport { BsXLg } from 'react-icons/bs'\nimport { AiOutlineSend } from 'react-icons/ai'\nimport { MdWarning } from 'react-icons/md'\nimport { useParams, withRouter } from 'react-router'\nimport { useEffect, useMemo, useState, useRef } from 'react'\nimport { ethers } from 'ethers'\nimport { Interface } from 'ethers/lib/utils'\nimport { useToasts } from 'hooks/toasts'\nimport { TextInput, NumberInput, Button, Select, Loading, AddressBook, AddressWarning, NoFundsPlaceholder, Checkbox, ToolTip } from 'components/common'\nimport { validateSendTransferAddress, validateSendTransferAmount } from 'lib/validations/formValidations'\nimport { resolveUDomain } from 'lib/unstoppableDomains'\nimport { isValidAddress } from 'ambire-common/src/services/address'\nimport Addresses from './Addresses/Addresses'\nimport { MdInfo } from 'react-icons/md'\nimport networks from 'consts/networks'\nimport { getTokenIcon } from 'lib/icons'\nimport { formatFloatTokenAmount } from 'lib/formatters'\nimport { useLocation } from 'react-router-dom'\nimport accountPresets from 'ambire-common/src/constants/accountPresets'\nimport { resolveENSDomain, getBip44Items } from 'lib/ensDomains'\nimport useGasTankData from 'ambire-common/src/hooks/useGasTankData'\nimport { useRelayerData } from 'hooks'\n\nconst ERC20 = new Interface(require('adex-protocol-eth/abi/ERC20'))\nconst unsupportedSWPlatforms = ['Binance', 'Huobi', 'KuCoin', 'Gate.io', 'FTX']\n\nconst Transfer = ({ history, portfolio, selectedAcc, selectedNetwork, addRequest, addressBook, relayerURL }) => {\n    const { addresses, addAddress, removeAddress, isKnownAddress } = addressBook\n    const {\n        feeAssetsRes\n      } = useGasTankData({\n        relayerURL,\n        selectedAcc,\n        network: selectedNetwork,\n        portfolio,\n        useRelayerData\n      })\n    const feeAssetsPerNetwork = feeAssetsRes && feeAssetsRes.length && feeAssetsRes.filter(item => (item.network === selectedNetwork.id) && !item.disableGasTankDeposit)\n    const { tokenAddressOrSymbol } = useParams()\n    const { addToast } = useToasts()\n    const { state } = useLocation()\n    const [gasTankDetails] = useState(state ? state : null)\n    const tokenAddress = isValidAddress(tokenAddressOrSymbol) ? tokenAddressOrSymbol : portfolio.tokens.find(({ symbol }) => symbol === tokenAddressOrSymbol)?.address || null\n\n    const [asset, setAsset] = useState(tokenAddress)\n    const [amount, setAmount] = useState(0)\n    const [bigNumberHexAmount, setBigNumberHexAmount] = useState('')\n    const [address, setAddress] = useState(gasTankDetails ? accountPresets.feeCollector : '')\n    const [uDAddress, setUDAddress] = useState('')\n    const [ensAddress, setEnsAddress] = useState('')\n    const [disabled, setDisabled] = useState(true)\n    const [addressConfirmed, setAddressConfirmed] = useState(false)\n    const [sWAddressConfirmed, setSWAddressConfirmed] = useState(false)\n    const [newAddress, setNewAddress] = useState('')\n    const [validationFormMgs, setValidationFormMgs] = useState({\n        success: {\n            amount: false,\n            address: false\n        },\n        messages: {\n            amount: '',\n            address: ''\n        }\n    })\n    const [feeBaseTokenWarning, setFeeBaseTokenWarning] = useState('')\n    const timer = useRef(null)\n    let eligibleFeeTokens = null\n    if (gasTankDetails?.isTopUp) {\n        eligibleFeeTokens = portfolio.tokens.filter(item => feeAssetsPerNetwork && feeAssetsPerNetwork?.some(i => i.address.toLowerCase() === item.address.toLowerCase()))\n    } else eligibleFeeTokens = portfolio.tokens\n    \n    const assetsItems = eligibleFeeTokens.map(({ label, symbol, address, img, tokenImageUrl, network }) => ({\n        label: label || symbol,\n        value: address,\n        icon: img || tokenImageUrl,\n        fallbackIcon: getTokenIcon(network, address)\n    }))\n\n    const selectedAsset = portfolio.tokens.find(({ address }) => address === asset)\n\n    const { maxAmount, maxAmountFormatted } = useMemo(() => {\n        if (!selectedAsset) return { maxAmount: '0', maxAmountFormatted: '0.00' };\n        const { balanceRaw, decimals, balance } = selectedAsset\n        return {\n            maxAmount: ethers.utils.formatUnits(balanceRaw, decimals),\n            maxAmountFormatted: formatFloatTokenAmount(balance, true, decimals)\n        }\n    }, [selectedAsset])\n\n    const showSWAddressWarning = useMemo(() =>\n        !gasTankDetails && Number(tokenAddress) === 0 && networks.map(({ id }) => id).filter(id => id !== 'ethereum').includes(selectedNetwork.id)\n        , [gasTankDetails, tokenAddress, selectedNetwork.id])\n\n    const setMaxAmount = () => onAmountChange(maxAmount)\n\n    const onAmountChange = value => {\n        if (value) {\n            const { decimals } = selectedAsset\n            const bigNumberAmount = ethers.utils.parseUnits(value, decimals).toHexString()\n            setBigNumberHexAmount(bigNumberAmount)\n        }\n\n        setAmount(value)\n    }\n\n    const sendTx = () => {\n        const recipientAddress = uDAddress ? uDAddress : ensAddress ? ensAddress :  address\n        if (!bigNumberHexAmount) return \n        \n        try {\n            const txn = {\n                to: selectedAsset.address,\n                value: '0',\n                data: ERC20.encodeFunctionData('transfer', [recipientAddress, bigNumberHexAmount])\n            }\n\n            if (Number(selectedAsset.address) === 0) {\n                txn.to = recipientAddress\n                txn.value = bigNumberHexAmount\n                txn.data = '0x'\n            }\n\n            let req = {\n                id: `transfer_${Date.now()}`,\n                type: 'eth_sendTransaction',\n                chainId: selectedNetwork.chainId,\n                account: selectedAcc,\n                txn,\n                meta: null\n            }\n\n            if (uDAddress) {\n                req.meta = {\n                    addressLabel: {\n                        addressLabel: address,\n                        address: uDAddress\n                    }\n                }\n            } else if (ensAddress) {\n                req.meta = {\n                    addressLabel: {\n                        addressLabel: address,\n                        address: ensAddress\n                    }\n                }\n            }\n\n            addRequest(req)\n\n            setAmount(0)\n        } catch (e) {\n            console.error(e)\n            addToast(`Error: ${e.message || e}`, { error: true })\n        }\n    }\n\n    useEffect(() => {\n        // check gasTank topUp with token for convertion\n        setFeeBaseTokenWarning('')\n        if (gasTankDetails?.isTopUp){\n            const gasFeeToken = feeAssetsPerNetwork && feeAssetsPerNetwork.find(ft => ft?.address?.toLowerCase() === selectedAsset?.address?.toLowerCase())\n            if (gasFeeToken?.baseToken) {\n                const feeBaseToken = feeAssetsPerNetwork && feeAssetsPerNetwork.find(ft => ft.address.toLowerCase() === gasFeeToken.baseToken.toLowerCase())\n                setFeeBaseTokenWarning(`Token ${gasFeeToken.symbol.toUpperCase()} will be converted to ${feeBaseToken.symbol.toUpperCase()} without additional fees.`)\n            }\n        }\n    }, [feeAssetsPerNetwork, gasTankDetails?.isTopUp, selectedAsset])\n\n    useEffect(() => {\n        setAmount(0)\n        setBigNumberHexAmount('')\n        setSWAddressConfirmed(false)\n    }, [asset, selectedNetwork.id])\n\n    useEffect(() => {\n        if (!selectedAsset) return\n        history.replace({ pathname: `/wallet/transfer/${Number(asset) !== 0 ? asset : selectedAsset.symbol}` })\n    }, [asset, history, selectedAsset])\n\n    useEffect(() => {\n        const isValidSendTransferAmount = validateSendTransferAmount(amount, selectedAsset)\n\n        if (address.startsWith('0x') && (address.indexOf('.') === -1)) {\n            if (uDAddress !== '') setUDAddress('')\n            if (ensAddress !== '') setEnsAddress('')\n            const isValidRecipientAddress = validateSendTransferAddress(address, selectedAcc, addressConfirmed, isKnownAddress)\n\n            setValidationFormMgs({\n                success: {\n                    amount: isValidSendTransferAmount.success,\n                    address: isValidRecipientAddress.success\n                },\n                messages: {\n                    amount: isValidSendTransferAmount.message ? isValidSendTransferAmount.message : '',\n                    address: isValidRecipientAddress.message ? isValidRecipientAddress.message : ''\n                }\n            })\n\n            setDisabled(!isValidRecipientAddress.success || !isValidSendTransferAmount.success || (showSWAddressWarning && !sWAddressConfirmed))\n        } else {\n            if (timer.current) {\n                clearTimeout(timer.current)\n            }\n\n            const validateForm = async () => {\n                const UDAddress = await resolveUDomain(address, selectedAsset ? selectedAsset.symbol : null, selectedNetwork.unstoppableDomainsChain)\n                const bip44Item = getBip44Items(selectedAsset ? selectedAsset.symbol : null)\n                const ensAddr = await resolveENSDomain(address, bip44Item)\n                timer.current = null\n                const isUDAddress = UDAddress ? true : false\n                const isEnsAddress = ensAddr ? true : false\n                let selectedAddress = ''\n                if (isEnsAddress) selectedAddress = ensAddr\n                else if (isUDAddress) selectedAddress = UDAddress\n                else selectedAddress = address\n\n                const isValidRecipientAddress = validateSendTransferAddress(selectedAddress, selectedAcc, addressConfirmed, isKnownAddress, isUDAddress, isEnsAddress)\n\n                setUDAddress(UDAddress)\n                setEnsAddress(ensAddr)\n                setValidationFormMgs({\n                    success: {\n                        amount: isValidSendTransferAmount.success,\n                        address: isValidRecipientAddress.success\n                    },\n                    messages: {\n                        amount: isValidSendTransferAmount.message ? isValidSendTransferAmount.message : '',\n                        address: isValidRecipientAddress.message ? isValidRecipientAddress.message : ''\n                    }\n                })\n\n                setDisabled(!isValidRecipientAddress.success || !isValidSendTransferAmount.success || (showSWAddressWarning && !sWAddressConfirmed))\n            }\n\n            timer.current = setTimeout(async () => {\n                return validateForm().catch(console.error)\n            }, 300)\n        }\n        return () => clearTimeout(timer.current)\n    }, [address, amount, selectedAcc, selectedAsset, addressConfirmed, showSWAddressWarning, sWAddressConfirmed, isKnownAddress, addToast, selectedNetwork, addAddress, uDAddress, disabled, ensAddress])\n\n    const amountLabel = <div className=\"amount-label\">Available Amount: <span>{maxAmountFormatted} {selectedAsset?.symbol}</span></div>\n\n    return (\n        <div id=\"transfer\" style={{ justifyContent: gasTankDetails ? 'center' : '' }}>\n           <div className=\"panel\">\n               <div className=\"title\">\n                   Send\n               </div>\n               {\n                    portfolio.isCurrNetworkBalanceLoading ?\n                        <Loading />\n                        :\n                        assetsItems.length ?\n                            <div className=\"form\">\n                                <Select searchable defaultValue={asset} items={assetsItems.sort((a, b) => a.label.toLowerCase() > b.label.toLowerCase() ? 1 : -1)} onChange={({ value }) => setAsset(value)}/>\n                                { feeBaseTokenWarning ? <p className='gas-tank-convert-msg'><MdWarning /> {feeBaseTokenWarning}</p> : <></>}\n                                <NumberInput\n                                    label={amountLabel}\n                                    value={amount}\n                                    precision={selectedAsset?.decimals}\n                                    onInput={onAmountChange}\n                                    button=\"MAX\"\n                                    onButtonClick={() => setMaxAmount()}\n                                />\n                                \n                                { validationFormMgs.messages.amount && \n                                    (<div className='validation-error'><BsXLg size={12}/>&nbsp;{validationFormMgs.messages.amount}</div>)}\n                                { gasTankDetails ? <p className='gas-tank-msg'><MdWarning /> {gasTankDetails?.gasTankMsg}</p> : (<div id=\"recipient-field\">\n                                    <TextInput\n                                        placeholder=\"Recipient\"\n                                        info=\"Please double-check the recipient address, blockchain transactions are not reversible.\"\n                                        value={address}\n                                        onInput={setAddress}\n                                    />\n                                    <ToolTip label={!ensAddress ? 'You can use Ethereum Name ServiceⓇ' : 'Valid Ethereum Name ServicesⓇ domain'}>\n                                        <div id=\"ens-logo\" className={ensAddress ? 'ens-logo-active ' : ''} />\n                                    </ToolTip>\n                                    <ToolTip label={!uDAddress ? 'You can use Unstoppable domainsⓇ' : 'Valid Unstoppable domainsⓇ domain'}>\n                                        <div id=\"udomains-logo\" className={uDAddress ? 'ud-logo-active ' : ''} />\n                                    </ToolTip>\n                                    <AddressBook\n                                        addresses={addresses.filter(x => x.address !== selectedAcc)}\n                                        addAddress={addAddress}\n                                        removeAddress={removeAddress}\n                                        newAddress={newAddress}\n                                        onClose={() => setNewAddress(null)}\n                                        onSelectAddress={address => setAddress(address)}\n                                        selectedNetwork={selectedNetwork}\n                                    />\n                                </div>)}\n                                { validationFormMgs.messages.address && \n                                    (<div className='validation-error'><BsXLg size={12}/>&nbsp;{validationFormMgs.messages.address}</div>)}\n                                <div className=\"separator\"/>\n                                <AddressWarning\n                                    address={address}\n                                    onAddNewAddress={() => setNewAddress(address)}\n                                    onChange={(value) => setAddressConfirmed(value)}\n                                    isKnownAddress={isKnownAddress}\n                                    uDAddress={uDAddress}\n                                    ensAddress={ensAddress}\n                                />\n                                {\n                                    showSWAddressWarning ?\n                                        <Checkbox\n                                            id=\"binance-address-warning\"\n                                            label={<span id=\"binance-address-warning-label\">\n                                                I confirm this address is not a {unsupportedSWPlatforms.join(' / ')} address: <br />\n                                                These platforms do not support ${selectedAsset?.symbol} deposits from smart wallets\n                                                <a href='https://help.ambire.com/hc/en-us/articles/4415473743506-Statement-on-MATIC-BNB-deposits-to-Binance' target='_blank' rel='noreferrer'><MdInfo size={20} /></a>\n                                            </span>}\n                                            checked={sWAddressConfirmed}\n                                            onChange={({ target }) => setSWAddressConfirmed(target.checked)}\n                                        />\n                                        :\n                                        null\n                                }\n                                <Button icon={<AiOutlineSend />} disabled={disabled} onClick={sendTx}>Send</Button>\n                            </div>\n                            :\n                            <NoFundsPlaceholder/>\n               }\n           </div>\n           {!gasTankDetails && <Addresses\n                selectedAsset={selectedAsset}\n                selectedNetwork={selectedNetwork}\n                addresses={addresses}\n                addAddress={addAddress}\n                removeAddress={removeAddress}\n                onSelectAddress={address => setAddress(address)}\n            />}\n        </div>\n    )\n}\n\nexport default withRouter(Transfer)","import objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","import { parseUnits } from 'ethers/lib/utils'\nimport { isValidAddress, isKnownTokenOrContract } from 'ambire-common/src/services/address'\nimport accountPresets from 'ambire-common/src/constants/accountPresets'\n\nconst validateAddress = address => {\n    if (!(address && address.length)) {\n        return {\n            success: false,\n            message: ''\n        }\n    }\n\n    if (!(address && isValidAddress(address))) {\n        return {\n            success: false,\n            message: 'Invalid address.'\n        }\n    }\n\n    return { success: true }\n}\n\nconst validateAddAuthSignerAddress = (address, selectedAcc) => {\n    const isValidAddr = validateAddress(address)\n    if (!isValidAddr.success) return isValidAddr\n\n    if (address && selectedAcc && (address === selectedAcc)) {\n        return {\n            success: false,\n            message: 'The entered address should be different than the your own account address.'\n        }\n    }\n    \n    return { success: true }\n}\n\nconst validateSendTransferAddress = (address, selectedAcc, addressConfirmed, isKnownAddress, isUDAddress, isEnsAddress) => {\n    const isValidAddr = validateAddress(address)\n    if (!isValidAddr.success) return isValidAddr\n\n    if (address && address === accountPresets.feeCollector) {\n        return {\n            success: true\n        }\n    }\n\n    if (address && selectedAcc && (address === selectedAcc)) {\n        return {\n            success: false,\n            message: 'The entered address should be different than the your own account address.'\n        }\n    }\n    \n    if (address && isKnownTokenOrContract(address)) {\n        return {\n            success: false,\n            message: 'You are trying to send tokens to a smart contract. Doing so would burn them.'\n        }\n    }\n\n    if (address && (!isKnownAddress(address) && !addressConfirmed && !isUDAddress && !isEnsAddress)) { \n        return {\n            success: false,\n            message: `You're trying to send to an unknown address. If you're really sure, confirm using the checkbox below.`\n        }\n    }\n\n    if (address && (!isKnownAddress(address) && !addressConfirmed && (isUDAddress || isEnsAddress))) { \n        const name = isUDAddress ? 'Unstoppable domain' : 'Ethereum Name Service'\n        return {\n            success: false,\n            message: `You're trying to send to an ${name}. If you really trust to the person who gave you, confirm using the checkbox below.`\n        }\n    }\n\n    return { success: true }\n}\n\nconst validateSendTransferAmount = (amount, selectedAsset) => {\n    if (!(amount && amount.length)) {\n        return {\n            success: false,\n            message: ''\n        }\n    }\n    \n    if (!(amount && (amount > 0))) {\n        return {\n            success: false,\n            message: 'The amount must be greater than 0.'\n        }\n    }\n\n    try {\n        if (amount && selectedAsset && selectedAsset.decimals) {\n            const parsedAmount = amount.slice(0, amount.indexOf('.') + selectedAsset.decimals + 1); // Fixed decimals in case amount is bigger than selectedAsset.decimals, otherwise would cause overflow error\n            const bigNumberAmount = parseUnits(parsedAmount, selectedAsset.decimals)\n            if (bigNumberAmount && selectedAsset.balanceRaw && bigNumberAmount.gt(selectedAsset.balanceRaw)) {\n                return {\n                    success: false,\n                    message: `The amount is greater than the asset's balance: ${selectedAsset?.balance} ${selectedAsset?.symbol}.`\n                }\n            }\n        }\n    } catch(e) {\n        console.error(e);\n    }\n\n    return { success: true }\n}\n\nconst validateSendNftAddress = (address, selectedAcc, addressConfirmed, isKnownAddress, metadata, selectedNetwork, network, isUDAddress, isEnsAddress) => {\n    const isValidAddr = validateSendTransferAddress(address, selectedAcc, addressConfirmed, isKnownAddress, isUDAddress, isEnsAddress)\n    if (!isValidAddr.success) return isValidAddr\n\n    if (metadata && selectedAcc && (metadata.owner?.address.toLowerCase() !== selectedAcc.toLowerCase())) {\n        return {\n            success: false,\n            message: `The NFT you're trying to send is not owned by you!`\n        }\n    }\n\n    if (selectedNetwork && network && (selectedNetwork.id !== network)) {\n        return {\n            success: false,\n            message: 'The selected network is not the correct one.'\n        }\n    }\n\n    return { success: true }\n}\n\nexport {\n    validateAddAuthSignerAddress,\n    validateSendNftAddress,\n    validateSendTransferAddress,\n    validateSendTransferAmount\n}\n","// @ts-nocheck TODO: Fill in all missing types before enabling the TS check again\n// It costs around 19k to send a token, if that token was interacted with before in the same transaction,\n// because of SLOAD costs - they depend on whether a slot has been read\n// however, it costs 30k if the token has not been interacted with\n// we may decrease it a bit and lean on the relayer failsafe values (cfg.gasAddedOnEstimate) later on\nconst ADDED_GAS_TOKEN = 30000\nconst ADDED_GAS_NATIVE = 12000\n\nexport function getAddedGas(token) {\n  return !token?.address || token?.address === '0x0000000000000000000000000000000000000000'\n    ? ADDED_GAS_NATIVE\n    : ADDED_GAS_TOKEN\n}\n\n// can't think of a less funny name for that\nexport function getFeePaymentConsequences(token, estimation, isGasTankEnabled) {\n  // Relayerless mode\n  if (!estimation?.feeInUSD || !token) return { multiplier: 1, addedGas: 0 }\n  // Relayer mode\n  const addedGas = getAddedGas(token)\n  // If Gas Tank enabled\n  if (isGasTankEnabled) return { addedGas: 0, multiplier: 1 }\n\n  return {\n    // otherwise we get very long floating point numbers with trailing .999999\n    multiplier: parseFloat(((estimation.gasLimit + addedGas) / estimation.gasLimit).toFixed(4)),\n    addedGas\n  }\n}\n\n// Returns feeToken data with all multipliers applied\nexport function getFeesData(feeToken, estimation, speed, isGasTankEnabled, network) {\n  const { addedGas, multiplier } = getFeePaymentConsequences(feeToken, estimation, isGasTankEnabled)\n  const savedGas = getAddedGas(feeToken)\n  const discountMultiplier = 1 - (feeToken?.discount || 0)\n  const totalMultiplier = multiplier * discountMultiplier\n  const nativeRate = feeToken?.nativeRate || 1\n  const isCrossChainNativeSelected =\n    isGasTankEnabled &&\n    feeToken.address === '0x0000000000000000000000000000000000000000' &&\n    network.id !== feeToken.network\n  // eslint-disable-next-line no-nested-ternary\n  const feeInNative = estimation.customFee\n    ? (estimation.customFee * discountMultiplier) / nativeRate\n    : !isCrossChainNativeSelected\n    ? estimation.feeInNative[speed] * totalMultiplier\n    : (((estimation.feeInNative[speed] * totalMultiplier) / nativeRate) *\n        estimation.nativeAssetPriceInUSD) /\n      feeToken.price\n  // eslint-disable-next-line no-nested-ternary\n  const feeInUSD = !Number.isNaN(estimation.nativeAssetPriceInUSD)\n    ? !isCrossChainNativeSelected\n      ? feeInNative * estimation.nativeAssetPriceInUSD\n      : feeInNative * feeToken.price\n    : undefined\n  const feeInFeeToken = feeInNative * nativeRate\n\n  return {\n    feeInNative,\n    feeInUSD,\n    feeInFeeToken,\n    addedGas, // use it bundle data\n    savedGas\n  }\n}\nexport function isTokenEligible(token, speed, estimation, isGasTankEnabled, network) {\n  if (estimation?.relayerless && token?.address === '0x0000000000000000000000000000000000000000')\n    return true\n  if (!token) return false\n  const { feeInFeeToken } = getFeesData(token, estimation, speed, isGasTankEnabled, network)\n  const balanceInFeeToken = parseInt(token.balance) / 10 ** token.decimals\n  return balanceInFeeToken > feeInFeeToken\n}\n\nconst contractErrors = [\n  'caller is a contract',\n  'contract not allowed',\n  'contract not supported',\n  'No contractz allowed',\n  /* no */ 'contracts allowed',\n  /* c or C */ 'ontract is not allowed'\n]\n\nexport function mapTxnErrMsg(msg: any) {\n  if (!msg) return\n  if (msg.includes('Router: EXPIRED')) return 'Swap expired'\n  if (msg.includes('Router: INSUFFICIENT_OUTPUT_AMOUNT'))\n    return 'Swap will suffer slippage higher than your requirements'\n  if (msg.includes('INSUFFICIENT_PRIVILEGE')) return 'Your signer address is not authorized.'\n  if (contractErrors.find((contractMsg) => msg.includes(contractMsg)))\n    return 'This dApp does not support smart wallets.'\n  return msg\n}\n\nexport function getErrHint(msg: any) {\n  if (!msg) return\n  if (msg.includes('Router: EXPIRED')) return 'Try performing the swap again'\n  if (msg.includes('Router: INSUFFICIENT_OUTPUT_AMOUNT'))\n    return 'Try performing the swap again or increase your slippage requirements'\n  if (msg.includes('INSUFFICIENT_PRIVILEGE'))\n    return 'If you set a new signer for this account, try re-adding the account.'\n  if (contractErrors.find((contractMsg) => msg.includes(contractMsg)))\n    return 'Contact the dApp developers to tell them to implement smart wallet support by not blocking contract interactions and/or implementing EIP1271.'\n  return 'Sending this transaction batch would have resulted in an error, so we prevented it.'\n}\n\nexport function toHexAmount(amnt: any, decimals: any) {\n  return `0x${Math.round(amnt * 10 ** decimals).toString(16)}`\n}\n\nexport function getDiscountApplied(amnt: any, discount = 0) {\n  if (!discount) return 0\n  if (!amnt) return 0\n  if (discount === 1) return amnt\n  return (amnt / (1 - discount)) * discount\n}\n","// @ts-nocheck TODO: Fill in all missing types before enabling the TS check again\nimport ERC20ABI from 'adex-protocol-eth/abi/ERC20.json'\nimport { BigNumber } from 'ethers'\nimport { Interface } from 'ethers/lib/utils'\n\nimport accountPresets from '../../constants/accountPresets'\n\nconst ERC20AbiInterface = new Interface(ERC20ABI)\nconst TRANSFER_SIGHASH = ERC20AbiInterface.getSighash(\n  ERC20AbiInterface.getFunction('transfer').format()\n)\nconst feeCollector = accountPresets.feeCollector\nconst NATIVE_ADDRESS = '0x0000000000000000000000000000000000000000'\n\nfunction getTxnTransferInfo(txn) {\n  try {\n    const res = ERC20AbiInterface.decodeFunctionData('transfer', txn)\n\n    return {\n      value: BigNumber.from(res._value),\n      ...res\n    }\n  } catch (e) {\n    console.error(e)\n    return {}\n  }\n}\n\nfunction isFeeCollectorTxn(txn) {\n  // is first call is to relayer this is native\n  if (txn[0] === feeCollector) return true\n  // transfer token to relayer\n  if (txn[2].startsWith(TRANSFER_SIGHASH) && getTxnTransferInfo(txn[2])._to === feeCollector)\n    return true\n  return false\n}\n\nconst getGasTankFilledTxns = (transactions) => {\n  const depositTxns: any = []\n  transactions.forEach(({ txId, txns, submittedAt, gasTankFee, identity, ...rest }) => {\n    const filteredTxns = txns\n      .filter((txnCall, i) => isFeeCollectorTxn(txnCall) && (gasTankFee || i < txns.length - 1))\n      .map((fillTxn) => {\n        if (fillTxn[0] === feeCollector) {\n          return {\n            submittedAt,\n            address: NATIVE_ADDRESS,\n            value: BigNumber.from(fillTxn[1]),\n            identity,\n            txId,\n            ...rest\n          }\n        }\n        if (\n          fillTxn[2].startsWith(TRANSFER_SIGHASH) &&\n          ERC20AbiInterface.decodeFunctionData('transfer', fillTxn[2])._to === feeCollector\n        ) {\n          return {\n            submittedAt,\n            address: fillTxn[0],\n            value: BigNumber.from(\n              ERC20AbiInterface.decodeFunctionData('transfer', fillTxn[2])._value\n            ),\n            identity,\n            txId,\n            ...rest\n          }\n        }\n        return null\n      })\n\n    if (filteredTxns.length) depositTxns.push(filteredTxns[0])\n  })\n\n  return depositTxns\n}\n\nexport { getGasTankFilledTxns }\n","import useGasTankData from './useGasTankData'\n\nexport default useGasTankData\n","import { formatUnits } from 'ethers/lib/utils'\nimport { useMemo } from 'react'\n\nimport { getAddedGas } from '../../helpers/sendTxnHelpers'\nimport { getGasTankFilledTxns } from '../../services/isFeeCollectorTxn'\nimport useCacheBreak from '../useCacheBreak'\nimport { UseGasTankDataProps, UseGasTankDataReturnType } from './types'\n\nexport default function useGasTankData({\n  relayerURL,\n  selectedAcc,\n  network,\n  portfolio,\n  useRelayerData\n}: UseGasTankDataProps): UseGasTankDataReturnType {\n  const { cacheBreak } = useCacheBreak()\n  const { tokens } = portfolio\n\n  const urlGetBalance = relayerURL\n    ? `${relayerURL}/gas-tank/${selectedAcc}/getBalance?cacheBreak=${cacheBreak}`\n    : null\n  const urlGetFeeAssets = relayerURL\n    ? `${relayerURL}/gas-tank/assets?cacheBreak=${cacheBreak}`\n    : null\n  const urlGetTransactions = relayerURL\n    ? `${relayerURL}/identity/${selectedAcc}/${network?.id}/transactions`\n    : null\n\n  const { data: balancesRes, isLoading } = useRelayerData({ url: urlGetBalance })\n  const { data: feeAssetsRes } = useRelayerData({ url: urlGetFeeAssets })\n  const { data: executedTxnsRes } = useRelayerData({ url: urlGetTransactions })\n\n  const gasTankBalances = useMemo(\n    () =>\n      balancesRes &&\n      balancesRes.length &&\n      balancesRes.map(({ balanceInUSD }: any) => balanceInUSD).reduce((a: any, b: any) => a + b, 0),\n    [balancesRes]\n  )\n\n  const gasTankTxns = useMemo(\n    () =>\n      executedTxnsRes &&\n      executedTxnsRes.txns.length &&\n      executedTxnsRes.txns.filter((item: any) => !!item.gasTankFee),\n    [executedTxnsRes]\n  )\n\n  const feeAssetsPerNetwork = useMemo(\n    () =>\n      feeAssetsRes &&\n      feeAssetsRes.length &&\n      feeAssetsRes.filter((item: any) => item.network === network?.id),\n    [feeAssetsRes, network?.id]\n  )\n\n  const executedTxns = executedTxnsRes && executedTxnsRes.txns.length && executedTxnsRes.txns\n  const gasTankFilledTxns = useMemo(\n    () => executedTxns && executedTxns.length && getGasTankFilledTxns(executedTxns),\n    [executedTxns]\n  )\n\n  const availableFeeAssets = useMemo(\n    () =>\n      feeAssetsPerNetwork?.map((item: any) => {\n        const isFound = tokens?.find((x) => x.address.toLowerCase() === item.address.toLowerCase())\n        if (isFound)\n          return {\n            ...isFound,\n            tokenImageUrl: item.icon,\n            decimals: item.decimals,\n            symbol: item.symbol,\n            balance: isFound.balance,\n            disableGasTankDeposit: !!item.disableGasTankDeposit,\n            balanceUSD:\n              parseFloat(isFound.balance) *\n              parseFloat(\n                feeAssetsPerNetwork.find(\n                  (x: any) => x.address.toLowerCase() === isFound.address.toLowerCase()\n                ).price || 0\n              )\n          }\n\n        return {\n          ...item,\n          tokenImageUrl: item.icon,\n          balance: 0,\n          balanceUSD: 0,\n          decimals: 0,\n          address: item.address.toLowerCase(),\n          symbol: item.symbol.toUpperCase()\n        }\n      }),\n    [feeAssetsPerNetwork, tokens]\n  )\n\n  const totalSavedResult = useMemo(\n    () =>\n      gasTankTxns &&\n      gasTankTxns.length &&\n      gasTankTxns.map((item: any) => {\n        const feeTokenDetails = feeAssetsRes\n          ? feeAssetsRes.find((i: any) => i.symbol === item.feeToken)\n          : null\n        const savedGas = feeTokenDetails ? getAddedGas(feeTokenDetails) : null\n        return {\n          saved: savedGas ? item.feeInUSDPerGas * savedGas : 0.0,\n          cashback:\n            item.gasTankFee && item.gasTankFee.cashback\n              ? // @ts-ignore FIXME: Figure out why TypeScript complains\n                formatUnits(\n                  item.gasTankFee.cashback.toString(),\n                  feeTokenDetails?.decimals\n                ).toString() * feeTokenDetails?.price\n              : 0.0\n        }\n      }),\n    [feeAssetsRes, gasTankTxns]\n  )\n\n  return {\n    balancesRes,\n    gasTankBalances,\n    isLoading,\n    gasTankTxns,\n    feeAssetsRes,\n    gasTankFilledTxns,\n    totalSavedResult,\n    availableFeeAssets\n  }\n}\n"],"sourceRoot":""}