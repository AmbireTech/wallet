{"version":3,"sources":["resources/ramp.svg","resources/paytrie.svg","resources/transak.svg","resources/kriptomat.svg","resources/guardarian.svg","components/Wallet/Deposit/Providers/useProviders.js","components/Wallet/Deposit/Providers/Providers.js","components/Wallet/Deposit/Deposit.js","lib/getWallet.js","lib/ledgerWebHID.js","consts/specialAddresses.js","lib/assetMigrationDetector.js","consts/permittableCoins.js","components/Wallet/AssetsMigration/AssetsMigrationSelector.js","components/Wallet/AssetsMigration/AssetsMigrationPermitter.js","components/Wallet/AssetsMigration/AssetsMigrationNative.js","components/Wallet/AssetsMigration/AssetsMigration.js","components/Modals/AssetsMigrationModal/AssetsMigrationModal.js","components/Wallet/AssetsMigration/AssetsMigrationBanner.js"],"names":["useProviders","walletAddress","selectedNetwork","relayerURL","portfolio","useState","isLoading","setLoading","addToast","useToasts","showModal","useModals","openPayTrie","a","prevState","rightSideLabels","ethereum","polygon","URL","url","parse","PAYTRIE_PARTNER_URL","search","query","addr","rightSideLabel","popupCenter","format","title","w","h","filter","n","openKriptomat","fetchGet","kriptomatResponse","success","data","error","openRampNetwork","RampInstantSDK","hostAppName","hostLogoUrl","variant","swapAsset","userAddress","hostApiKey","RAMP_HOST_API_KEY","show","openTransak","transak","transakSDK","apiKey","TRANSAK_API_KEY","environment","TRANSAK_ENV","networks","defaultCryptoCurrency","disableWalletAddressForm","themeColor","email","redirectURL","hostURL","window","location","origin","widgetHeight","widgetWidth","init","on","ALL_EVENTS","console","log","EVENTS","TRANSAK_ORDER_SUCCESSFUL","orderData","close","openGuardarian","GuardarianDepositProviderModal","Providers","networkDetails","id","providers","logo","GUARDARIAN_LOGO","name","type","fees","limits","currencies","onClick","KRIPTOMAT_LOGO","RAMP_LOGO","PAYTRIE_LOGO","TRANSAK_LOGO","shouldBeDisabled","includes","map","className","src","alt","Deposit","selectedAcc","accounts","addRequest","useStorage","find","qrCodeUrl","setQrCodeUrl","generateQRCode","useCallback","QRCode","toDataURL","quality","margin","useEffect","size","TextInput","label","nativeAssetSymbol","value","copy","hide","icon","style","backgroundImage","AssetsMigrationBanner","selectedAccount","linkMargin","wallets","getWallet","signer","signerExtra","chainId","opts","address","one","getWalletNew","TrezorConnect","manifest","appUrl","providerTrezor","TrezorSubprovider","trezorConnectClientApi","networkId","_initialDerivedKeyInfo","hdKey","HDNode","fromExtendedKey","info","xpub","derivationPath","baseDerivationPath","getInitialDerivedKeyInfo","signMessage","hash","signPersonalMessageAsync","ethers","utils","hexlify","signTransaction","params","signTransactionAsync","from","sendTransaction","transaction","network","Error","getProvider","broadcastProvider","getTransactionCount","nonce","gas","gasLimit","gasPrice","signedTx","isConnected","matchAddress","getAccountsAsync","addresses","i","toLowerCase","_signTypedData","domain","types","domainSeparator","_TypedDataEncoder","hashDomain","hashStructMessage","hashStruct","getPrimaryType","getPayload","_initialDerivedKeyInfoAsync","initialDerivedKeyInfo","derivedKeyInfo","_findDerivedKeyInfoForAddress","path","_trezorConnectClientApi","ethereumSignTypedData","metamask_v4_compat","domain_separator_hash","message_hash","response","payload","signature","transportProtocol","ledgerSignMessage","ledgerSignTransaction","provider","ledgerGetAddresses","ledgerSignMessage712","LedgerSubprovider","ledgerEthereumClientFactoryAsync","ledgerEthereumBrowserClientFactoryAsync","wrapLatticeError","commKey","deviceId","client","latticeInit","latticeConnect","isPaired","errConnect","message","pair","latticeSignMessage","signedMsg","errSignMessage","latticeSignTransaction","serializedSigned","errSignTxn","latticeGetAddresses","res","errGetAddresses","latticeSignMessage712","Web3Provider","signerObject","getSigner","matchChain","listAccounts","match","length","getNetwork","fn","arg","apply","this","catch","e","ethUtil","require","connectedDevices","PARENT_HD_PATH","getTransport","TransportWebHID","list","opened","open","request","transport","getAccounts","parentKeyDerivationPath","getAddressInternal","then","o","err","statusCode","ledgerResponse","publicKey","Buffer","chainCode","mainAddress","addressOfHDKey","calculateDerivedHDKeyInfos","appEth","AppEth","ledgerTimeout","Promise","resolve","reject","timeoutHandle","setTimeout","race","getAddress","clearTimeout","txn","fromAddr","unsignedTxObj","serializedUnsigned","serialize","accountsData","substr","rsvResponse","intV","parseInt","v","Math","floor","r","s","signerAddress","account","signPersonalMessage","rsvReply","toString","signEIP712HashedMessage","count","derivedKeys","fullDerivationPath","derive","derivedKey","push","derivedPublicKey","ethereumAddressUnprefixed","publicToAddress","addHexPrefix","ZERO_ADDRESS","assetMigrationDetector","relayerlessOnly","VELCRO_API_ENDPOINT","ZAPPER_API_KEY","velcroResponse","signer_","products","customTokens","assets","tokens","symbol","decimals","urlCustomTokens","JSON","stringify","finalResponse","tokenImageUrl","native","availableBalance","balanceRaw","balanceUSD","rate","PERMIT_TYPE_2612","PERMIT_TYPE_DAI","EIP712DomainWithVersion","EIP712DomainWithoutNameNorVersion","EIP712Domain","EIP712DomainWithSalt","PERMITTABLE_COINS","version","domainType","permitType","nonceFunction","salt","ERC20PermittableInterface","Interface","AssetsMigrationSelector","signerAccount","identityAccount","setIsSelectionConfirmed","setStep","setModalButtons","hideModal","setSelectedTokensWithAllowance","setGasSpeed","setStepperSteps","hidden","selectableTokens","setSelectableTokens","selectableTokensUserInputs","setSelectableTokensUserInputs","nativeToken","setNativeToken","setIsLoading","failedImg","setFailedImg","gasData","setGasData","estimatedGasFees","setEstimatedGasFees","selectedGasSpeed","setSelectedGasSpeed","tokensAllowances","setTokenAllowances","isAddCustomTokenFormShown","setIsAddCustomTokenFormShown","isCustomTokenPending","setIsCustomTokenPending","customTokenAddress","setCustomTokenAddress","customTokenError","setCustomTokenError","customTokenInput","useRef","inputRefs","updateSelectableTokenUserInputs","callback","index","findIndex","updated","slice","toggleTokenSelection","minHumanAmount","sort","b","t","current","focus","old","selected","currentHumanAmount","humanAmount","amount","BigNumber","multipliedBy","toFixed","addCustomToken","isAddress","tokenContract","Contract","symbolPromise","decimalsPromise","allowancePromise","allowance","availableSignerBalancePromise","balanceOf","all","promises","signerBalance","toNumber","selectedAmount","div","gt","canCoverGasFees","speed","nativeToSpend","gasFees","signerTransactionsCost","plus","lte","getMaxTransferableNative","minus","consolidatedSelectableTokens","st","confirmTokenSelection","tokensToMigrate","consolidatedTokens","regularTransfersCount","nativeTransfersCount","signerTransactionsConsumption","nativeRate","gasFeeAssets","GAS_SPEEDS","forEach","maxPriorityFeePerGas","signerTransactionsCostUSD","allowanceResults","clear","small","onAssetAmountChange","val","item","endsWith","split","isEqualTo","isNaN","newHumanAmount","comparedTo","dividedBy","replace","steps","tokensTitleActions","join","AmbireLoading","draggable","onError","failed","checked","onChange","ref","element","placeholder","ROUND_DOWN","Object","values","f","AssetsMigrationPermitter","selectedTokensWithAllowance","setError","gasSpeed","tokensPermissions","setTokensPermissions","tokensTransfers","setTokensTransfers","tokensPendingStatus","setTokensPendingStatus","hasRefusedOnce","setHasRefusedOnce","lastRefusalError","setLastRefusalError","hasCorrectAccountAndChainId","setHasCorrectAccountAndChainId","currentGasPrice","setCurrentGasPrice","wallet","setWallet","getConsolidatedTokensPure","remapped","signing","sent","pending","checkWalletConnection","connected","readyTokensCount","sendToken","waitForRcpt","tokenToMigrate","sendData","encodeFunctionData","transferResult","to","rcpt","wait","cancelMigration","completeMigration","nextTokenToAsk","signed","initialTokensTransfers","Button","gte","AssetsMigrationNative","nativeTokenData","hasERC20Tokens","setBeforeCloseModalHandler","hasMigratedNative","setHasMigratedNative","isMigrationPending","setIsMigrationPending","nativeAmount","setNativeAmount","maxRecommendedAmount","setMaxRecommendedAmount","transactionEstimationCost","setTransactionEstimationCost","nativeHumanAmount","setNativeHumanAmount","hasModifiedAmount","setHasModifiedAmount","continueMigration","erc20TransfersCount","permittable","migrateNative","updateAmount","nativeTransactionCost","transfersTransactionCost","recommendedBN","onAmountChange","initialHumanAmount","buttons","getDisplayedButtons","AssetsMigration","setModalSteps","setNativeTokenData","setHasERC20Tokens","isSelectionConfirmed","step","stepperSteps","showCloseConfirmation","setShowCloseConfirmation","currentAccount","stepIndex","beforeCloseHandle","AssetsMigrationModal","modalButtons","modalSteps","currentStep","noLabels","closeable","hasSignerAssets","setHasSignerAssets","migrationMessageSeen","setMigrationMessageSeen","key","defaultValue","migrationMessageSeenStorage","setMigrationMessageSeenStorage","closeMigrationMessage","unmounted","relevantAssets","checkSignerAssets"],"mappings":"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","file":"static/js/17.09d7cd3a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/ramp.26a99e26.svg\";","export default __webpack_public_path__ + \"static/media/paytrie.338f7c3b.svg\";","export default __webpack_public_path__ + \"static/media/transak.e01c0265.svg\";","export default __webpack_public_path__ + \"static/media/kriptomat.4c8e4fc1.svg\";","export default __webpack_public_path__ + \"static/media/guardarian.5b666fba.svg\";","import { RampInstantSDK } from '@ramp-network/ramp-instant-sdk'\nimport transakSDK from '@transak/transak-sdk'\nimport { popupCenter } from 'lib/popupHelper'\nimport { fetchGet } from 'lib/fetch'\nimport { useState } from 'react';\nimport { useToasts } from 'hooks/toasts'\nimport { useModals } from 'hooks'\nimport GuardarianDepositProviderModal from 'components/Modals/GuardarianDepositProviderModal/GuardarianDepositProviderModal'\n\nimport url from 'url'\n\nimport { RAMP_HOST_API_KEY, PAYTRIE_PARTNER_URL, TRANSAK_API_KEY, TRANSAK_ENV } from 'config'\n\nconst useProviders = ({ walletAddress, selectedNetwork, relayerURL, portfolio }) => {\n\n    const [isLoading, setLoading] = useState([])\n    const { addToast } = useToasts()\n    const { showModal } = useModals()\n\n    const openRampNetwork = () => {\n        const assetsList = {\n            'ethereum': 'ERC20_*,ETH_*',\n            'polygon': 'MATIC_ERC20_*,MATIC_*',\n            'avalanche': 'AVAX_*',\n            'binance-smart-chain': 'BSC_*,BSC_ERC20_*',\n            'gnosis': 'XDAI_*'\n        }\n\n        const widget = new RampInstantSDK({\n            hostAppName: 'Ambire',\n            hostLogoUrl: 'https://www.ambire.com/ambire-logo.png',\n            variant: 'auto',\n            swapAsset: assetsList[selectedNetwork],\n            userAddress: walletAddress,\n            hostApiKey: RAMP_HOST_API_KEY,\n        })\n        widget.show()\n    };\n    \n    const openPayTrie = async() => {\n        setLoading(prevState => ['PayTrie', ...prevState])\n        const rightSideLabels = {\n            ethereum: 'USDC',\n            polygon: 'USDC-P',\n            'binance-smart-chain': 'USDT-B',\n        }\n\n        const URL = url.parse(PAYTRIE_PARTNER_URL, true)\n        URL.search = null\n        URL.query = {\n            ...URL.query,\n            addr: walletAddress,\n            rightSideLabel: rightSideLabels[selectedNetwork]\n        }\n\n        popupCenter({\n            url: url.format(URL),\n            title: 'Paytrie Deposit',\n            w: 450,\n            h: 700,\n        })\n        setLoading(prevState => prevState.filter(n => n !== 'PayTrie'))\n    };\n\n    const openTransak = () => {\n        const networksAlias = {\n            'avalanche': 'avaxcchain',\n            'binance-smart-chain': 'bsc',\n            'moonbeam': 'mainnet'\n        }\n\n        const defaultCurency = {\n            'ethereum': 'USDC',\n            'polygon': 'USDC',\n            'arbitrum': 'ETH',\n            'avalanche': 'AVAX',\n            'binance-smart-chain': 'BNB',\n            'moonriver': 'MOVR',\n            'moonbeam': 'GLMR',\n            'optimism': 'USDC'\n        }\n\n        const transak = new transakSDK({\n            apiKey: TRANSAK_API_KEY,\n            environment: TRANSAK_ENV,\n            networks: networksAlias[selectedNetwork] || selectedNetwork,\n            defaultCryptoCurrency: defaultCurency[selectedNetwork],\n            disableWalletAddressForm: true,\n            walletAddress,\n            themeColor: '282b33',\n            email: '',\n            redirectURL: '',\n            hostURL: window.location.origin,\n            widgetHeight: 'calc(100% - 60px)',\n            widgetWidth: '100%',\n        })\n\n        transak.init()\n\n        transak.on(transak.ALL_EVENTS, data => {\n            console.log(data)\n        })\n\n        transak.on(transak.EVENTS.TRANSAK_ORDER_SUCCESSFUL, orderData => {\n            console.log(orderData)\n            transak.close()\n        })\n    }\n\n\n    const openKriptomat = async () => {\n        setLoading(prevState => ['Kriptomat', ...prevState])\n        const kriptomatResponse = await fetchGet(`${relayerURL}/kriptomat/${walletAddress}/${selectedNetwork}`)\n        if (kriptomatResponse.success && kriptomatResponse.data && kriptomatResponse.data.url) popupCenter({\n            url: url.format(kriptomatResponse.data.url),\n            title: 'Kriptomat Deposit',\n            w: 515,\n            h: 600\n        })\n        else addToast(`Error: ${kriptomatResponse.data ? kriptomatResponse.data : 'unexpected error'}`, { error: true })\n        setLoading(prevState => prevState.filter(n => n !== 'Kriptomat'))\n    }\n\n    const openGuardarian = () => {\n        setLoading(prevState => ['Guardarian', ...prevState])\n        showModal(<GuardarianDepositProviderModal relayerURL={relayerURL} walletAddress={walletAddress} selectedNetwork={selectedNetwork} portfolio={portfolio}/>)\n        setLoading(prevState => prevState.filter(n => n !== 'Guardarian'))\n    }\n\n\n    return {\n        openRampNetwork,\n        openPayTrie,\n        openTransak,\n        openKriptomat,\n        openGuardarian,\n        isLoading\n    }\n}\n\nexport default useProviders","import './Providers.scss'\n\nimport RAMP_LOGO from 'resources/ramp.svg';\nimport PAYTRIE_LOGO from 'resources/paytrie.svg';\nimport TRANSAK_LOGO from 'resources/transak.svg';\nimport KRIPTOMAT_LOGO from 'resources/kriptomat.svg';\nimport GUARDARIAN_LOGO from 'resources/guardarian.svg'\n\nimport { Loading } from 'components/common'\nimport useProviders from './useProviders'\n\nexport default function Providers({ walletAddress, networkDetails, relayerURL, portfolio }) {\n    const { openRampNetwork, openPayTrie, openTransak, openKriptomat, openGuardarian, isLoading } = useProviders({ walletAddress, selectedNetwork: networkDetails.id, relayerURL, portfolio })\n    \n    const providers = [\n        {\n            logo: GUARDARIAN_LOGO,\n            name: 'Guardarian',\n            type: 'Buy with Bank Transfer, Credit/Debit Card, Sell Crypto',\n            fees: 'from 2%',\n            limits: 'up to 15k EUR/monthly on and off ramp',\n            currencies: 'GBP, EUR, USD and many more',\n            networks: ['ethereum', 'polygon', 'binance-smart-chain', 'fantom'],\n            onClick: () => openGuardarian()\n        },\n        {\n            logo: KRIPTOMAT_LOGO,\n            name: 'Kriptomat',\n            type: 'Credit Card',\n            fees: '2.45%',\n            limits: 'up to 5000 EUR/day',\n            currencies: 'USD, EUR, GBP',\n            networks: ['ethereum', 'polygon', 'avalanche', 'binance-smart-chain'],\n            onClick: () => openKriptomat()\n        },\n        {\n            logo: RAMP_LOGO,\n            name: 'Ramp',\n            type: 'Bank Transfer, Credit/Debit Card, Apple Pay',\n            fees: '0.49%-2.9%',\n            limits: '10,000EUR/m',\n            currencies: 'USD, EUR, GBP',\n            networks: ['ethereum', 'polygon', 'avalanche', 'binance-smart-chain', 'gnosis'],\n            onClick: () => openRampNetwork()\n        },\n        {\n            logo: PAYTRIE_LOGO,\n            name: 'PayTrie',\n            type: 'Bank Transfer',\n            fees: '1% (min. $2 CAD)',\n            limits: '$2,000CAD/day',\n            currencies: 'CAD',\n            networks: ['ethereum', 'polygon', 'binance-smart-chain'],\n            onClick: () => openPayTrie()\n        },\n        {\n            logo: TRANSAK_LOGO,\n            name: 'Transak',\n            type: 'Credit/Debit card and Bank Transfer (methods availability depends on location)',\n            fees: 'from 0.5%',\n            limits: 'up to 15,000 EUR/day',\n            currencies: 'GBP, EUR, USD and many more',\n            networks: ['ethereum', 'polygon', 'avalanche', 'arbitrum', 'binance-smart-chain', 'moonriver', 'moonbeam', 'optimism'],\n            onClick: () => openTransak()\n        }\n    ];\n\n    const shouldBeDisabled = (networks) => {\n        return networks.includes(networkDetails.id) ? null : 'disabled'; \n    };\n\n    return (\n        <div id=\"providers\">\n            {\n                providers.map(({ logo, name, type, fees, limits, currencies, networks, onClick }) =>\n                \n                    <div className={`provider ${shouldBeDisabled(networks)}`} key={name} onClick={onClick}>\n                        <div className=\"logo\">\n                            <img src={logo} alt={name}></img>\n                        </div>\n                        { isLoading.includes(name) ? <div> <Loading/> </div> :\n                        <div className=\"details\">\n                            <div className=\"type\">\n                                { type }\n                            </div>\n                            <div className=\"fees\">\n                                Fees: { fees }\n                            </div>\n                            <div className=\"limits\">\n                                Limits: { limits }\n                            </div>\n                            <div className=\"currencies\">\n                                Currencies: { currencies }\n                            </div>\n                        </div>\n                        }\n                    </div>\n                )\n            }\n            {\n                networkDetails.id !== 'ethereum' ? \n                    <div id=\"network-warning\">\n                        <b>NOTE:</b> Some deposit methods are unavailable on <b>{networkDetails.name}</b>. Switch to Ethereum for the widest support.\n                    </div>\n                    :\n                    null\n            }\n        </div>\n    )\n}\n","import './Deposit.scss'\n\nimport { useCallback, useEffect, useState } from 'react'\nimport { MdAccountBalance, MdAccountBalanceWallet } from 'react-icons/md'\nimport QRCode from 'qrcode'\nimport TextInput from 'components/common/TextInput/TextInput'\nimport Providers from './Providers/Providers'\n\nimport networks from 'consts/networks'\n\nimport AssetsMigrationBanner from 'components/Wallet/AssetsMigration/AssetsMigrationBanner'\n\nexport default function Deposit({ selectedAcc, selectedNetwork, accounts, addRequest, relayerURL, portfolio, useStorage }) {\n    const networkDetails = networks.find(({ id }) => id === selectedNetwork.id)\n    const [qrCodeUrl, setQrCodeUrl] = useState('')\n\n    const generateQRCode = useCallback(() => {\n        QRCode.toDataURL(selectedAcc, {\n            quality: 1,\n            margin: 1\n        }, (error, url) => {\n            if (error) return console.error(error)\n            setQrCodeUrl(url)\n        })\n    }, [selectedAcc])\n\n    useEffect(() => generateQRCode(), [generateQRCode])\n\n    return (\n        <section id=\"deposit\">\n            <div className=\"panel\">\n                <div className=\"heading\">\n                     <div className=\"title\">\n                        <MdAccountBalanceWallet size={35}/>\n                        Deposit Tokens\n                    </div>\n                    <div className=\"subtitle\">\n                        Direct Deposit\n                    </div>\n                </div>\n                <div className=\"description\">\n                    <TextInput className=\"depositAddress\" label={`Send ${networkDetails.nativeAssetSymbol}, tokens or collectibles (NFTs) to this address:`} value={selectedAcc} copy/>\n                    <img id=\"qr-code\" alt=\"QR Code\" src={qrCodeUrl}></img>\n                </div>\n                <div id=\"networks\">\n                    Following networks supported on this address:\n                    <div className=\"list\">\n                        {\n                            networks.filter(n => !n.hide).map(({ id, icon, name }) => (\n                                <div className=\"network\" key={id}>\n                                    <div className=\"icon\" style={{backgroundImage: `url(${icon})`}}></div>\n                                    <div className=\"name\">{ name }</div>\n                                </div>\n                            ))\n                        }\n                    </div>\n                </div>\n                <AssetsMigrationBanner\n                    selectedNetwork={selectedNetwork}\n                    selectedAccount={selectedAcc}\n                    accounts={accounts}\n                    addRequest={addRequest}\n                    linkMargin={true}\n                    relayerURL={relayerURL}\n                    portfolio={portfolio}\n                    useStorage={useStorage}\n                />\n            </div>\n            <div className=\"panel\">\n                <div className=\"heading\">\n                    <div className=\"title\">\n                        <MdAccountBalance size={35}/>\n                        Fiat Currency\n                    </div>\n                    <div className=\"subtitle\">\n                        Credit Card & Bank Transfer\n                    </div>\n                </div>\n                <div className=\"description\">\n                    Deposit with credit card to your account directly using one of our partners\n                </div>\n                <Providers walletAddress={selectedAcc} networkDetails={networkDetails} relayerURL={relayerURL} portfolio={portfolio}/>\n            </div>\n        </section>\n    )\n}\n","import { TrezorSubprovider } from '@0x/subproviders/lib/src/subproviders/trezor' // https://github.com/0xProject/0x-monorepo/issues/1400\nimport TrezorConnect from '@trezor/connect-web'\nimport { ethers } from 'ethers'\nimport HDNode from 'hdkey'\nimport { LedgerSubprovider } from '@0x/subproviders/lib/src/subproviders/ledger' // https://github.com/0xProject/0x-monorepo/issues/1400\nimport { ledgerEthereumBrowserClientFactoryAsync } from '@0x/subproviders/lib/src' // https://github.com/0xProject/0x-monorepo/issues/1400\nimport { ledgerSignMessage, ledgerSignTransaction, ledgerSignMessage712, ledgerGetAddresses } from './ledgerWebHID'\nimport { \n  latticeInit, \n  latticeConnect, \n  latticeSignMessage, \n  latticeSignTransaction, \n  latticeGetAddresses, \n  latticeSignMessage712\n } from 'lib/lattice'\nimport { _TypedDataEncoder } from 'ethers/lib/utils'\nimport { getProvider } from 'lib/provider'\nimport networks from 'consts/networks'\n\nlet wallets = {}\n\n// opts\n// passphrase: string\n// noCache: boolean\nexport function getWallet({ signer, signerExtra, chainId }, opts = {}) {\n  const id = `${signer.address || signer.one}${chainId}`\n  if (wallets[id]) return wallets[id]\n  return wallets[id] = getWalletNew({ signer, signerExtra, chainId }, opts)\n}\n\nfunction getWalletNew({ chainId, signer, signerExtra }, opts) {\n  if (signerExtra && signerExtra.type === 'trezor') {\n    TrezorConnect.manifest({\n      email: 'contactus@ambire.com',\n      appUrl: 'https://wallet.ambire.com'\n    })\n    const providerTrezor = new TrezorSubprovider({\n      trezorConnectClientApi: TrezorConnect,\n      networkId: chainId\n    })\n    providerTrezor._initialDerivedKeyInfo = getInitialDerivedKeyInfo(signerExtra)\n    // for Trezor/ledger, alternatively we can shim using https://www.npmjs.com/package/web3-provider-engine and then wrap in Web3Provider\n    return {\n      signMessage: hash => providerTrezor.signPersonalMessageAsync(ethers.utils.hexlify(hash), signer.address),\n      signTransaction: params => providerTrezor.signTransactionAsync({ ...params, from: signer.address }),\n      sendTransaction: async (transaction) => {\n        const network = networks.find(n => n.chainId === transaction.chainId)\n        if (!network) throw Error('no network found for chainId : ' + transaction.chainId)\n        const broadcastProvider = await getProvider(network.id)\n        if (!broadcastProvider) throw Error('no provider found for network : ' + network.id)\n\n        transaction.nonce = ethers.utils.hexlify(await broadcastProvider.getTransactionCount(transaction.from))\n        const gas = ethers.utils.hexlify(transaction.gas || transaction.gasLimit)\n        transaction.gasPrice = ethers.utils.hexlify(transaction.gasPrice)\n        \n        transaction = {\n          ...transaction,\n          gas // trezor params requires gas prop\n          // no chainId prop but chainId already known by providerTrezor\n        }\n        \n        const signedTx = await providerTrezor.signTransactionAsync(transaction)\n        \n        return broadcastProvider.sendTransaction(signedTx)\n      },\n      isConnected: async (matchAddress) => { // chain is provided to trezor. Not necessary to check network\n        const addresses = await providerTrezor.getAccountsAsync(100)\n        return addresses.map(i => i.toLowerCase()).includes(matchAddress.toLowerCase())\n      },\n      _signTypedData: async (domain, types, value) => {\n        \n        const domainSeparator = _TypedDataEncoder.hashDomain(domain)\n        const hashStructMessage = _TypedDataEncoder.hashStruct(_TypedDataEncoder.getPrimaryType(types), types, value)\n        const data = _TypedDataEncoder.getPayload(domain, types, value)\n        const initialDerivedKeyInfo = await providerTrezor._initialDerivedKeyInfoAsync()\n        const derivedKeyInfo = providerTrezor._findDerivedKeyInfoForAddress(initialDerivedKeyInfo, signer.address)\n        const path = derivedKeyInfo.derivationPath\n\n        const response = await providerTrezor._trezorConnectClientApi.ethereumSignTypedData({\n          path,\n          data,\n          metamask_v4_compat: true,\n          domain_separator_hash: domainSeparator,\n          message_hash: hashStructMessage\n        })\n\n        if (response.success) {\n          return `${response.payload.signature}`;\n        } else {\n            throw new Error(response.payload.error);\n        }\n      }\n    }\n  } else if (signerExtra && signerExtra.type === 'ledger') {\n    if (signerExtra.transportProtocol === 'webHID') {\n      return {\n        signMessage: hash => ledgerSignMessage(ethers.utils.hexlify(hash), signer.address),\n        signTransaction: params => ledgerSignTransaction(params, chainId),\n        sendTransaction: async (transaction) => {\n          const network = networks.find(n => n.chainId === transaction.chainId)\n          if (!network) throw Error('no network found for chainId : ' + transaction.chainId)\n          const provider = await getProvider(network.id)\n          if (!provider) throw Error('no provider found for network : ' + network.id)\n\n          transaction.nonce = ethers.utils.hexlify(await provider.getTransactionCount(transaction.from))\n\n          const signedTx = await ledgerSignTransaction(transaction, transaction.chainId)\n\n          return provider.sendTransaction(signedTx)\n        },\n        isConnected: async (matchAddress) => { // chain is provided to ledger. Not necessary to check network\n          const addresses = await ledgerGetAddresses()\n          if (addresses && addresses[0]) {\n            if (matchAddress) {\n              return !!addresses.find(a => a.toLowerCase() === matchAddress.toLowerCase())\n            }\n            return true\n          }\n          return false\n        },\n        _signTypedData: (domain, types, value) => {\n          const domainSeparator = _TypedDataEncoder.hashDomain(domain)\n          const hashStructMessage = _TypedDataEncoder.hashStruct(_TypedDataEncoder.getPrimaryType(types), types, value)\n          return ledgerSignMessage712(domainSeparator, hashStructMessage, signer.address)\n        }\n      }\n    } else {\n      const provider = new LedgerSubprovider({\n        networkId: chainId,\n        ledgerEthereumClientFactoryAsync: ledgerEthereumBrowserClientFactoryAsync,\n        baseDerivationPath: signerExtra.info.baseDerivationPath\n      })\n      return {\n        signMessage: hash => provider.signPersonalMessageAsync(ethers.utils.hexlify(hash), signer.address),\n        signTransaction: params => provider.signTransactionAsync({ ...params, from: signer.address }),\n        sendTransaction: async () => {\n          throw Error('Please use a chrome based browser to use Ledger')\n        },\n        isConnected: async (matchAddress) => { // chain is provided to ledger. Not necessary to check network\n          const addresses = await provider.getAccountsAsync(1)\n          return addresses.map(i => i.toLowerCase()).includes(matchAddress.toLowerCase())\n        },\n        _signTypedData: (domain, types, value) => {\n          throw Error('Please, use a chrome based browser to use 721 Typed signatures')\n        }\n      }\n    }\n  } else if (signerExtra && signerExtra.type === 'Lattice') {\n    return {\n      signMessage: async hash => {\n        return await wrapLatticeError(async hash => {\n          const { commKey, deviceId } = signerExtra\n          const client = latticeInit(commKey)\n          const {isPaired, errConnect } = await latticeConnect(client, deviceId)\n\n          if (errConnect) throw new Error(errConnect.message || errConnect)\n\n          if (!isPaired) {\n            // Canceling the visualization of the secret code on the device's screen.\n            client.pair('')\n            throw new Error('The Lattice device is not paired! Please re-add your account!')\n          }\n\n          const { signedMsg, errSignMessage } = await latticeSignMessage(client, hash)\n          if (errSignMessage) throw new Error(errSignMessage)\n\n          return signedMsg\n        }, [hash])\n      },\n      signTransaction: async params => {\n        return await wrapLatticeError( async params => {\n          const { commKey, deviceId } = signerExtra\n          const client = latticeInit(commKey)\n          const {isPaired, errConnect } = await latticeConnect(client, deviceId)\n\n          if (errConnect) throw new Error(errConnect.message || errConnect)\n\n          if (!isPaired) {\n            // Canceling the visualization of the secret code on the device's screen.\n            client.pair('')\n            throw new Error('The Lattice device is not paired! Please re-add your account!')\n          }\n\n          const { serializedSigned, errSignTxn } = await latticeSignTransaction(client, params, chainId)\n          if (errSignTxn) throw new Error(errSignTxn)\n\n          return serializedSigned\n        }, [params])\n      },\n      sendTransaction: async transaction => { \n        return await wrapLatticeError(async (transaction) => {\n          const network = networks.find(n => n.chainId === transaction.chainId)\n          if (!network) throw Error('no network found for chainId : ' + transaction.chainId)\n          const broadcastProvider = await getProvider(network.id)\n          if (!broadcastProvider) throw Error('no provider found for network : ' + network.id)\n          transaction.nonce = ethers.utils.hexlify(await broadcastProvider.getTransactionCount(transaction.from))\n          const { commKey, deviceId } = signerExtra\n          const client = latticeInit(commKey)\n          const { isPaired, errConnect } = await latticeConnect(client, deviceId)\n\n          if (errConnect) throw new Error(errConnect.message || errConnect)\n\n          if (!isPaired) {\n            // Canceling the visualization of the secret code on the device's screen.\n            client.pair('')\n            throw new Error('The Lattice device is not paired! Please re-add your account!')\n          }\n\n          const { serializedSigned, errSignTxn } = await latticeSignTransaction(client, transaction, chainId)\n          if (errSignTxn) throw new Error(errSignTxn)\n\n          return broadcastProvider.sendTransaction(serializedSigned)\n        }, [transaction])\n      },\n      isConnected: async matchAddress => { \n        return await wrapLatticeError(async (matchAddress) => {\n          let addresses = null\n\n          const { commKey, deviceId } = signerExtra\n          const client = latticeInit(commKey)\n          const { isPaired, errConnect } = await latticeConnect(client, deviceId)\n\n          if (errConnect) throw new Error(errConnect.message || errConnect)\n\n          if (!isPaired) {\n            // Canceling the visualization of the secret code on the device's screen.\n            client.pair('')\n            throw new Error('The Lattice device is not paired! Please re-add your account!')\n          }\n\n          const { res, errGetAddresses } = await latticeGetAddresses(client)\n          if (errGetAddresses) { \n            throw new Error(`Lattice: ${errGetAddresses}`, { error: true })\n          }\n\n          addresses = res\n          return addresses.map(i => i.toLowerCase()).includes(matchAddress.toLowerCase())\n        }, [matchAddress])\n    },\n    _signTypedData: async (domain, types, value) => {\n      return await wrapLatticeError(async (domain, types, value) => {\n        const payload = _TypedDataEncoder.getPayload(domain, types, value)\n        const { commKey, deviceId } = signerExtra\n        const client = latticeInit(commKey)\n        const {isPaired, errConnect } = await latticeConnect(client, deviceId)\n\n        if (errConnect) throw new Error(errConnect.message || errConnect)\n\n        if (!isPaired) {\n          // Canceling the visualization of the secret code on the device's screen.\n          client.pair('')\n          throw new Error('The Lattice device is not paired! Please re-add your account!')\n        }\n\n        const { signedMsg, errSignMessage } = await latticeSignMessage712(client, payload)\n        if (errSignMessage) throw new Error(errSignMessage)\n\n        return signedMsg\n      }, [domain, types, value])\n    }\n  }\n  } else if (signer.address) {\n    if (!window.ethereum) throw new Error('No web3 support detected in your browser: if you created this account through MetaMask, please install it.')\n    // NOTE: for metamask, use `const provider = new ethers.providers.Web3Provider(window.ethereum)`\n    // 'any' is explained here: https://github.com/ethers-io/ethers.js/issues/1107\n    const provider = new ethers.providers.Web3Provider(window.ethereum, 'any')\n\n    const signerObject = provider.getSigner(signer.address)\n\n    signerObject.isConnected = async (matchAddress, matchChain) => {\n      const accounts = await provider.listAccounts()\n\n      let match = true\n      if (!!(accounts.length)) {\n        if (matchAddress) {\n          match = !!accounts.find(a => a.toLowerCase() === matchAddress.toLowerCase())\n        }\n        if (matchChain) {\n          const { chainId } = await provider.getNetwork()\n          match = match && chainId === matchChain\n        }\n      } else {\n        match = false\n      }\n      return match\n    }\n\n    return signerObject\n  } else if (signer.one) {\n    throw new Error('getWallet not applicable for QuickAccounts: use primaryKeyBackup with the passphrase and /second-sig')\n  } else {\n    throw new Error('unknown signer type')\n  }\n}\n\nfunction getInitialDerivedKeyInfo(signerExtra) {\n  return {\n    hdKey: HDNode.fromExtendedKey(signerExtra.info.hdKey.xpub),\n    derivationPath: signerExtra.info.derivationPath,\n    baseDerivationPath: signerExtra.info.baseDerivationPath\n  }\n}\n\nasync function wrapLatticeError(fn, arg) {\n  return await fn.apply(this, arg)\n   .catch(e => {\n     throw new Error(`Lattice: ${e.message}`)\n    })\n}\n","import TransportWebHID from '@ledgerhq/hw-transport-webhid'\nimport AppEth from '@ledgerhq/hw-app-eth'\nimport { serialize } from '@ethersproject/transactions'\n\nconst EIP_155_CONSTANT = 35\n\nconst ethUtil = require('ethereumjs-util')\nconst HDNode = require('hdkey')\n\nlet connectedDevices = null\n\nexport const PARENT_HD_PATH = \"44'/60'/0'/0\"\n\nasync function getTransport() {\n  connectedDevices = await TransportWebHID.list()\n  if (connectedDevices.length) {\n    if (connectedDevices[0].opened) {\n      return new TransportWebHID(connectedDevices[0])\n    } else { // when transport is still not closed and time between 2 requests is short\n      return TransportWebHID.open(connectedDevices[0])\n    }\n  } else {\n    try {\n      return await TransportWebHID.request()\n    } catch (e) {\n      if (e.message.includes('reading \\'open\\'')) {\n        throw new Error('ledger WebHID request denied')\n      }\n      throw new Error('Could not request WebHID ledger: ' + e.message)\n    }\n  }\n}\n\nexport async function ledgerGetAddresses() {\n  const transport = await getTransport()\n  const accounts = await getAccounts(transport)\n  transport.close()\n\n  return accounts.map(a => a.address)\n}\n\nasync function getAccounts(transport) {\n  const parentKeyDerivationPath = `m/${PARENT_HD_PATH}`\n  let ledgerResponse\n  ledgerResponse = await getAddressInternal(transport, parentKeyDerivationPath).then(o => o).catch(err => {\n    if (err.statusCode === 25871 || err.statusCode === 27404) {\n      throw Error('Please make sure your ledger is unlocked and running the Ethereum app. ' + err.message)\n    } else {\n      throw Error('Could not get address from ledger : ' + err)\n    }\n  })\n\n  const hdKey = new HDNode()\n  hdKey.publicKey = Buffer.from(ledgerResponse.publicKey, 'hex')\n  hdKey.chainCode = Buffer.from(ledgerResponse.chainCode, 'hex')\n  const mainAddress = addressOfHDKey(hdKey)\n\n  const initialDerivedKeyInfo = {\n    hdKey,\n    address: mainAddress,\n    derivationPath: parentKeyDerivationPath,\n    baseDerivationPath: PARENT_HD_PATH,\n  }\n\n  // currently we can't get addrs to match with what appears in MM/Ledger live so only one is derived\n  return calculateDerivedHDKeyInfos(initialDerivedKeyInfo, 1)\n}\n\n\nasync function getAddressInternal(transport, parentKeyDerivationPath) {\n  let timeoutHandle\n  const appEth = new AppEth(transport)\n\n  const ledgerTimeout = new Promise((resolve, reject) => {\n    timeoutHandle = setTimeout(() => {\n      return reject(new Error('Device took too long to respond...'))\n    }, 10000)\n  })\n\n  return Promise.race([\n    appEth.getAddress(parentKeyDerivationPath, false, true),\n    ledgerTimeout\n  ]).then((res) => {\n    clearTimeout(timeoutHandle)\n    return res\n  })\n}\n\nexport async function ledgerSignTransaction(txn, chainId) {\n  const transport = await getTransport()\n\n  const fromAddr = txn.from\n\n  const unsignedTxObj = {\n    ...txn,\n    gasLimit: txn.gasLimit || txn.gas,\n    chainId: chainId\n  }\n  delete unsignedTxObj.from\n  delete unsignedTxObj.gas\n\n  let serializedUnsigned = serialize(unsignedTxObj)\n  const accountsData = await getAccounts(transport)\n\n  //Managing only 1 addr for now\n  const address = accountsData[0].address\n\n  let serializedSigned\n  if (address.toLowerCase() === fromAddr.toLowerCase()) {\n    let rsvResponse\n    try {\n      rsvResponse = await new AppEth(transport).signTransaction(accountsData[0].derivationPath, serializedUnsigned.substr(2))\n    } catch (e) {\n      throw new Error('Could not sign transaction ' + e)\n    }\n\n    const intV = parseInt(rsvResponse.v, 16)\n    const signedChainId = Math.floor((intV - EIP_155_CONSTANT) / 2)\n\n    if (signedChainId !== chainId) {\n      throw new Error('Invalid returned V 0x' + rsvResponse.v)\n    }\n\n    delete unsignedTxObj.v\n    serializedSigned = serialize(unsignedTxObj, {\n      r: '0x' + rsvResponse.r,\n      s: '0x' + rsvResponse.s,\n      v: intV\n    })\n  } else {\n    throw new Error('Incorrect address. Are you using the correct account/ledger?')\n  }\n\n  transport.close()\n\n  return serializedSigned\n}\n\nexport async function ledgerSignMessage(hash, signerAddress) {\n  const transport = await getTransport()\n\n  const accountsData = await getAccounts(transport)\n\n  //TODO for multiple accs?\n  const account = accountsData[0]\n\n  let signedMsg\n  if (account.address.toLowerCase() === signerAddress.toLowerCase()) {\n    try {\n      const rsvReply = await new AppEth(transport).signPersonalMessage(account.derivationPath, hash.substr(2))\n      signedMsg = '0x' + rsvReply.r + rsvReply.s + rsvReply.v.toString(16)\n    } catch (e) {\n      throw new Error('Signature denied ' + e.message)\n    }\n  } else {\n    throw new Error('Incorrect address. Are you using the correct account/ledger?')\n  }\n  transport.close()\n  return signedMsg\n}\n\nexport async function ledgerSignMessage712(domainSeparator, hashStructMessage, signerAddress) {\n  const transport = await getTransport()\n\n  const accountsData = await getAccounts(transport)\n\n  //TODO for multiple accs?\n  const account = accountsData[0]\n\n  let signedMsg\n  if (account.address.toLowerCase() === signerAddress.toLowerCase()) {\n    try {\n      const rsvReply = await new AppEth(transport).signEIP712HashedMessage(account.derivationPath, domainSeparator, hashStructMessage)\n      signedMsg = '0x' + rsvReply.r + rsvReply.s + rsvReply.v.toString(16)\n    } catch (e) {\n      throw new Error('Signature denied ' + e.message)\n    }\n  } else {\n    throw new Error('Incorrect address. Are you using the correct account/ledger?')\n  }\n  transport.close()\n  return signedMsg\n}\n\nfunction calculateDerivedHDKeyInfos(initialDerivedKeyInfo, count) {\n  const derivedKeys = []\n  for (let i = 0; i < count; i++) {\n\n    const fullDerivationPath = `m/${initialDerivedKeyInfo.baseDerivationPath}/${i}`\n    const path = `m/${i}`\n    const hdKey = initialDerivedKeyInfo.hdKey.derive(path)\n    const address = addressOfHDKey(hdKey)\n    const derivedKey = {\n      address,\n      hdKey,\n      baseDerivationPath: initialDerivedKeyInfo.baseDerivationPath,\n      derivationPath: fullDerivationPath,\n    }\n\n    derivedKeys.push(derivedKey)\n  }\n  return derivedKeys\n}\n\nexport function addressOfHDKey(hdKey) {\n  const shouldSanitizePublicKey = true\n  const derivedPublicKey = hdKey.publicKey\n  const ethereumAddressUnprefixed = ethUtil\n    .publicToAddress(derivedPublicKey, shouldSanitizePublicKey)\n    .toString('hex')\n  return ethUtil.addHexPrefix(ethereumAddressUnprefixed).toLowerCase()\n}\n","export const ZERO_ADDRESS = '0x0000000000000000000000000000000000000000'\n","import { VELCRO_API_ENDPOINT, ZAPPER_API_KEY } from 'config'\nimport { fetchGet } from 'lib/fetch'\nimport {ZERO_ADDRESS} from 'consts/specialAddresses'\nimport networks from 'consts/networks'\n\nexport default function assetMigrationDetector({ networkId, account }) {\n  if (networks.find(({id}) => id === networkId)?.relayerlessOnly) return Promise.resolve([])\n  if (!account) return Promise.resolve([])// for web accounts\n\n  //First pass\n  return fetchGet(`${VELCRO_API_ENDPOINT}/protocols/tokens/balances?addresses[]=${account}&network=${networkId}&api_key=${ZAPPER_API_KEY}&newBalances=true&available_on_coingecko=true`)\n    .then(velcroResponse => {\n\n      const signer_ = account.toLowerCase()\n      if (!velcroResponse[signer_]) return []\n      if (!velcroResponse[signer_].products[0]) return []\n\n      const filteredAssets = velcroResponse[signer_].products[0].assets;\n\n      //Second pass to get real time data\n      const customTokens = filteredAssets.map(a => ({\n        address: a.tokens[0].address,\n        symbol: a.tokens[0].symbol,\n        decimals: a.tokens[0].decimals,\n      }))\n      const urlCustomTokens = `${VELCRO_API_ENDPOINT}/protocols/tokens/balances?addresses[]=${account}&network=${networkId}&api_key=${ZAPPER_API_KEY}&customTokens=${JSON.stringify(customTokens)}&available_on_coingecko=true`\n      return fetchGet(urlCustomTokens)\n        .then(finalResponse => {\n          const filteredAssets = finalResponse[signer_]?.products[0]?.assets\n\n          return filteredAssets.map(a => {\n            return {\n              name: a.tokens[0].symbol,\n              icon: a.tokens[0].tokenImageUrl,\n              address: a.tokens[0].address.toLowerCase(),\n              native: a.tokens[0].address === ZERO_ADDRESS,\n              decimals: a.tokens[0].decimals,\n              availableBalance: a.tokens[0].balanceRaw,\n              balanceUSD: a.tokens[0].balanceUSD,\n              rate: a.tokens[0].balanceUSD / a.tokens[0].balanceRaw\n            }\n          })\n        })\n        .catch(err => {\n          throw Error('Could not get customToken assets from velcro')\n        })\n    })\n    .catch(err => {\n      throw Error('Could not get assets from velcro')\n    })\n}\n","//Permit definitions\nimport { Interface } from 'ethers/lib/utils'\n\nexport const PERMIT_TYPE_2612 = [\n  { name: \"owner\", type: \"address\" },\n  { name: \"spender\", type: \"address\" },\n  { name: \"value\", type: \"uint256\" },\n  { name: \"nonce\", type: \"uint256\" },\n  { name: \"deadline\", type: \"uint256\" },\n]\n\nexport const PERMIT_TYPE_DAI = [\n  { name: \"holder\", type: \"address\" },\n  { name: \"spender\", type: \"address\" },\n  { name: \"nonce\", type: \"uint256\" },\n  { name: \"expiry\", type: \"uint256\" },\n  { name: \"allowed\", type: \"bool\" },\n]\n\nexport const EIP712DomainWithVersion = [\n  { name: \"name\", type: \"string\" },\n  { name: \"version\", type: \"string\" },\n  { name: \"chainId\", type: \"uint256\" },\n  { name: \"verifyingContract\", type: \"address\" },\n];\n\nexport const EIP712DomainWithoutNameNorVersion = [\n  { name: \"chainId\", type: \"uint256\" },\n  { name: \"verifyingContract\", type: \"address\" },\n];\n\nexport const EIP712Domain = [\n  { name: \"name\", type: \"string\" },\n  { name: \"chainId\", type: \"uint256\" },\n  { name: \"verifyingContract\", type: \"address\" },\n];\n\nexport const EIP712DomainWithSalt = [\n  { name: \"name\", type: \"string\" },\n  { name: \"version\", type: \"string\" },\n  { name: \"verifyingContract\", type: \"address\" },\n  { name: \"salt\", type: \"bytes32\" },\n]\n\nexport const PERMITTABLE_COINS = {\n  1: [\n    // Without version 2\n    { address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48', name: 'USD Coin', version: '2', domainType: EIP712DomainWithVersion, permitType: PERMIT_TYPE_2612 },\n\n    // Without version\n    { address: '0x1f9840a85d5af5bf1d1762f925bdaddc4201f984', name: 'Uniswap', domainType: EIP712Domain, permitType: PERMIT_TYPE_2612 },\n    { address: '0xde30da39c46104798bb5aa3fe8b9e0e1f348163f', name: 'Gitcoin', domainType: EIP712Domain, permitType: PERMIT_TYPE_2612 },\n\n    // Dai\n    { address: '0x6b175474e89094c44da98b954eedeac495271d0f', name: 'Dai Stablecoin', version: '1', domainType: EIP712DomainWithVersion, permitType: PERMIT_TYPE_DAI },\n\n    // Spell Token\n    { address: '0x090185f2135308bad17527004364ebcc2d37e5f6', domainType: EIP712DomainWithoutNameNorVersion, permitType: PERMIT_TYPE_2612 },\n    // Magic Internet Money\n    { address: '0x99d8a9c45b2eca8864373a26d1459e3dff1e17f3', domainType: EIP712DomainWithoutNameNorVersion, permitType: PERMIT_TYPE_2612 },\n\n    // With version 1\n    { address: '0x7fc66500c84a76ad7e9c93437bfc5ac33e2ddae9', name: 'Aave Token', version: '1', domainType: EIP712DomainWithVersion, permitType: PERMIT_TYPE_2612 , nonceFunction: \"_nonces\"},\n    { name: 'AdEx Loyalty', address: '0xd9a4cb9dc9296e111c66dfacab8be034ee2e1c2c', version: '1', domainType: EIP712DomainWithVersion, permitType: PERMIT_TYPE_2612},\n    { name: 'Aave Token', address: '0x7fc66500c84a76ad7e9c93437bfc5ac33e2ddae9', version: '1', domainType: EIP712DomainWithVersion, permitType: PERMIT_TYPE_2612},\n    { name: 'Ambire Wallet Staking Token', address: '0x47cd7e91c3cbaaf266369fe8518345fc4fc12935', version: '1', domainType: EIP712DomainWithVersion, permitType: PERMIT_TYPE_2612},\n    { name: 'ConstitutionDAO', address: '0x7a58c0be72be218b41c608b7fe7c5bb630736c71', version: '1', domainType: EIP712DomainWithVersion, permitType: PERMIT_TYPE_2612},\n    { name: 'Aragon Network Token', address: '0xa117000000f279d81a1d3cc75430faa017fa5a2e', version: '1', domainType: EIP712DomainWithVersion, permitType: PERMIT_TYPE_2612},\n    { name: 'AdEx Staking Token', address: '0xb6456b57f03352be48bf101b46c1752a0813491a', version: '1', domainType: EIP712DomainWithVersion, permitType: PERMIT_TYPE_2612},\n    { name: 'dYdX', address: '0x92d6c1e31e14520e676a687f0a93788b716beff5', version: '1', domainType: EIP712DomainWithVersion, permitType: PERMIT_TYPE_2612},\n    { name: 'Ethereum Name Service', address: '0xc18360217d8f7ab5e7c516566761ea12ce7f9d72', version: '1', domainType: EIP712DomainWithVersion, permitType: PERMIT_TYPE_2612},\n    { name: 'Olympus', address: '0x383518188c0c6d7730d91b2c03a03c837814a899', version: '1', domainType: EIP712DomainWithVersion, permitType: PERMIT_TYPE_2612},\n    { name: '1INCH Token', address: '0x111111111117dc0aa78b770fa6a738034120c302', version: '1', domainType: EIP712DomainWithVersion, permitType: PERMIT_TYPE_2612},\n    { name: 'IceToken', address: '0xf16e81dce15b08f326220742020379b855b87df9', version: '1', domainType: EIP712DomainWithVersion, permitType: PERMIT_TYPE_2612},\n    { name: 'Fei USD', address: '0x956f47f50a910163d8bf957cf5846d573e7f87ca', version: '1', domainType: EIP712DomainWithVersion, permitType: PERMIT_TYPE_2612},\n    { name: 'LUSD Stablecoin', address: '0x5f98805a4e8be255a32880fdec7f6728c6568ba0', version: '1', domainType: EIP712DomainWithVersion, permitType: PERMIT_TYPE_2612},\n    { name: 'Balancer', address: '0xba100000625a3754423978a60c9317c58a424e3d', version: '1', domainType: EIP712DomainWithVersion, permitType: PERMIT_TYPE_2612},\n\n    { name: 'Aave interest bearing AAVE', address: '0xffc97d72e13e01096502cb8eb52dee56f74dad7b', version: '1', domainType: EIP712DomainWithVersion, permitType: PERMIT_TYPE_2612, nonceFunction: \"_nonces\"},\n    { name: 'Aave AMM Market UniBATWETH', address: '0xa1b0edf4460cc4d8bfaa18ed871bff15e5b57eb4', version: '1', domainType: EIP712DomainWithVersion, permitType: PERMIT_TYPE_2612, nonceFunction: \"_nonces\"},\n    { name: 'Aave AMM Market UniWBTCWETH', address: '0xc58f53a8adff2fb4eb16ed56635772075e2ee123', version: '1', domainType: EIP712DomainWithVersion, permitType: PERMIT_TYPE_2612, nonceFunction: \"_nonces\"},\n    { name: 'Aave AMM Market UniUSDCWETH', address: '0x391e86e2c002c70dee155eaceb88f7a3c38f5976', version: '1', domainType: EIP712DomainWithVersion, permitType: PERMIT_TYPE_2612, nonceFunction: \"_nonces\"},\n    { name: 'Aave interest bearing WETH', address: '0x030ba81f1c18d280636f32af80b9aad02cf0854e', version: '1', domainType: EIP712DomainWithVersion, permitType: PERMIT_TYPE_2612, nonceFunction: \"_nonces\"},\n    { name: 'Aave interest bearing DAI', address: '0x028171bca77440897b824ca71d1c56cac55b68a3', version: '1', domainType: EIP712DomainWithVersion, permitType: PERMIT_TYPE_2612, nonceFunction: \"_nonces\"},\n    { name: 'Aave AMM Market UniWBTCUSDC', address: '0x2365a4890ed8965e564b7e2d27c38ba67fec4c6f', version: '1', domainType: EIP712DomainWithVersion, permitType: PERMIT_TYPE_2612, nonceFunction: \"_nonces\"},\n    { name: 'Aave AMM Market UniCRVWETH', address: '0x0ea20e7ffb006d4cfe84df2f72d8c7bd89247db0', version: '1', domainType: EIP712DomainWithVersion, permitType: PERMIT_TYPE_2612, nonceFunction: \"_nonces\"},\n    { name: 'Aave AMM Market UniUNIWETH', address: '0x3d26dcd840fcc8e4b2193ace8a092e4a65832f9f', version: '1', domainType: EIP712DomainWithVersion, permitType: PERMIT_TYPE_2612, nonceFunction: \"_nonces\"},\n    { name: 'Aave interest bearing GUSD', address: '0xd37ee7e4f452c6638c96536e68090de8cbcdb583', version: '1', domainType: EIP712DomainWithVersion, permitType: PERMIT_TYPE_2612, nonceFunction: \"_nonces\"},\n    { name: 'Aave AMM Market UniMKRWETH', address: '0x370adc71f67f581158dc56f539df5f399128ddf9', version: '1', domainType: EIP712DomainWithVersion, permitType: PERMIT_TYPE_2612, nonceFunction: \"_nonces\"},\n    { name: 'Aave interest bearing CRV', address: '0x8dae6cb04688c62d939ed9b68d32bc62e49970b1', version: '1', domainType: EIP712DomainWithVersion, permitType: PERMIT_TYPE_2612, nonceFunction: \"_nonces\"},\n    { name: 'Aave AMM Market USDT', address: '0x17a79792fe6fe5c95dfe95fe3fcee3caf4fe4cb7', version: '1', domainType: EIP712DomainWithVersion, permitType: PERMIT_TYPE_2612, nonceFunction: \"_nonces\"},\n    { name: 'Aave AMM Market UniSNXWETH', address: '0x38e491a71291cd43e8de63b7253e482622184894', version: '1', domainType: EIP712DomainWithVersion, permitType: PERMIT_TYPE_2612, nonceFunction: \"_nonces\"},\n    { name: 'Aave interest bearing YFI', address: '0x5165d24277cd063f5ac44efd447b27025e888f37', version: '1', domainType: EIP712DomainWithVersion, permitType: PERMIT_TYPE_2612, nonceFunction: \"_nonces\"},\n    { name: 'Aave interest bearing SNX', address: '0x35f6b052c598d933d69a4eec4d04c73a191fe6c2', version: '1', domainType: EIP712DomainWithVersion, permitType: PERMIT_TYPE_2612, nonceFunction: \"_nonces\"},\n    { name: 'Aave AMM Market USDC', address: '0xd24946147829deaa935be2ad85a3291dbf109c80', version: '1', domainType: EIP712DomainWithVersion, permitType: PERMIT_TYPE_2612, nonceFunction: \"_nonces\"},\n    { name: 'Aave AMM Market DAI', address: '0x79be75ffc64dd58e66787e4eae470c8a1fd08ba4', version: '1', domainType: EIP712DomainWithVersion, permitType: PERMIT_TYPE_2612, nonceFunction: \"_nonces\"},\n    { name: 'Aave interest bearing USDT', address: '0x3ed3b47dd13ec9a98b44e6204a523e766b225811', version: '1', domainType: EIP712DomainWithVersion, permitType: PERMIT_TYPE_2612, nonceFunction: \"_nonces\"},\n    { name: 'Aave interest bearing RAI', address: '0xc9bc48c72154ef3e5425641a3c747242112a46af', version: '1', domainType: EIP712DomainWithVersion, permitType: PERMIT_TYPE_2612, nonceFunction: \"_nonces\"},\n    { name: 'Aave interest bearing BAL', address: '0x272f97b7a56a387ae942350bbc7df5700f8a4576', version: '1', domainType: EIP712DomainWithVersion, permitType: PERMIT_TYPE_2612, nonceFunction: \"_nonces\"},\n    { name: 'Aave interest bearing BAT', address: '0x05ec93c0365baaeabf7aeffb0972ea7ecdd39cf1', version: '1', domainType: EIP712DomainWithVersion, permitType: PERMIT_TYPE_2612, nonceFunction: \"_nonces\"},\n    { name: 'Aave interest bearing USDC', address: '0xbcca60bb61934080951369a648fb03df4f96263c', version: '1', domainType: EIP712DomainWithVersion, permitType: PERMIT_TYPE_2612, nonceFunction: \"_nonces\"},\n    { name: 'Aave AMM Market BptBALWETH', address: '0xd109b2a304587569c84308c55465cd9ff0317bfb', version: '1', domainType: EIP712DomainWithVersion, permitType: PERMIT_TYPE_2612, nonceFunction: \"_nonces\"},\n    { name: 'Aave interest bearing KNC', address: '0x39c6b3e42d6a679d7d776778fe880bc9487c2eda', version: '1', domainType: EIP712DomainWithVersion, permitType: PERMIT_TYPE_2612, nonceFunction: \"_nonces\"},\n    { name: 'Aave interest bearing MANA', address: '0xa685a61171bb30d4072b338c80cb7b2c865c873e', version: '1', domainType: EIP712DomainWithVersion, permitType: PERMIT_TYPE_2612, nonceFunction: \"_nonces\"},\n    { name: 'Aave interest bearing XSUSHI', address: '0xf256cc7847e919fac9b808cc216cac87ccf2f47a', version: '1', domainType: EIP712DomainWithVersion, permitType: PERMIT_TYPE_2612, nonceFunction: \"_nonces\"},\n    { name: 'Aave interest bearing TUSD', address: '0x101cc05f4a51c0319f570d5e146a8c625198e636', version: '1', domainType: EIP712DomainWithVersion, permitType: PERMIT_TYPE_2612, nonceFunction: \"_nonces\"},\n    { name: 'Aave interest bearing ENJ', address: '0xac6df26a590f08dcc95d5a4705ae8abbc88509ef', version: '1', domainType: EIP712DomainWithVersion, permitType: PERMIT_TYPE_2612, nonceFunction: \"_nonces\"},\n\n  ],\n  137: [\n    //Not working, only to test UX behavior on polygon\n    { name: 'Governance OHM', address: '0xd8ca34fd379d9ca3c6ee3b3905678320f5b45195', version: '1', domainType: EIP712DomainWithVersion, permitType: PERMIT_TYPE_2612},\n    { name: 'Frax', address: '0x45c32fa6df82ead1e2ef74d17b76547eddfaff89', version: '1', domainType: EIP712DomainWithVersion, permitType: PERMIT_TYPE_2612},\n    { name: 'Aave Matic Market WBTC', address: '0x5c2ed810328349100a66b82b78a1791b101c9d61', version: '1', domainType: EIP712DomainWithVersion, permitType: PERMIT_TYPE_2612},\n\n    { name: 'Aave Matic Market WETH', address: '0x28424507fefb6f7f8e9d3860f56504e4e5f5f390', version: '1', domainType: EIP712DomainWithVersion, permitType: PERMIT_TYPE_2612},\n    { name: 'Aave Matic Market USDC', address: '0x1a13f4ca1d028320a707d99520abfefca3998b7f', version: '1', domainType: EIP712DomainWithVersion, permitType: PERMIT_TYPE_2612},\n    { name: 'Aave Matic Market AAVE', address: '0x1d2a0e5ec8e5bbdca5cb219e649b565d8e5c3360', version: '1', domainType: EIP712DomainWithVersion, permitType: PERMIT_TYPE_2612},\n    { name: 'Synapse', address: '0xf8f9efc0db77d8881500bb06ff5d6abc3070e695', version: '1', domainType: EIP712DomainWithVersion, permitType: PERMIT_TYPE_2612},\n\n    { name: 'Aave Matic Market WMATIC', address: '0x8df3aad3a84da6b69a4da8aec3ea40d9091b2ac4', version: '1', domainType: EIP712DomainWithVersion, permitType: PERMIT_TYPE_2612},\n    { name: 'Aave Matic Market USDT', address: '0x60d55f02a771d515e077c9c2403a1ef324885cec', version: '1', domainType: EIP712DomainWithVersion, permitType: PERMIT_TYPE_2612},\n    { name: 'Klima DAO', address: '0x4e78011ce80ee02d2c3e649fb657e45898257815', version: '1', domainType: EIP712DomainWithVersion, permitType: PERMIT_TYPE_2612},\n\n    { name: 'Quickswap', address: '0xb5c064f955d8e7f38fe0460c556a72987494ee17', domainType: EIP712Domain, permitType: PERMIT_TYPE_2612},\n    { name: 'Route', address: '0x16eccfdbb4ee1a85a33f3a9b21175cd7ae753db4', domainType: EIP712Domain, permitType: PERMIT_TYPE_2612},\n\n    { address: '0x8f3cf7ad23cd3cadbd9735aff958023239c6a063', name: '(PoS) Dai Stablecoin', version: '1', salt: '0x0000000000000000000000000000000000000000000000000000000000000089', domainType: EIP712DomainWithSalt, permitType: PERMIT_TYPE_DAI, nonceFunction: 'getNonce'},\n    { address: '0x2791bca1f2de4661ed88a30c99a7a9449aa84174', name: 'USD Coin (PoS)', version: '1', salt: '0x0000000000000000000000000000000000000000000000000000000000000089', domainType: EIP712DomainWithSalt, permitType: PERMIT_TYPE_2612 },\n  ],\n  56: [\n    { name: '1INCH Token', address: '0x111111111117dc0aa78b770fa6a738034120c302', version: '1', domainType: EIP712DomainWithVersion, permitType: PERMIT_TYPE_2612},\n    { name: 'Frax', address: '0x90c97f71e18723b0cf0dfa30ee176ab653e89f40', version: '1', domainType: EIP712DomainWithVersion, permitType: PERMIT_TYPE_2612},\n    { name: 'JADE', address: '0x7ad7242a99f21aa543f9650a56d141c57e4f6081', version: '1', domainType: EIP712DomainWithVersion, permitType: PERMIT_TYPE_2612},\n    { name: 'Templar Token', address: '0x19e6bfc1a6e4b042fb20531244d47e252445df01', version: '1', domainType: EIP712DomainWithVersion, permitType: PERMIT_TYPE_2612},\n\n  ]\n}\n\nexport const ERC20PermittableInterface = new Interface([\n  \"function nonces(address owner) external view returns (uint256)\",\n  \"function _nonces(address owner) external view returns (uint256)\",\n  \"function getNonce(address owner) external view returns (uint256)\",\n\n  \"function name() external view returns (string)\",\n  \"function symbol() external view returns (string)\",\n  \"function decimals() external view returns (uint)\",\n  \"function balanceOf(address) external view returns (uint)\",\n\n  //2612 permit\n  \"function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s)\",\n  //Dai permit\n  \"function permit(address holder, address spender, uint256 nonce, uint256 expiry, bool allowed, uint8 v, bytes32 r, bytes32 s)\",\n  \"function transferFrom(address from, address to, uint256 amount) view returns (bool)\",\n  \"function transfer(address to, uint256 amount) view returns (bool)\",\n  \"function approve(address spender, uint256 amount) returns (bool)\",\n  \"function allowance(address owner, address spender) view returns (uint)\"\n])\n","import './AssetsMigration.scss'\n\nimport BigNumber from 'bignumber.js'\nimport { useCallback, useEffect, useRef, useState } from 'react'\nimport assetMigrationDetector from 'lib/assetMigrationDetector'\nimport { ZERO_ADDRESS } from 'consts/specialAddresses'\nimport AmbireLoading from 'components/common/Loading/AmbireLoading'\nimport { Checkbox, TextInput, Button, Loading } from 'components/common'\nimport { GiToken } from 'react-icons/gi'\nimport { fetchGet } from 'lib/fetch'\nimport { MdClose, MdOutlineNavigateNext, MdOutlineAddCircleOutline, MdCancel } from 'react-icons/md'\nimport { Contract, ethers } from 'ethers'\nimport { ERC20PermittableInterface } from 'consts/permittableCoins'\nimport { getProvider } from 'lib/provider'\nimport { GAS_SPEEDS } from 'ambire-common/src/constants/gasSpeeds'\n\nconst TRANSFER_CONSUMPTION = 52000 // higher avg, 21000 included\n\nconst AssetsMigrationSelector = ({ signerAccount, identityAccount, network, setIsSelectionConfirmed, setStep, portfolio, relayerURL, setModalButtons, hideModal, setSelectedTokensWithAllowance, setGasSpeed, setStepperSteps, hidden }) => {\n\n  const [selectableTokens, setSelectableTokens] = useState([])\n  const [selectableTokensUserInputs, setSelectableTokensUserInputs] = useState([])\n\n  const [nativeToken, setNativeToken] = useState(null)\n\n  const [isLoading, setIsLoading] = useState(true)\n  const [failedImg, setFailedImg] = useState([])\n  const [gasData, setGasData] = useState(null)\n  const [estimatedGasFees, setEstimatedGasFees] = useState(null)\n  const [selectedGasSpeed, setSelectedGasSpeed] = useState('fast')\n  const [tokensAllowances, setTokenAllowances] = useState([])\n\n  const [isAddCustomTokenFormShown, setIsAddCustomTokenFormShown] = useState(false)\n  const [isCustomTokenPending, setIsCustomTokenPending] = useState(false)\n  const [customTokenAddress, setCustomTokenAddress] = useState('')\n  const [customTokenError, setCustomTokenError] = useState('')\n\n  const customTokenInput = useRef()\n  const inputRefs = useRef({})\n\n  // update signerTokens state helper\n  const updateSelectableTokenUserInputs = useCallback((address, callback) => {\n    const index = selectableTokensUserInputs.findIndex(a => a.address === address)\n\n    if (index !== -1) {\n      const updated = callback(selectableTokensUserInputs[index])\n\n      setSelectableTokensUserInputs([\n        ...selectableTokensUserInputs.slice(0, index),\n        updated,\n        ...selectableTokensUserInputs.slice(index + 1),\n      ])\n    }\n  }, [selectableTokensUserInputs])\n\n  // Include/Exclude token in migration\n  const toggleTokenSelection = useCallback((address, minHumanAmount = null) => {\n\n    // focusing input fields on selection\n    const index = selectableTokens\n      .sort((a, b) => a.name < b.name ? -1 : 1)\n      .findIndex(t => t.address === address)\n    inputRefs.current[index]?.focus()\n\n    updateSelectableTokenUserInputs(address, old => {\n      let updated = {\n        ...old,\n        selected: !old.selected\n      }\n      if (minHumanAmount) {\n\n        // let newHumanAmount = humanAmount.replace(/\\.?0+$/g, '')\n        const currentHumanAmount = selectableTokensUserInputs.find(t => t.address === address)?.humanAmount\n        if (minHumanAmount > currentHumanAmount) {\n          const decimals = selectableTokens.find(t => t.address === address)?.decimals\n\n          updated.amount = new BigNumber(minHumanAmount).multipliedBy(10 ** decimals).toFixed(0)\n          updated.humanAmount = minHumanAmount\n        }\n      }\n      return updated\n    })\n  }, [selectableTokens, updateSelectableTokenUserInputs, selectableTokensUserInputs])\n\n  const addCustomToken = useCallback(() => {\n\n    const provider = getProvider(network.id)\n\n    if (!ethers.utils.isAddress(customTokenAddress)) {\n      setCustomTokenError('invalid custom token address')\n      return\n    }\n\n    if (selectableTokens.find(t => t.address.toLowerCase() === customTokenAddress.toLowerCase())) {\n      setCustomTokenAddress('')\n      setIsAddCustomTokenFormShown(false)\n      return\n    }\n\n    const tokenContract = new Contract(customTokenAddress, ERC20PermittableInterface, provider)\n\n    const symbolPromise = tokenContract.symbol().catch(() => setCustomTokenError('Could not get symbol of token ' + customTokenAddress))\n    const decimalsPromise = tokenContract.decimals().catch(() => setCustomTokenError('Could not get decimals of token ' + customTokenAddress))\n    const allowancePromise = tokenContract.allowance(signerAccount, identityAccount).catch(() => setCustomTokenError('Could not get allowance for token ' + customTokenAddress))\n    const availableSignerBalancePromise = tokenContract.balanceOf(signerAccount).catch(() => setCustomTokenError('Could not get balance for token ' + customTokenAddress))\n\n    setIsCustomTokenPending(true)\n    setCustomTokenError(null)\n\n    Promise.all([\n      symbolPromise,\n      decimalsPromise,\n      allowancePromise,\n      availableSignerBalancePromise]\n    ).then((promises) => {\n\n      const [symbol, decimals, allowance, signerBalance] = promises\n\n      setIsCustomTokenPending(false)\n\n      if (symbol && decimals && allowance !== null && signerBalance !== null) {\n        setCustomTokenAddress('')\n        setIsAddCustomTokenFormShown(false)\n\n        setSelectableTokens(old => {\n          return [\n            ...old,\n            {\n              address: customTokenAddress,\n              name: symbol,\n              decimals: decimals.toNumber(),\n              icon: null,\n              rate: 0,\n              native: false,\n              availableBalance: signerBalance.toString(),\n              balanceUSD: 0,\n            }\n          ]\n        })\n\n        setSelectableTokensUserInputs(old => {\n          return [\n            ...old,\n            {\n              address: customTokenAddress,\n              selectedAmount: 0,\n              amount: signerBalance.toString(),\n              humanAmount: new BigNumber(signerBalance.toString()).div(10 ** decimals.toString()).toFixed(),\n              selected: signerBalance.gt(0)\n            }\n          ]\n        })\n\n        setTokenAllowances(old => {\n          return [\n            ...old,\n            {\n              address: customTokenAddress,\n              allowance: 0\n            }\n          ]\n        })\n      }\n    }).catch(err => {\n      console.log('err getting custom token data', err)\n      setIsCustomTokenPending(false)\n    })\n  }, [network, customTokenAddress, signerAccount, identityAccount, setCustomTokenError, selectableTokens])\n\n  const canCoverGasFees = useCallback((speed) => {\n    if (!estimatedGasFees) return false\n    const nativeToSpend = selectableTokensUserInputs.find(t => t.address === ZERO_ADDRESS && t.selected)?.amount || 0\n\n    return new BigNumber(estimatedGasFees.gasFees[speed].signerTransactionsCost)\n      .plus(nativeToSpend)\n      .lte(nativeToken.availableBalance || 0)\n\n  }, [selectableTokensUserInputs, estimatedGasFees, nativeToken])\n\n  const getMaxTransferableNative = useCallback((speed) => {\n    return new BigNumber(nativeToken.availableBalance).minus(estimatedGasFees.gasFees[speed].signerTransactionsCost)\n  }, [estimatedGasFees, nativeToken])\n\n  const consolidatedSelectableTokens = (selectableTokens, selectableTokensUserInputs = [], tokensAllowances = []) => {\n    return selectableTokens.map(st => {\n      return {\n        ...st,\n        ...selectableTokensUserInputs.find(t => t.address === st.address),\n        ...tokensAllowances.find(t => t.address === st.address)\n      }\n    })\n  }\n\n  // select tokens to migrate\n  const confirmTokenSelection = useCallback(async () => {\n\n    const tokensToMigrate = consolidatedSelectableTokens(selectableTokens, selectableTokensUserInputs, tokensAllowances).filter(a => a.selected)\n    if (!tokensToMigrate.length) return\n\n    setSelectedTokensWithAllowance(tokensToMigrate.map(a => {\n      return {\n        ...a,\n      }\n    }))\n\n    setIsSelectionConfirmed(true)\n    if (tokensToMigrate.find(a => a.address === ZERO_ADDRESS)) {\n      setStep(1)\n    } else {\n      setStep(2)\n    }\n\n    setGasSpeed(selectedGasSpeed)\n  }, [selectableTokens, selectableTokensUserInputs, tokensAllowances, setSelectedTokensWithAllowance, setIsSelectionConfirmed, setStep, setGasSpeed, selectedGasSpeed])\n\n  useEffect(() => {\n    if (isAddCustomTokenFormShown) {\n      customTokenInput.current.focus()\n    }\n  }, [isAddCustomTokenFormShown])\n\n  useEffect(() => {\n    setNativeToken(selectableTokens.find(t => t.native))\n  }, [selectableTokens])\n\n  // fetch selectable tokens\n  useEffect(() => {\n\n    setIsLoading(true)\n    setSelectableTokens([])\n\n    assetMigrationDetector({ networkId: network.id, account: signerAccount }).then(assets => {\n      setSelectableTokens(\n        assets.map(t => {\n          return {\n            ...t,\n          }\n        })\n      )\n\n      setSelectableTokensUserInputs(assets.map(t => {\n        return {\n          address: t.address,\n          selectedAmount: 0,\n          amount: t.availableBalance,\n          humanAmount: new BigNumber(t.availableBalance).div(10 ** t.decimals).toFixed(),\n          selected: false\n        }\n      }))\n\n      setIsLoading(false)\n    }).catch(err => {\n      console.error(err)\n    })\n  }, [signerAccount, setIsLoading, setSelectableTokens, network])\n\n  // check Identity gas fees\n  useEffect(() => {\n\n    if (!gasData) return\n\n    const consolidatedTokens = consolidatedSelectableTokens(selectableTokens, selectableTokensUserInputs, tokensAllowances)\n\n    const regularTransfersCount = consolidatedTokens.filter(t => t.selected && !t.native).length\n    const nativeTransfersCount = consolidatedTokens.filter(t => t.selected && t.native).length\n\n    const adjustedApprovalCost = network.id === 'arbitrum' ? 200000 : 0\n\n    const signerTransactionsConsumption = (regularTransfersCount * (25000 + TRANSFER_CONSUMPTION + adjustedApprovalCost)) + (nativeTransfersCount * 25000)\n\n    const nativeRate = gasData.gasFeeAssets.native / 10 ** 18 // should decimals be returned in the API?\n\n    const gasFees = {}\n    GAS_SPEEDS.forEach(speed => {\n      let gasPrice = (gasData.gasPrice[speed] + (gasData.gasPrice.maxPriorityFeePerGas ? gasData.gasPrice.maxPriorityFeePerGas[speed] * 1 : 0))\n\n      const signerTransactionsCost = signerTransactionsConsumption * gasPrice\n      const signerTransactionsCostUSD = signerTransactionsCost * nativeRate\n\n      gasFees[speed] = {\n        speed,\n        signerTransactionsCost,\n        signerTransactionsCostUSD,\n        signerTransactionsConsumption\n      }\n    })\n\n    setEstimatedGasFees({\n      regularTransfersCount,\n      nativeTransfersCount,\n      gasFees,\n    })\n\n  }, [selectableTokens, selectableTokensUserInputs, portfolio, gasData, selectedGasSpeed, tokensAllowances, network])\n\n\n  // getting gasPrice data from relayer\n  useEffect(() => {\n    fetchGet(`${relayerURL}/gasPrice/${network.id}`).then(gasData => {\n      setGasData(gasData.data)\n    }).catch(err => {\n      console.log('fetch error', err)\n    })\n  }, [relayerURL, network])\n\n\n  // getting erc20 token allowances\n  useEffect(() => {\n    const promises = selectableTokens.map(t => {\n      const provider = getProvider(network.id)\n      const tokenContract = new Contract(t.address, ERC20PermittableInterface, provider)\n\n      if (!t.native) {\n        return tokenContract.allowance(signerAccount, identityAccount)\n          .then((allowance) => {\n\n            return {\n              address: t.address,\n              allowance: allowance.toString(),\n            }\n          }).catch(err => {\n            console.log('err getting allowance', err)\n          })\n      }\n      return {\n        address: t.address,\n        allowance: 0,\n      }\n    })\n\n    Promise.all(promises).then(allowanceResults => {\n      setTokenAllowances(allowanceResults)\n    })\n\n  }, [identityAccount, network, selectableTokens, signerAccount])\n\n\n  useEffect(() => {\n    if (hidden) return\n    setModalButtons(\n      <>\n        <Button clear small icon={<MdClose/>} onClick={hideModal}>Close</Button>\n        {\n          (selectableTokensUserInputs.filter(a => a.selected).length > 0 && canCoverGasFees(selectedGasSpeed))\n            ? <Button small icon={<MdOutlineNavigateNext/>} className={'primary'}\n                      onClick={() => confirmTokenSelection()}>Move {selectableTokensUserInputs.filter(a => a.selected).length} assets</Button>\n            : <Button small icon={<MdOutlineNavigateNext/>} className={'primary disabled'}>Move assets</Button>\n        }\n      </>\n    )\n  }, [selectableTokensUserInputs, selectedGasSpeed, setModalButtons, hideModal, confirmTokenSelection, hidden, canCoverGasFees])\n\n  const onAssetAmountChange = useCallback((val, item) => updateSelectableTokenUserInputs(item.address, (old) => {\n    if (val === '') {\n      return {\n        ...old,\n        humanAmount: 0,\n        amount: 0\n      }\n    }\n    if (\n      (val.endsWith('.') && val.split('.').length === 2)\n      || (val.split('.').length === 2 && (val.endsWith('0') && new BigNumber(val).isEqualTo(old.humanAmount)))\n    ) {\n      return {\n        ...old,\n        humanAmount: val,\n      }\n    }\n\n    if (!isNaN(val)) {\n      let newHumanAmount = new BigNumber(val).toFixed(item.decimals)\n      if (new BigNumber(newHumanAmount).multipliedBy(10 ** item.decimals).comparedTo(item.availableBalance) === 1) {\n        newHumanAmount = new BigNumber(item.availableBalance).dividedBy(10 ** item.decimals).toFixed(item.decimals)\n      }\n      // trim trailing . or 0\n      newHumanAmount = newHumanAmount.replace(/\\.?0+$/g, '')\n\n      return {\n        ...old,\n        humanAmount: newHumanAmount,\n        amount: new BigNumber(newHumanAmount).multipliedBy(10 ** item.decimals).toFixed(0)\n      }\n    }\n    return old\n  }), [updateSelectableTokenUserInputs])\n\n  useEffect(() => {\n    setTimeout(() => {\n      inputRefs.current[0]?.focus()\n    }, 250)\n  }, [selectableTokens])\n\n  // Stepper\n  useEffect(() => {\n\n    const steps = ['Selection']\n\n    const native = selectableTokensUserInputs.find(a => a.address.toLowerCase() === ZERO_ADDRESS && a.selected)\n    if (native) {\n      steps.push(`Send ${selectableTokens.find(t => t.address === native.address).name}`)\n    }\n\n    if (selectableTokensUserInputs.find(a => a.address.toLowerCase() !== ZERO_ADDRESS && a.selected)) {\n\n      let tokensTitleActions = []\n      if (selectableTokensUserInputs.find(a => a.selected && a.address.toLowerCase() !== ZERO_ADDRESS)) tokensTitleActions.push('Send')\n\n      steps.push(tokensTitleActions.join(' and ') + ' tokens')\n\n    }\n\n    if (steps.length === 1) {\n      steps.push('Send tokens')\n    }\n\n    setStepperSteps(steps)\n  }, [selectableTokens, selectableTokensUserInputs, setStepperSteps, network])\n\n  if (hidden) return <></>\n\n  return (\n    <div>\n      {\n        isLoading\n          ?\n          <div className={'content-center'}>\n            <h3 className={'mb-6'}>Loading assets...</h3>\n            <AmbireLoading/>\n          </div>\n          :\n          <div>\n            {\n              selectableTokens.length === 0\n                ? <div>No assets to migrate have been found</div>\n                :\n                <div>\n                  <div className={'mb-4'}>Please select the assets you would like to migrate from your signer wallet to\n                    your Ambire wallet\n                  </div>\n                  {\n                    consolidatedSelectableTokens(selectableTokens, selectableTokensUserInputs)\n                      .sort((a, b) => a.name < b.name ? -1 : 1)\n                      .map((item, index) => (\n                        <div className='migration-asset-row' key={index}>\n                          <div className={`migration-asset-select${item.selected ? ' checked' : ''}`}\n                               onClick={() => false}>\n                            <Checkbox\n                              id={`check-${item.address}`}\n                              label={<span className={'migration-asset-select-label'}>\n                                  <span className='migration-asset-select-icon'>\n                                    {\n                                      (failedImg.includes(item.icon) || !item.icon) ?\n                                        <GiToken size={18}/>\n                                        :\n                                        <img src={item.icon} draggable='false' alt='Token Icon' onError={(err) => {\n                                          setFailedImg(failed => [...failed, item.icon])\n                                        }}/>\n                                    }\n                                </span>\n                                <span className='migration-asset-select-name'>{item.name}</span>\n                              </span>}\n                              checked={item.selected}\n                              onChange={() => toggleTokenSelection(item.address)}\n                            />\n                          </div>\n                          <div className='migration-asset-usd'>\n                            ${((item.amount) * item.rate).toFixed(2)}\n                          </div>\n                          <div className='migration-asset-amount'>\n                            <TextInput\n                              ref={(element) => inputRefs.current[index] = element}\n                              className={'migrate-amount-input'}\n                              value={item.humanAmount}\n                              onChange={(val) => onAssetAmountChange(val, item)}\n                            />\n                          </div>\n                        </div>\n                      ))\n                  }\n                  <div className={'custom-token-row mt-2'}>\n                    {\n                      isAddCustomTokenFormShown\n                        ? <div>\n                          {\n                            isCustomTokenPending\n                              ? <div className={'custom-token-message-fetching'}>\n                                <Loading/>\n                                Fetching custom token data...\n                              </div>\n                              : <>\n                                {\n                                  customTokenError && <div className={'error'}>{customTokenError}</div>\n                                }\n                                <div>\n                                  <TextInput\n                                    className={'custom-token-input'}\n                                    placeholder={'Enter custom token address'}\n                                    value={customTokenAddress}\n                                    onChange={(val) => {\n                                      setCustomTokenAddress(val)\n                                    }}\n                                    ref={customTokenInput}\n                                  />\n                                </div>\n                                <div className={'flex-row mt-2'}>\n                                  <Button small icon={<MdCancel/>} className={'buttonHollow danger align-right'}\n                                          onClick={() => {\n                                            setIsAddCustomTokenFormShown(false)\n                                            setCustomTokenAddress('')\n                                            setCustomTokenError(null)\n                                          }}>Cancel</Button>\n                                  <Button small icon={<MdOutlineAddCircleOutline/>} className={'primary ms-4'}\n                                          onClick={() => addCustomToken()}>Add</Button>\n                                </div>\n                              </>\n                          }\n                        </div>\n                        : <Button small icon={<MdOutlineAddCircleOutline/>} className={'clear align-right'}\n                                  onClick={() => setIsAddCustomTokenFormShown(true)}\n                        >Add custom token</Button>\n                    }\n                  </div>\n                  {\n                    !canCoverGasFees(selectedGasSpeed) && selectableTokensUserInputs.filter(a => a.selected).length > 0 &&\n                    <div className={'notification-hollow warning mt-3 mb-3'}>\n                      Your Signer Wallet will not have enough fees to pay for the migration.\n                      Please transfer a maximum of <span className={'max-native-suggestion'}\n                                                         onClick={() => onAssetAmountChange(new BigNumber(getMaxTransferableNative(selectedGasSpeed)).dividedBy(10 ** nativeToken.decimals).toFixed(6, BigNumber.ROUND_DOWN), nativeToken)}>\n                        {new BigNumber(getMaxTransferableNative(selectedGasSpeed)).dividedBy(10 ** nativeToken.decimals).toFixed(6, BigNumber.ROUND_DOWN)} {network.nativeAssetSymbol}\n                      </span>\n                    </div>\n                  }\n                  {\n                    estimatedGasFees &&\n                    <div className={'gas-estimation-block mt-4'}>\n                      <div className={'gas-estimation-block-title'}>Estimated gas fee</div>\n                      <ul className={'gas-estimation-selector'}>\n                        {\n                          Object.values(estimatedGasFees.gasFees).map((f, index) => {\n                              return (<li key={index} className={f.speed === selectedGasSpeed ? 'selected' : ''}\n                                          onClick={() => setSelectedGasSpeed(f.speed)}>{f.speed}</li>)\n                            }\n                          )\n                        }\n                      </ul>\n                      <table className={'gas-estimation-details'}>\n                        <tbody>\n                        <tr>\n                          <td>\n                            Signer fee\n                            {\n                              (!!estimatedGasFees.nativeTransfersCount || !!estimatedGasFees.regularTransfersCount) &&\n                              <span className={'migration-actions'}>\n                                  <span>{estimatedGasFees.nativeTransfersCount + estimatedGasFees.regularTransfersCount} transfers</span>\n                              </span>\n                            }\n                          </td>\n                          <td\n                            className={'gas-estimation-details-amount'}>${estimatedGasFees.gasFees[selectedGasSpeed].signerTransactionsCostUSD.toFixed(2)}</td>\n                        </tr>\n                        </tbody>\n                      </table>\n                    </div>\n                  }\n                </div>\n            }\n          </div>\n      }\n    </div>\n  )\n}\n\nexport default AssetsMigrationSelector\n","import './AssetsMigration.scss'\nimport { ethers } from 'ethers'\nimport { useCallback, useEffect, useState } from 'react'\nimport { getWallet } from 'lib/getWallet'\nimport { FaCheck, FaHourglass } from 'react-icons/fa'\nimport Button from 'components/common/Button/Button'\n\nimport { GiToken } from 'react-icons/gi'\nimport { MdOutlineNavigateBefore, MdOutlineNavigateNext } from 'react-icons/md'\nimport { ZERO_ADDRESS } from 'consts/specialAddresses'\nimport { fetchGet } from 'lib/fetch'\nimport BigNumber from 'bignumber.js'\nimport { ERC20PermittableInterface } from 'consts/permittableCoins'\n\nconst AssetsMigrationPermitter = ({\n                                    addRequest,\n                                    identityAccount,\n                                    signer,\n                                    signerExtra,\n                                    network,\n                                    selectedTokensWithAllowance,\n                                    setError,\n                                    hideModal,\n                                    setStep,\n                                    setModalButtons,\n                                    relayerURL,\n                                    gasSpeed,\n                                    hidden,\n                                  }) => {\n\n  //storing user sign/send or rejection\n  const [tokensPermissions, setTokensPermissions] = useState([])\n\n  //storing transfer status for non permittable tokens\n  const [tokensTransfers, setTokensTransfers] = useState({})\n\n  //to be able to have UI feedback without trigerring useEffects\n  const [tokensPendingStatus, setTokensPendingStatus] = useState({})\n  //error display logic if a user has rejected one or more MM popup\n  const [hasRefusedOnce, setHasRefusedOnce] = useState(false)\n  const [lastRefusalError, setLastRefusalError] = useState(null)\n  const [failedImg, setFailedImg] = useState([])\n\n  const [hasCorrectAccountAndChainId, setHasCorrectAccountAndChainId] = useState(null)\n\n  const [currentGasPrice, setCurrentGasPrice] = useState(null)\n\n  const [wallet, setWallet] = useState(null)\n\n  //using a callback would return not up to date data + would trigger useEffect prompt loop while we do not want that\n  const getConsolidatedTokensPure = (selected, tokensPermissions = [], tokensTransfers = [], tokensPendingStatus = []) => {\n    return selected.filter(t => t.address !== ZERO_ADDRESS).map(t => {\n      let remapped = {\n        ...t,\n        signing: null,\n        signature: null,\n        sent: false,\n        pending: false,\n        allowance: 0,\n      }\n      if (tokensPermissions[t.address]) {\n        remapped.signing = tokensPermissions[t.address].signing\n        remapped.signature = tokensPermissions[t.address].signature\n      }\n\n      if (tokensTransfers[t.address]) {\n        remapped.sent = true\n      }\n\n      if (tokensPendingStatus[t.address]) {\n        remapped.pending = true\n      }\n\n      return remapped\n    })\n  }\n\n  const checkWalletConnection = useCallback(async () => {\n    return wallet?.isConnected(signer.address, network.chainId)\n      .then(connected => {\n        setHasCorrectAccountAndChainId(connected)\n        if (!connected) {\n          setError(<>Please make sure your signer wallet is unlocked, and connected with <b>{signer.address}</b> to the\n            correct chain: <b>{network.id}</b></>)\n          return false\n        }\n        return true\n      })\n      .catch(e => {\n        setError('Could not check signer connection status: ' + e.error)\n        return false\n      })\n  }, [network, setError, signer, wallet])\n\n  //number of tokens that are ready to migrate (sent / permitted)\n  const readyTokensCount = useCallback(() => {\n    let count = 0\n    getConsolidatedTokensPure(selectedTokensWithAllowance, tokensPermissions, tokensTransfers, []).forEach(t => {\n      if (t.sent) {\n        count++\n      }\n    })\n    return count\n  }, [selectedTokensWithAllowance, tokensPermissions, tokensTransfers])\n\n  //Send MM prompt\n  const sendToken = useCallback(async (address, waitForRcpt = false) => {\n\n    if (!(await checkWalletConnection())) return\n\n    const tokenToMigrate = selectedTokensWithAllowance.find(t => t.address === address)\n    if (!tokenToMigrate) return\n\n    const sendData = ERC20PermittableInterface.encodeFunctionData('transfer', [identityAccount, new BigNumber(tokenToMigrate.amount).toFixed(0)])\n\n    //UI pending status\n    setTokensPendingStatus(old => {\n      old[address] = true\n      return { ...old }\n    })\n\n    setLastRefusalError(null)\n    const transferResult = wallet.sendTransaction({\n      from: signer.address,\n      to: address,\n      data: sendData,\n      gasLimit: 80000,\n      gasPrice: currentGasPrice,\n      chainId: network.chainId,\n    }).then(async rcpt => {\n\n      setTokensPermissions(old => {\n        old[address] = {\n          ...old[address],\n          signing: true,\n        }\n        return { ...old }\n      })\n\n      if (waitForRcpt) {\n        await rcpt.wait()\n        setTokensTransfers(old => {\n          old[address] = true\n          return { ...old }\n        })\n\n        setTokensPendingStatus(old => {\n          old[address] = false\n          return { ...old }\n        })\n\n        setTokensPermissions(old => {\n          old[address] = {\n            ...old[address],\n            signing: false,\n          }\n          return { ...old }\n        })\n      }\n\n      return true\n    }).catch(err => {\n      setTokensPendingStatus(old => {\n        old[address] = false\n        return { ...old }\n      })\n\n      if (err.message.includes('underpriced')) { // not copying the whole JSON error returned by the rpc\n        setLastRefusalError('Transaction fee underpriced')\n      } else {\n        setLastRefusalError(err.message)\n      }\n\n      setHasRefusedOnce(true)\n\n      if (!tokensPermissions[address] || (tokensPermissions[address] && tokensPermissions[address].signing !== false)) {\n        setTokensPermissions(old => {\n          old[address] = {\n            ...old[address],\n            signing: false,\n          }\n          return { ...old }\n        })\n      }\n      return false\n    })\n\n    return !!transferResult\n\n  }, [wallet, identityAccount, tokensPermissions, selectedTokensWithAllowance, currentGasPrice, network, signer, checkWalletConnection])\n\n  //going to assets selection\n  const cancelMigration = useCallback(() => {\n    setError(null)\n    setTokensTransfers([])\n    setTokensPermissions([])\n    setHasRefusedOnce(false)\n    setStep(0)\n  }, [setError, setTokensPermissions, setTokensTransfers, setStep])\n\n  //batch transactions\n  const completeMigration = useCallback(() => {\n    //reset assets migration status\n    cancelMigration()\n    hideModal()\n  }, [cancelMigration, hideModal])\n\n  useEffect(() => {\n    setWallet(getWallet({\n      signer: signer,\n      signerExtra: signerExtra,\n      chainId: network.chainId\n    }))\n  }, [network, signer, signerExtra])\n\n  // check correctness of signer wallet before starting the chained popups\n  useEffect(() => {\n    checkWalletConnection()\n  }, [checkWalletConnection])\n\n  useEffect(() => {\n    const url = `${relayerURL}/gasPrice/${network.id}`\n\n    fetchGet(url).then(gasData => {\n      let gasPrice = gasData.data.gasPrice[gasSpeed]\n      if (gasData.data.gasPrice.maxPriorityFeePerGas) {\n        gasPrice += gasData.data.gasPrice.maxPriorityFeePerGas[gasSpeed]\n      }\n      setCurrentGasPrice(gasPrice)\n    }).catch(err => {\n      setError(err.message + ' ' + url)\n    })\n\n  }, [network, relayerURL, setError, gasSpeed])\n\n  //Automatic permit ask chain\n  useEffect(() => {\n\n    //Skip initial useEffect\n    if (!hasCorrectAccountAndChainId) return\n    if (!Object.values(tokensTransfers).length) return\n    if (!currentGasPrice) return\n\n    const tokensWithPermission = getConsolidatedTokensPure(selectedTokensWithAllowance, tokensPermissions, tokensTransfers, []).map(t => {\n      return {\n        address: t.address,\n        signed: t.signing,\n      }\n    })\n\n    const nextTokenToAsk = tokensWithPermission.find(a => a.signed === null)\n\n    if (nextTokenToAsk) {\n      //avoid MM popup losing focus when immediately running the next action\n      setTimeout(() => {\n        sendToken(nextTokenToAsk.address, true)\n      }, 150)\n    }\n  }, [selectedTokensWithAllowance, sendToken, tokensPermissions, tokensTransfers, hasCorrectAccountAndChainId, currentGasPrice])\n\n  useEffect(() => {\n    if (!selectedTokensWithAllowance.length) return\n    const initialTokensTransfers = {}\n    selectedTokensWithAllowance.forEach(t => {\n      initialTokensTransfers[t.address] = false\n    })\n    setTokensTransfers(initialTokensTransfers)\n  }, [selectedTokensWithAllowance, setTokensTransfers])\n\n  useEffect(() => {\n    if (hasRefusedOnce) {\n      setError('Every asset below needs to be sent to complete the migration' + (lastRefusalError ? ' (' + lastRefusalError + ')' : ''))\n    }\n  }, [hasRefusedOnce, setError, lastRefusalError])\n\n\n  //Clearing UI error if all the tokens are validated\n  useEffect(() => {\n    if (readyTokensCount() === selectedTokensWithAllowance.length) {\n      setError(null)\n    }\n  }, [readyTokensCount, selectedTokensWithAllowance, setError])\n\n  useEffect(() => {\n    if (hidden) return\n    setModalButtons(\n      <>\n        <Button\n          className={'clear'}\n          icon={<MdOutlineNavigateBefore/>}\n          onClick={() => cancelMigration()}\n        >Back</Button>\n        {\n          readyTokensCount() === getConsolidatedTokensPure(selectedTokensWithAllowance).length\n            ?\n            <Button\n              className={'primary'}\n              icon={<MdOutlineNavigateNext/>}\n              onClick={() => hideModal()}\n            >Close</Button>\n            :\n            <Button\n              className={'primary disabled'}\n              icon={<MdOutlineNavigateNext/>}\n            >Complete</Button>\n        }\n      </>\n    )\n  }, [cancelMigration, completeMigration, readyTokensCount, selectedTokensWithAllowance, setModalButtons, hidden, hideModal])\n\n  if (hidden) return <></>\n\n  return (\n    <div>\n      {\n        readyTokensCount() < getConsolidatedTokensPure(selectedTokensWithAllowance).length\n          ? <div\n            className='small-asset-notification mb-3 warning'>{`${getConsolidatedTokensPure(selectedTokensWithAllowance).length - readyTokensCount()} actions left to complete the migration`}</div>\n          : <div className='small-asset-notification mb-3 success'>\n            Your tokens were migrated. You can close this window\n          </div>\n      }\n      {getConsolidatedTokensPure(selectedTokensWithAllowance, tokensPermissions, tokensTransfers, tokensPendingStatus).map((item, index) => (\n        <div className='migration-asset-row' key={index}>\n          <span className='migration-asset-select-icon migration-asset-select-icon-permit'>\n            {\n              (!item.icon || failedImg.includes(item.icon)) ?\n                <GiToken size={18}/>\n                :\n                <img src={item.icon} draggable='false' alt='Token Icon' onError={(err) => {\n                  setFailedImg(failed => [...failed, item.icon])\n                }}/>\n            }\n          </span>\n          <div className='migration-asset-name'>\n            {item.name}\n          </div>\n          <div className='migration-asset-amount'>\n            {new BigNumber(item.amount).div(10 ** item.decimals).toFixed()} <span\n            className={'migration-asset-amount-usd'}>(${((item.amount) * item.rate).toFixed(2)})</span>\n          </div>\n          <div className='separator'>\n\n          </div>\n          <div>\n            {!((item.allowance && ethers.BigNumber.from(item.allowance).gte(item.amount)) || item.sent)\n              ?\n              <>\n                {(item.pending || item.signing)\n                  ? <div className={'migration-permitted warning'}><FaHourglass/> Sending...</div>\n                  :\n                  <Button className={'button-small secondary'}\n                          onClick={() => sendToken(item.address)}>\n                    Send\n                  </Button>\n                }\n              </>\n              :\n              <div className={'migration-permitted'} onClick={() => sendToken(item.address)}><FaCheck/> Sent\n              </div>\n            }\n          </div>\n        </div>\n      ))}\n    </div>\n  )\n}\n\nexport default AssetsMigrationPermitter\n","import './AssetsMigration.scss'\nimport { useCallback, useEffect, useState } from 'react'\nimport { getWallet } from 'lib/getWallet'\nimport { TextInput, Button, Loading } from 'components/common'\n\nimport { GiToken } from 'react-icons/gi'\nimport BigNumber from 'bignumber.js'\nimport { fetchGet } from 'lib/fetch'\nimport { MdOutlineNavigateNext, MdClose, MdOutlineNavigateBefore } from 'react-icons/md'\n\nconst AssetsMigrationNative = ({\n  identityAccount,\n  signer,\n  signerExtra,\n  network,\n  nativeTokenData,\n  setSelectedTokensWithAllowance,\n  selectedTokensWithAllowance,\n  setError,\n  setStep,\n  hasERC20Tokens,\n  hideModal,\n  relayerURL,\n  setModalButtons,\n  setBeforeCloseModalHandler,\n  gasSpeed,\n  hidden,\n}) => {\n\n  const [failedImg, setFailedImg] = useState([])\n  const [hasMigratedNative, setHasMigratedNative] = useState(false)\n  const [isMigrationPending, setIsMigrationPending] = useState(false)\n  const [nativeAmount, setNativeAmount] = useState('0')\n  const [maxRecommendedAmount, setMaxRecommendedAmount] = useState(null)\n  const [transactionEstimationCost, setTransactionEstimationCost] = useState('0')\n  const [nativeHumanAmount, setNativeHumanAmount] = useState('0')\n\n  const [hasModifiedAmount, setHasModifiedAmount] = useState(false)\n\n  const [currentGasPrice, setCurrentGasPrice] = useState(null)\n\n  let wallet\n  try {\n    wallet = getWallet({\n      signer: signer,\n      signerExtra: signerExtra,\n      chainId: network.chainId\n    })\n  } catch (err) {\n    // in case of no window.ethereum was injected from extension\n    setError('No Web3 wallet connected. Please connect a Web3 wallet and reload the page')\n  }\n\n  //going back to assets selection\n  const cancelMigration = useCallback(() => {\n    setStep(0)\n    setSelectedTokensWithAllowance([])\n  }, [setSelectedTokensWithAllowance, setStep])\n\n  const continueMigration = useCallback(() => {\n    setStep(2)\n  }, [setStep])\n\n  const erc20TransfersCount = (selectedTokensWithAllowance) => {\n    return selectedTokensWithAllowance.filter(t => t.selected && !t.permittable && !t.native).length\n  }\n\n  //Pops MM modal to send native to Identity\n  const migrateNative = useCallback(async () => {\n    if (!wallet) return\n    setError(null)\n    setIsMigrationPending(true)\n\n    if (!hasERC20Tokens) {\n      setBeforeCloseModalHandler(null)\n    }\n\n    let hasCorrectChainAndAccount = await wallet.isConnected(signer.address, network.chainId).catch(e => {\n      setError('Could not check signer connection status: ' + e.error)\n    })\n\n    if (hasCorrectChainAndAccount) {\n      wallet.sendTransaction({\n        from: signer.address,\n        to: identityAccount,\n        gasLimit: 25000 + (network.id === 'arbitrum' ? 200000 : 0),\n        gasPrice: currentGasPrice,\n        value: '0x' + new BigNumber(nativeAmount).toString(16),\n        chainId: network.chainId\n      }).then(async rcpt => {\n        await rcpt.wait()\n        setHasMigratedNative(true)\n        setIsMigrationPending(false)\n        return true\n      }).catch(err => {\n        setHasMigratedNative(false)\n        setIsMigrationPending(false)\n\n        if (err && err.message.includes('must provide an Ethereum address')) {\n          setError(`Make sure your wallet is unlocked and connected with ${signer.address}.`)\n        } else {\n          setError('Native asset migration failed: ' + err.message)\n        }\n\n        return false\n      })\n    } else {\n      setError(<>Please make sure your signer wallet is unlocked, and connected with <b>{signer.address}</b> to the correct chain: <b>{network.id}</b></>)\n      setIsMigrationPending(false)\n    }\n  }, [wallet, setError, hasERC20Tokens, network, setBeforeCloseModalHandler, signer, identityAccount, nativeAmount, currentGasPrice])\n\n  const updateAmount = useCallback((amount) => {\n    let newHumanAmount = new BigNumber(amount).dividedBy(10 ** nativeTokenData.decimals).toFixed(nativeTokenData.decimals).replace(/\\.?0+$/g, '')\n\n    setNativeHumanAmount(newHumanAmount)\n    setNativeAmount(amount)\n    setHasModifiedAmount(true)\n  }, [nativeTokenData])\n\n  useEffect(() => {\n    const url = `${relayerURL}/gasPrice/${network.id}`\n\n    fetchGet(url).then(gasData => {\n      let gasPrice = gasData.data.gasPrice[gasSpeed]\n      if (gasData.data.gasPrice.maxPriorityFeePerGas) {\n        gasPrice += gasData.data.gasPrice.maxPriorityFeePerGas[gasSpeed]\n      }\n      const nativeTransactionCost = gasPrice * 25000\n\n      const regularTransfersCount = erc20TransfersCount(selectedTokensWithAllowance)\n      const transfersTransactionCost = regularTransfersCount * gasPrice * (25000 + 52000)\n\n      setTransactionEstimationCost(new BigNumber((nativeTransactionCost + transfersTransactionCost).toFixed(0)).toFixed(0))\n      const recommendedBN = new BigNumber(nativeTokenData.availableBalance).minus((nativeTransactionCost + transfersTransactionCost))\n      setMaxRecommendedAmount(recommendedBN.gte(0) ? recommendedBN.toFixed(0) : 0)\n      setCurrentGasPrice(gasPrice)\n    }).catch(err => {\n      setError(err.message + ' ' + url)\n    })\n\n  }, [setTransactionEstimationCost, setMaxRecommendedAmount, nativeTokenData, network, relayerURL, setError, gasSpeed, selectedTokensWithAllowance])\n\n  const onAmountChange = useCallback((val) => {\n    setHasModifiedAmount(true)\n    if (val === '') {\n      setNativeHumanAmount(0)\n      setNativeAmount(0)\n      return\n    }\n    if (\n      (val.endsWith('.') && val.split('.').length === 2)\n      || (val.split('.').length === 2 && val.endsWith('0'))\n    ) {\n      setNativeHumanAmount(val)\n      return\n    }\n\n    if (!isNaN(val)) {\n      let newHumanAmount = new BigNumber(val).toFixed(nativeTokenData.decimals)\n      if (new BigNumber(newHumanAmount).multipliedBy(10 ** nativeTokenData.decimals).comparedTo(nativeTokenData.availableBalance) === 1) {\n        newHumanAmount = new BigNumber(nativeTokenData.availableBalance).dividedBy(10 ** nativeTokenData.decimals).toFixed(nativeTokenData.decimals)\n      }\n      //trim trailing . or 0\n      newHumanAmount = newHumanAmount.replace(/\\.?0+$/g, '')\n\n      setNativeHumanAmount(newHumanAmount)\n      setNativeAmount(new BigNumber(newHumanAmount).multipliedBy(10 ** nativeTokenData.decimals).toFixed(0))\n    }\n  }, [nativeTokenData])\n\n  useEffect(() => {\n    const initialHumanAmount = new BigNumber(nativeTokenData.amount).dividedBy(10 ** nativeTokenData.decimals).toFixed(nativeTokenData.decimals).replace(/\\.?0+$/g, '')\n    setNativeHumanAmount(initialHumanAmount)\n    setNativeAmount(nativeTokenData.amount)\n  }, [nativeTokenData])\n\n  useEffect(() => {\n    if (hidden) return\n    const getDisplayedButtons = () => {\n      let buttons = []\n      if (hasMigratedNative) {\n        if (hasERC20Tokens) {\n          buttons.push(<Button\n            icon={<MdOutlineNavigateNext/>}\n            className={'primary full'}\n            onClick={() => continueMigration()}\n          >Next</Button>)\n        } else {\n          buttons.push(<Button\n            icon={<MdClose/>}\n            className={'primary full'}\n            onClick={() => hideModal()}\n          >Close</Button>)\n        }\n      } else if (!wallet) { // will have to restart the process anyway as web3.ethereum is not injected (not to confuse with not unlocked)\n        buttons.push(<Button\n          icon={<MdClose/>}\n          className={'clear full'}\n          onClick={() => hideModal()}\n        >Close</Button>)\n      } else {\n        buttons.push(<Button\n          icon={<MdOutlineNavigateBefore/>}\n          className={'clear'}\n          onClick={() => cancelMigration()}\n          key='0'\n        >Back</Button>)\n\n        if (isMigrationPending) {\n          buttons.push(<Button\n            icon={<Loading/>}\n            className={'primary disabled'}\n            key='1'\n          >Moving {nativeTokenData.name}...</Button>)\n        } else {\n          buttons.push(<Button\n            icon={<MdOutlineNavigateNext/>}\n            className={'primary'}\n            onClick={() => migrateNative()}\n            key='1'\n          >Move {nativeTokenData.name}</Button>)\n        }\n      }\n      return buttons\n    }\n\n    setModalButtons(getDisplayedButtons())\n  }, [hasMigratedNative, hasERC20Tokens, setModalButtons, hideModal, isMigrationPending, cancelMigration, migrateNative, continueMigration, wallet, nativeTokenData, hidden])\n\n  if (hidden) return <></>\n\n  return (\n    <div>\n\n      {\n        wallet &&\n        <>\n          <div className={'migration-native-title mb-4'}>\n            <div className='migration-native-asset-icon'>\n              {\n                failedImg.includes(nativeTokenData.icon) ?\n                  <GiToken size={64}/>\n                  :\n                  <img src={nativeTokenData.icon} draggable='false' alt='Token Icon' onError={(err) => {\n                    setFailedImg(failed => [...failed, nativeTokenData.icon])\n                  }}/>\n              }\n            </div>\n            <div className='migration-native-title-asset-name'>Migrate native asset <b>{nativeTokenData.name}</b></div>\n          </div>\n\n          {\n            hasMigratedNative\n              ?\n              <>\n                <div className={'small-asset-notification success'}>Migration of your {nativeTokenData.name} was\n                  successful\n                </div>\n              </>\n              :\n              <>\n                <div className={'migration-native-row'}>\n                  <span className={'migration-native-row-key'}>\n                    Current balance\n                  </span>\n                  <span className={'migration-native-selection'}\n                        onClick={() => updateAmount(nativeTokenData.availableBalance)}>\n                    {new BigNumber(nativeTokenData.availableBalance).dividedBy(10 ** nativeTokenData.decimals).toFixed(6)} {nativeTokenData.name}\n                  </span>\n                </div>\n\n                <div className={'migration-native-row'}>\n                  <span className={'migration-native-row-key'}>Amount to migrate</span>\n                  {\n                    (hasModifiedAmount || (maxRecommendedAmount !== null && nativeAmount > maxRecommendedAmount))\n                      ?\n                      <TextInput\n                        className={'migrate-amount-input'}\n                        value={nativeHumanAmount}\n                        onChange={onAmountChange}\n                      />\n                      :\n                      <div>{nativeHumanAmount}</div>\n                  }\n                </div>\n\n                {\n                  maxRecommendedAmount !== null && new BigNumber(nativeAmount).gt(maxRecommendedAmount) &&\n                  <div className={'notification-hollow warning mt-4'}>\n                    <div>\n                      {\n                        !!erc20TransfersCount(selectedTokensWithAllowance)\n                          ? 'Signer transactions cost'\n                          : 'Current Transaction cost'\n                      }\n                      :\n                      ~{new BigNumber(transactionEstimationCost).dividedBy(10 ** nativeTokenData.decimals).toFixed(6)} {nativeTokenData.name}\n                      <span\n                        className={'migration-native-usd'}> (${new BigNumber(transactionEstimationCost).multipliedBy(nativeTokenData.rate).toFixed(2)})</span>\n                    </div>\n\n                    <div className={'mt-3 mb-3'}>\n                      {\n                        maxRecommendedAmount > 0\n                          ?\n                          <>\n                            <span>You should migrate up to </span>\n                            <span className={'migration-native-selection'} onClick={() => updateAmount(maxRecommendedAmount)}>\n                              {new BigNumber(maxRecommendedAmount).dividedBy(10 ** nativeTokenData.decimals).toFixed(6)} {nativeTokenData.name}\n                            </span>\n                            <span> because will you need funds to pay the transaction costs.</span>\n                          </>\n                          :\n                          <span>You do not have enough funds to pay the transaction fee.</span>\n                      }\n                    </div>\n                  </div>\n                }\n\n                {\n                  (isMigrationPending && hasERC20Tokens) &&\n                  <div className={'notification-hollow info mt-4'}>\n                    Waiting for the transaction to be mined before continuing migration...\n                  </div>\n                }\n                {\n                  (isMigrationPending && !hasERC20Tokens) &&\n                  <div className={'notification-hollow info mt-4'}>\n                    The amount of {nativeTokenData.name} will be updated in your wallet, once the transaction has been\n                    confirmed and mined.\n                    If you confirmed your transaction, you can already close this window\n                  </div>\n                }\n              </>\n          }\n        </>\n      }\n    </div>\n  )\n}\n\nexport default AssetsMigrationNative\n","import './AssetsMigration.scss'\nimport { useEffect, useState } from 'react'\nimport AssetsMigrationSelector from './AssetsMigrationSelector'\nimport AssetsMigrationPermitter from './AssetsMigrationPermitter'\nimport AssetsMigrationNative from './AssetsMigrationNative'\nimport { PERMITTABLE_COINS } from 'consts/permittableCoins'\nimport { MdClose, MdOutlineNavigateBefore } from 'react-icons/md'\nimport { Button } from 'components/common'\n\nconst AssetsMigration = ({ addRequest, selectedAccount, accounts, network, hideModal, relayerURL, portfolio, setModalButtons, setModalSteps, setBeforeCloseModalHandler }) => {\n\n  const [selectedTokensWithAllowance, setSelectedTokensWithAllowance] = useState([])\n  const [nativeTokenData, setNativeTokenData] = useState(null)\n  const [hasERC20Tokens, setHasERC20Tokens] = useState(false)\n\n  const [isSelectionConfirmed, setIsSelectionConfirmed] = useState(false)\n  const [step, setStep] = useState(0)\n  const [stepperSteps, setStepperSteps] = useState([])\n  const [error, setError] = useState(null)\n\n  const [showCloseConfirmation, setShowCloseConfirmation] = useState(false)\n\n  const [gasSpeed, setGasSpeed] = useState(null)\n\n\n  //to get signer\n  const currentAccount = accounts.find(a => a.id === selectedAccount)\n\n  //clear error and reset tokens\n  useEffect(() => {\n    if (step === 0) {\n      setError(null)\n      setSelectedTokensWithAllowance([])\n      setNativeTokenData(null)\n      setHasERC20Tokens(false)\n      setGasSpeed(null)\n      setBeforeCloseModalHandler(null)\n    }\n  }, [network, selectedAccount, step, setBeforeCloseModalHandler])\n\n  useEffect(() => {\n    if (isSelectionConfirmed) {\n      setIsSelectionConfirmed(false)\n\n      //the non permittable, promise wait all\n      setNativeTokenData(selectedTokensWithAllowance.find(t => t.native))\n      setHasERC20Tokens(!!selectedTokensWithAllowance.find(t => !t.native))\n    }\n  }, [isSelectionConfirmed, currentAccount, selectedTokensWithAllowance, network, selectedAccount])\n\n  useEffect(() => {\n    let stepIndex = step\n\n    if (step > 0 && !nativeTokenData) {\n      stepIndex -= 1\n    }\n\n    setModalSteps({\n      steps: stepperSteps.map(s => ({ name: s })),\n      stepIndex\n    })\n  }, [nativeTokenData, setModalSteps, step, stepperSteps])\n\n  useEffect(() => {\n    const beforeCloseHandle = () => {\n      setShowCloseConfirmation(true)\n      setModalButtons([\n        (<Button\n          icon={<MdOutlineNavigateBefore/>}\n          className={'clear'}\n          onClick={() => setShowCloseConfirmation(false)}\n          key='0'\n        >Back</Button>),\n        (<Button\n          icon={<MdClose/>}\n          className={'danger'}\n          onClick={() => hideModal()}\n          key='1'\n        >Close</Button>)\n      ])\n    }\n\n    if (step > 0) {\n      setBeforeCloseModalHandler(() => beforeCloseHandle)\n    }\n  }, [step, setBeforeCloseModalHandler, setModalButtons, hideModal, showCloseConfirmation])\n\n  return (\n    <div>\n      {\n        error && <div className={'mt-3 error'}>{error}</div>\n      }\n      <div id='assets-migration'>\n        {\n          showCloseConfirmation &&\n          <div className='notification-hollow warning mt-4'>\n            By closing this window, your progress will be lost. Are you sure you want to close this window?\n          </div>\n        }\n        {\n          step === 0 && <AssetsMigrationSelector\n            hidden={showCloseConfirmation}\n            signerAccount={currentAccount.signer.address}\n            identityAccount={selectedAccount}\n            network={network}\n            PERMITTABLE_COINS={PERMITTABLE_COINS}\n            setIsSelectionConfirmed={setIsSelectionConfirmed}\n            setStep={setStep}\n            portfolio={portfolio}\n            relayerURL={relayerURL}\n            setModalButtons={setModalButtons}\n            hideModal={hideModal}\n            setError={setError}\n            setSelectedTokensWithAllowance={setSelectedTokensWithAllowance}\n            setStepperSteps={setStepperSteps}\n            setGasSpeed={setGasSpeed}\n          />\n        }\n        {step === 1 && nativeTokenData &&\n          <AssetsMigrationNative\n            hidden={showCloseConfirmation}\n            signer={currentAccount.signer}\n            identityAccount={selectedAccount}\n            network={network}\n            addRequest={addRequest}\n            signerExtra={currentAccount.signerExtra}\n            setError={setError}\n            nativeTokenData={nativeTokenData}\n            hideModal={hideModal}\n            setStep={setStep}\n            relayerURL={relayerURL}\n            hasERC20Tokens={hasERC20Tokens}\n            setModalButtons={setModalButtons}\n            setSelectedTokensWithAllowance={setSelectedTokensWithAllowance}\n            selectedTokensWithAllowance={selectedTokensWithAllowance}\n            setBeforeCloseModalHandler={setBeforeCloseModalHandler}\n            gasSpeed={gasSpeed}\n          />\n        }\n        {step === 2 &&\n          <AssetsMigrationPermitter\n            hidden={showCloseConfirmation}\n            signer={currentAccount.signer}\n            identityAccount={selectedAccount}\n            network={network}\n            addRequest={addRequest}\n            PERMITTABLE_COINS={PERMITTABLE_COINS}\n            signerExtra={currentAccount.signerExtra}\n            setError={setError}\n            selectedTokensWithAllowance={selectedTokensWithAllowance}\n            hideModal={hideModal}\n            setStep={setStep}\n            setModalButtons={setModalButtons}\n            gasSpeed={gasSpeed}\n            relayerURL={relayerURL}\n          />\n        }\n      </div>\n    </div>\n  )\n}\n\nexport default AssetsMigration\n","import { useModals } from 'hooks'\nimport { Modal, Stepper } from 'components/common'\n\nimport AssetsMigration from 'components/Wallet/AssetsMigration/AssetsMigration'\nimport { useState } from 'react'\n\nconst AssetsMigrationModal = ({ addRequest, selectedAccount, selectedNetwork, accounts, relayerURL, portfolio }) => {\n  const { hideModal, setBeforeCloseModalHandler } = useModals()\n\n  const [modalButtons, setModalButtons] = useState(null)\n  const [modalSteps, setModalSteps] = useState({ steps: [], stepIndex: 0})\n\n  const getModalTitle = () => {\n    return (<div>\n      <span>Migrate Assets</span>\n      <Stepper steps={modalSteps.steps} currentStep={modalSteps.stepIndex} noLabels={false}/>\n    </div>)\n  }\n\n  return (\n    <Modal id='asset-migration-modal' title={getModalTitle()} buttons={modalButtons} >\n      <AssetsMigration\n        addRequest={addRequest}\n        selectedAccount={selectedAccount}\n        network={selectedNetwork}\n        accounts={accounts}\n        hideModal={hideModal}\n        relayerURL={relayerURL}\n        portfolio={portfolio}\n        setModalButtons={setModalButtons}\n        setModalSteps={setModalSteps}\n        setBeforeCloseModalHandler={setBeforeCloseModalHandler}\n      />\n    </Modal>\n  )\n}\n\nexport default AssetsMigrationModal\n","import './AssetsMigration.scss'\nimport assetMigrationDetector from 'lib/assetMigrationDetector'\nimport AssetsMigrationModal from 'components/Modals/AssetsMigrationModal/AssetsMigrationModal'\nimport { useCallback, useEffect, useState } from 'react'\nimport { useModals } from 'hooks'\nimport { FaTimes } from 'react-icons/fa'\nimport { getWallet } from 'lib/getWallet'\n\nconst AssetsMigrationBanner = ({ addRequest, selectedAccount, accounts, selectedNetwork, relayerURL, portfolio, closeable = false, linkMargin = false, useStorage }) => {\n\n  const [hasSignerAssets, setHasSignerAssets] = useState(false)\n  const [migrationMessageSeen, setMigrationMessageSeen] = useState(false)\n  const { showModal } = useModals()\n  const [migrationMessageSeenStorage, setMigrationMessageSeenStorage] = useStorage({key: 'migrationSeen', defaultValue:{}})\n\n  // in the meantime that we integrate HW wallets...\n  const currentAccount = accounts.find(a => a.id === selectedAccount)\n  let wallet\n  try {\n    wallet = getWallet({\n      signer: currentAccount.signer,\n      signerExtra: currentAccount.signerExtra,\n      chainId: selectedNetwork.chainId\n    })\n  } catch (err) {\n    // in case of no window.ethereum was injected from extension\n  }\n\n  const closeMigrationMessage = useCallback(() => {\n    setMigrationMessageSeen(true)\n    setMigrationMessageSeenStorage((old) => {\n      old[selectedAccount + selectedNetwork.id] = true\n      return old\n    })\n  }, [selectedAccount, selectedNetwork, setMigrationMessageSeenStorage])\n\n  //fetching relevant assets\n  useEffect(() => {\n    let unmounted = false\n\n    setHasSignerAssets(false)\n    const checkSignerAssets = ({ networkId, identityAccount, accounts }) => {\n      const currentAccount = accounts.find(a => a.id === identityAccount)\n      if (!currentAccount.signer) return\n\n      assetMigrationDetector({ networkId: networkId, account: currentAccount.signer.address }).then(assets => {\n        if (unmounted) return\n        const relevantAssets = assets.filter(a => a.balanceUSD > 0.001)\n        setHasSignerAssets(!!relevantAssets.length)\n      }).catch(err => {\n        console.error(err)\n      })\n    }\n\n    checkSignerAssets({ identityAccount: selectedAccount, networkId: selectedNetwork.id, accounts })\n\n    return () => unmounted = true\n  }, [selectedAccount, selectedNetwork, accounts])\n\n  //checking if closable message has been seen(closed) or not\n  useEffect(() => {\n    setMigrationMessageSeen(closeable && !!migrationMessageSeenStorage[selectedAccount + selectedNetwork.id])\n  }, [closeable, selectedAccount, selectedNetwork, migrationMessageSeenStorage])\n  \n  // We either have a provider (web3) or we use a supported HW wallet\n  const supportedHWWalletTypes = ['ledger', 'trezor', 'Lattice']\n  const shouldShow = wallet?.provider|| (currentAccount.signerExtra && supportedHWWalletTypes.includes(currentAccount.signerExtra.type))\n  if (!shouldShow) return (<></>)\n\n  return (\n    (hasSignerAssets && !migrationMessageSeen) &&\n    <div className={'migration-banner'}>\n      <div className='migration-banner-message'>\n        <div>We detected that your signer account has tokens that can be transferred to your Ambire account. We recommend doing this in order to maximize your $WALLET rewards.</div>\n        <span className={'link' + (linkMargin ? ' link-margin' : '')} onClick={() => {\n          showModal(<AssetsMigrationModal\n            addRequest={addRequest}\n            selectedNetwork={selectedNetwork}\n            selectedAccount={selectedAccount}\n            accounts={accounts}\n            relayerURL={relayerURL}\n            portfolio={portfolio}\n          />)\n        }}>Click here to migrate those tokens</span>\n      </div>\n      {\n        closeable &&\n        <div className={'migration-banner-close'}><FaTimes onClick={() => closeMigrationMessage()}/></div>\n      }\n    </div>\n  )\n}\n\nexport default AssetsMigrationBanner\n"],"sourceRoot":""}