{"version":3,"sources":["components/SendTransaction/FeeSelector.js","components/SendTransaction/Actions.js","components/SendTransaction/noRelayer.js","components/SendTransaction/SendTransaction.js","lib/icons.js","lib/formatters.js","lib/lattice.js","../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","components/SendTransaction/helpers.js","components/common/TxnPreview/TxnPreview.js","../node_modules/ambire-common/src/services/requestToBundleTxn/requestToBundleTxn.ts"],"names":["SPEEDS","walletDiscountBlogpost","DISCOUNT_TOKENS_SYMBOLS","getBalance","token","balance","decimals","priceInUSD","WalletDiscountBanner","currenciesItems","tokens","estimation","onFeeCurrencyChange","onDismiss","feeSpeed","isGasTankEnabled","network","selectedFeeToken","symbol","includes","discount","walletDiscountTokens","filter","x","isTokenEligible","sort","a","b","parseInt","indexOf","length","discountToken","eligibleWalletToken","find","value","address","action","actionTxt","showSwap","className","href","target","rel","onClick","mini","to","FeeSelector","disabled","signer","setEstimation","setFeeSpeed","useState","editCustomFee","setEditCustomFee","insufficientFee","feeInUSD","success","checkIfDAppIncompatible","message","title","msg","getErrHint","FailingTxn","mapTxnErrMsg","tooltip","feeInNative","gasLimit","nativeAssetSymbol","remainingFeeTokenBalances","nativePrice","gasTankTokens","gasTank","map","nativeAssetPriceInUSD","item","nativeRate","price","toUpperCase","ethers","utils","parseUnits","toFixed","toString","label","localeCompare","tokenNetwork","icon","rest","getTokenIcon","id","extra","feeCurrencySelect","defaultValue","items","onChange","setCustomFee","prevEstimation","customFee","sufficientSpeeds","speed","i","highestSufficientSpeed","checkIsSelectorDisabled","feeAmountSelectors","isETH","getFeesData","feeInFeeToken","discountInFeeToken","getDiscountApplied","discountInFeeInUSD","baseFeeInFeeToken","baseFeeInFeeUSD","showInUSD","selectFeeSpeed","formatFloatTokenAmount","savedGas","minFee","minFeeUSD","maxFee","maxFeeUSD","discountMin","discountMax","discountInUSD","discountBaseMinInUSD","discountBaseMaxInUSD","baseFeeInUSD","baseMinFee","baseMaxFee","baseMinFeeUSD","baseMaxFeeUSD","isUnderpriced","isNaN","parseFloat","isOverpriced","join","isGasTankAvailable","small","placeholder","textOnly","balanceInUSD","Actions","approveTxn","rejectTxn","cancelSigning","signingStatus","code","passphrase","quickAccCredentials","setQuickAccCredentials","useEffect","prev","form","useRef","rejectButton","danger","type","signButtonLabel","inProgress","isRecoveryMode","finalBundle","recoveryMode","quickAcc","confCodeRequired","ref","onSubmit","e","preventDefault","password","required","minLength","style","visibility","pattern","autoComplete","maxLength","clear","current","checkValidity","IdentityInterface","Interface","require","FactoryInterface","sendNoRelayer","account","wallet","provider","quickAccManager","Error","getCode","identity","then","data","encodeFunctionData","txns","getNonce","sign","identityFactoryAddr","bytecode","salt","signature","estimateGas","from","toNumber","hexlify","Math","floor","getTransactionCount","txn","gas","gasPrice","nonce","sendTransaction","signTransaction","signed","txId","hash","getNetwork","chainId","name","ERC20","REJECT_MSG","WALLET_TOKEN_SYMBOLS","isInt","getDefaultFeeToken","currentAccGasTankState","getErrorMessage","SendTransaction","relayerURL","accounts","selectedAcc","requests","resolveMany","replacementBundle","replaceByDefault","mustReplaceNonce","onBroadcastedTxn","gasTankState","eligibleRequests","useMemo","toLowerCase","bundle","networkId","Bundle","toBundleTxn","Array","isArray","extraGas","reduce","requestIds","some","meta","addressLabel","xWalletReq","xWallet","makeBundle","SendTransactionWithBundle","isEnabled","replaceTx","setReplaceTx","setSigningStatus","addToast","useToasts","console","error","isMounted","currentBundle","unmounted","reestimate","estimate","fetch","replacing","minFeeInUSDPerGas","getNextNonce","estimateNoRelayer","getProvider","relayerless","catch","log","intvl","setInterval","clearInterval","getFinalBundle","useCallback","feeToken","addedGas","feeTxn","accountPresets","feeCollector","toHexAmount","nextFreeNonce","nextNonce","nextNonMinedNonce","fToken","gasTankFee","assetId","approveTxnImpl","getWallet","signerExtra","submit","approveTxnImplQuickAcc","canSkip2FA","fetchPost","primaryKeyBackup","undefined","Promise","resolve","setTimeout","pwd","alert","Wallet","fromEncryptedJson","JSON","parse","signatureTwo","accountAvatar","blockies","seed","toDataURL","canProceed","size","isFirstFailing","firstFailing","min","Date","now","TxnPreview","minute","disableDismiss","disableDismissLabel","backgroundImage","networkIconsById","pendingBundle","checked","isDeployed","timeout","bundleResult","match","result","customIcons","zapperStorageTokenIcons","addr","net","amount","useGrouping","maximumFractionDigits","minimumFractionDigits","toLocaleString","max","err","crypto","HARDENED_OFFSET","getAddressesReqOpts","startPath","n","latticeInit","commKey","clientConfig","privKey","Client","latticeConnect","client","deviceId","reject","connect","isPaired","errConnect","latticePair","secret","pair","hasActiveWallet","errPair","latticeGetAddresses","getAddresses","res","errGetAddresses","latticeSignMessage","dataMsg","protocol","payload","signerPath","signOptsMsg","currency","signedTx","signedMsg","sig","r","s","v","errSignMessage","latticeSignMessage712","reqData","latticeSignTransaction","unsignedTxObj","txData","useEIP155","signOpts","serializedSigned","serialize","errSignTxn","_objectWithoutProperties","source","excluded","key","Object","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call","pow","getAddedGas","contractErrors","contractMsg","amnt","round","multiplier","getFeePaymentConsequences","discountMultiplier","totalMultiplier","isCrossChainNativeSelected","getNetworkSymbol","networks","mined","disableExpand","useConstants","constants","tokenList","humanizerInfo","isExpanded","setExpanded","contractName","getName","networkDetails","summary","getTransactionSummary","extended","entry","explorerUrl","stopPropagation","canShowLink","parseExtendedSummaryItem","setKnownAddressNames","isKnown","apply","formatUnits","IdentityFactory","IdentityFactoryABI","deploySalt","slice"],"mappings":"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","file":"static/js/14.ba094b04.chunk.js","sourcesContent":["import './FeeSelector.scss'\n\nimport { AiOutlineWarning } from 'react-icons/ai'\nimport { Loading, Select, ToolTip, Button, TextInput, DAppIncompatibilityWarningMsg } from 'components/common'\nimport {\n  isTokenEligible,\n  mapTxnErrMsg,\n  getErrHint,\n  getFeesData,\n  getDiscountApplied,\n  checkIfDAppIncompatible\n} from './helpers'\nimport { FaPercentage } from 'react-icons/fa'\nimport { MdInfoOutline } from 'react-icons/md'\nimport { NavLink } from 'react-router-dom'\nimport { MdEdit } from 'react-icons/md'\nimport { useState } from 'react'\nimport { getTokenIcon } from 'lib/icons'\nimport { formatFloatTokenAmount } from 'lib/formatters'\nimport { ethers } from 'ethers'\n\nconst SPEEDS = ['slow', 'medium', 'fast', 'ape']\nconst walletDiscountBlogpost = 'https://blog.ambire.com/move-crypto-with-ambire-pay-gas-with-wallet-and-save-30-on-fees-35dca1002697'\nconst OVERPRICED_MULTIPLIER = 1.2\n// NOTE: Order matters for for secondary fort after the one by discount\nconst DISCOUNT_TOKENS_SYMBOLS = ['xWALLET', 'WALLET-STAKING', 'WALLET']\n\nfunction getBalance(token) {\n  const { balance, decimals, priceInUSD } = token\n  return balance / decimals * priceInUSD\n}\n\nconst WalletDiscountBanner = ({ currenciesItems, tokens, estimation, onFeeCurrencyChange, onDismiss, feeSpeed, isGasTankEnabled, network }) => {\n  if (estimation.selectedFeeToken?.symbol\n    && (DISCOUNT_TOKENS_SYMBOLS.includes(estimation.selectedFeeToken?.symbol)\n      || estimation.selectedFeeToken.discount)\n  ) {\n    return null\n  }\n  const walletDiscountTokens = [...tokens]\n    .filter(x => DISCOUNT_TOKENS_SYMBOLS.includes(x.symbol) && x.discount && isTokenEligible(x, feeSpeed, estimation, isGasTankEnabled, network))\n    .sort((a, b) =>\n      b.discount - a.discount\n      || ((!parseInt(a.balance) || !parseInt(b.balance)) ? getBalance(b) - getBalance(a) : 0)\n      || DISCOUNT_TOKENS_SYMBOLS.indexOf(a.symbol) - DISCOUNT_TOKENS_SYMBOLS.indexOf(b.symbol)\n    )\n\n  if (!walletDiscountTokens.length) return null\n\n  const discountToken = walletDiscountTokens[0]\n\n  const { discount } = discountToken\n  const eligibleWalletToken = currenciesItems.find(x => x.value && (x.value === 'WALLET' || x.value === discountToken.address))\n  const action = !!eligibleWalletToken\n    ? () => onFeeCurrencyChange(eligibleWalletToken)\n    : null\n  //TODO: go to swap \n  const actionTxt = !!eligibleWalletToken ? `USE ${discountToken.symbol}` : `BUY ${discountToken.symbol}`\n  const showSwap = !action\n\n  return (\n    <div className='wallet-discount-banner row'>\n      <div className='row'>\n        Get {discount * 100} <FaPercentage /> fees discount with &nbsp;<strong>$WALLET</strong> &nbsp;\n        <a\n          className=\"address row\"\n          href={walletDiscountBlogpost}\n          target=\"_blank\"\n          rel=\"noreferrer noopener\">\n          <MdInfoOutline />\n        </a>\n      </div>\n      {!!action && <Button onClick={action} mini>\n        {actionTxt}\n      </Button>}\n      {showSwap && <div className='swap-info'>\n        You can get $WALLET, just use the &nbsp;\n        <NavLink className='link' to={'/wallet/swap'} onClick={onDismiss}>\n          Swap\n        </NavLink> menu on the left!\n      </div>}\n    </div>\n  )\n}\n\nconst mapGasTankTokens = nativePrice => item => {\n  const nativeRate = item.address === '0x0000000000000000000000000000000000000000' ? null : nativePrice / item.price\n  return {\n    ...item,\n    symbol: item.symbol.toUpperCase(),\n    balance: ethers.utils.parseUnits(\n      item.balance.toFixed(item.decimals).toString(),\n      item.decimals\n    ).toString(),\n    nativeRate\n  }\n}\n\nexport function FeeSelector({ disabled, signer, estimation, network, setEstimation, feeSpeed, setFeeSpeed, onDismiss, isGasTankEnabled }) {\n  const [editCustomFee, setEditCustomFee] = useState(false)\n  if (!estimation) return (<Loading />)\n  // Only check for insufficient fee in relayer mode (.feeInUSD is available)\n  // Otherwise we don't care whether the user has enough for fees, their signer wallet will take care of it\n  const insufficientFee = estimation && estimation.feeInUSD\n    && !isTokenEligible(estimation.selectedFeeToken, feeSpeed, estimation, isGasTankEnabled, network)\n  if (estimation && !estimation.success) return (!checkIfDAppIncompatible(estimation.message) ?\n    <FailingTxn\n      message={<>The current transaction batch cannot be sent because it will fail: {mapTxnErrMsg(estimation.message)}</>}\n      tooltip={getErrHint(estimation.message)}\n    /> : <DAppIncompatibilityWarningMsg \n            title={'Unable to send transaction'}\n            msg={getErrHint(estimation.message)}\n          />)\n\n  if (!estimation.feeInNative) return (<></>)\n  if (estimation && !estimation.feeInUSD && estimation.gasLimit < 40000) {\n    return (<div>\n      <b>WARNING:</b> Fee estimation unavailable when you're doing your first account transaction and you are not connected to a relayer. You will pay the fee from <b>{signer.address}</b>, make sure you have {network.nativeAssetSymbol} there.\n    </div>)\n  }\n  if (estimation && estimation.feeInUSD && !estimation.remainingFeeTokenBalances) {\n    return (<div className='balance-error'>Internal error: fee balances not available. This should never happen, please report this on help.ambire.com</div>)\n  }\n\n  const { nativeAssetSymbol } = network\n  const gasTankTokens = estimation.gasTank?.map(mapGasTankTokens(estimation.nativeAssetPriceInUSD))\n  const tokens = (isGasTankEnabled && gasTankTokens?.length)\n    ? gasTankTokens\n    // fallback to the native asset if fee tokens cannot be retrieved for wh  atever reason\n    : estimation.remainingFeeTokenBalances || [{ symbol: nativeAssetSymbol, decimals: 18, address: '0x0000000000000000000000000000000000000000' }]\n\n  const onFeeCurrencyChange = ({ value, label}) => {\n    const token = tokens.find(({ address, symbol }) => (address === value) && (symbol === label))\n    setEstimation({ ...estimation, selectedFeeToken: token })\n  }\n\n  const currenciesItems = tokens\n    // NOTE: filter by slowest and then will disable the higher fees speeds otherwise \n    // it will just hide the token from the select\n    .sort((a, b) =>\n    (isTokenEligible(b, SPEEDS[0], estimation, isGasTankEnabled, network) - isTokenEligible(a, SPEEDS[0], estimation, isGasTankEnabled, network))\n    || (DISCOUNT_TOKENS_SYMBOLS.indexOf(b.symbol) - DISCOUNT_TOKENS_SYMBOLS.indexOf(a.symbol))\n    || ((b.discount || 0) - (a.discount || 0))\n    || a?.symbol.toUpperCase().localeCompare(b?.symbol.toUpperCase())\n  )\n    .map(({ address, symbol, discount, network: tokenNetwork, icon, ...rest }) => ({\n      disabled: !isTokenEligible({address, symbol, discount, ...rest }, SPEEDS[0], estimation, isGasTankEnabled, network),\n      icon: icon || (address ? getTokenIcon(isGasTankEnabled ? tokenNetwork : network.id, address) : null),\n      label: symbol,\n      value: address || symbol,\n      ...(discount ? {\n        extra: <div className='discount'> - {discount * 100} <FaPercentage /> </div>\n      } : {})\n    }))\n\n  const feeCurrencySelect = estimation.feeInUSD ? (<>\n    <div className='section'>\n      <div className='section-title'>Fee Currency</div>\n      <Select\n        className=\"fee-select\"\n        disabled={disabled}\n        defaultValue={estimation.selectedFeeToken?.address || estimation.selectedFeeToken?.symbol}\n        items={currenciesItems}\n        onChange={onFeeCurrencyChange}\n      />\n    </div>\n  </>) : (<></>)\n\n  const { discount = 0, symbol, nativeRate = null, decimals } = estimation.selectedFeeToken || {}\n\n  const setCustomFee = value => setEstimation(prevEstimation => ({\n    ...prevEstimation,\n    customFee: value\n  }))\n\n  const selectFeeSpeed = speed => {\n    setFeeSpeed(speed)\n    setCustomFee(null)\n    setEditCustomFee(false)\n  }\n\n  if (insufficientFee) {\n    const sufficientSpeeds = SPEEDS.filter((speed, i) => isTokenEligible(estimation.selectedFeeToken, speed, estimation, isGasTankEnabled, network))\n    const highestSufficientSpeed = sufficientSpeeds[sufficientSpeeds.length - 1]\n    setFeeSpeed(highestSufficientSpeed)\n  }\n\n  const checkIsSelectorDisabled = speed => {\n    const insufficientFee = !isTokenEligible(estimation.selectedFeeToken, speed, estimation, isGasTankEnabled, network)\n    return disabled || insufficientFee\n  }\n\n  const feeAmountSelectors = SPEEDS.map(speed => {\n    const isETH = symbol === 'ETH' && nativeAssetSymbol === 'ETH'\n    const {\n      feeInFeeToken,\n      feeInUSD,\n      // NOTE: get the estimation res data w/o custom fee for the speeds\n    } = getFeesData({ ...estimation.selectedFeeToken }, { ...estimation, customFee: null }, speed, isGasTankEnabled, network)\n    const discountInFeeToken = getDiscountApplied(feeInFeeToken, discount)\n    const discountInFeeInUSD = getDiscountApplied(feeInUSD, discount)\n\n    const baseFeeInFeeToken = feeInFeeToken + discountInFeeToken\n    const baseFeeInFeeUSD = feeInUSD ? feeInUSD + discountInFeeInUSD : null\n\n    const showInUSD = (nativeRate !== null) && baseFeeInFeeUSD\n\n    return (\n      <div\n        key={speed}\n        className={`feeSquare${!estimation.customFee && feeSpeed === speed ? ' selected' : ''}${checkIsSelectorDisabled(speed) ? ' disabled' : ''}`}\n        onClick={() => !checkIsSelectorDisabled(speed) && selectFeeSpeed(speed)}\n      >\n        {!!discount && <FaPercentage className='discount-badge' />}\n        <div className='speed'>{speed}</div>\n        <div className='feeEstimation'>\n          {(isETH ? 'Ξ ' : '')\n            + (showInUSD ? `$${formatFloatTokenAmount(baseFeeInFeeUSD, true, 4)}` : formatFloatTokenAmount(baseFeeInFeeToken, true, decimals))\n            + (!isETH && !showInUSD ? ` ${estimation.selectedFeeToken.symbol}` : '')\n          }\n        </div>\n        {!isETH && !showInUSD && <div className='feeEstimation symbol'>\n          {estimation.selectedFeeToken.symbol}\n        </div>}\n      </div>\n    )\n  })\n\n  const {\n    feeInFeeToken,\n    feeInUSD,\n    savedGas,\n  } = getFeesData(estimation.selectedFeeToken, estimation, feeSpeed, isGasTankEnabled, network)\n\n  const {\n    feeInFeeToken: minFee,\n    feeInUSD: minFeeUSD,\n  } = getFeesData({ ...estimation.selectedFeeToken }, { ...estimation, customFee: null }, 'slow', isGasTankEnabled, network)\n\n  const {\n    feeInFeeToken: maxFee,\n    feeInUSD: maxFeeUSD,\n  } = getFeesData({ ...estimation.selectedFeeToken }, { ...estimation, customFee: null }, 'ape', isGasTankEnabled, network)\n\n  const discountMin = getDiscountApplied(minFee, discount)\n  const discountMax = getDiscountApplied(maxFee, discount)\n\n  const discountInFeeToken = getDiscountApplied(feeInFeeToken, discount)\n  const discountInUSD = getDiscountApplied(feeInUSD, discount)\n  const discountBaseMinInUSD = getDiscountApplied(minFeeUSD, discount)\n  const discountBaseMaxInUSD = getDiscountApplied(maxFeeUSD, discount)\n\n  // Fees with no discounts applied\n  const baseFeeInFeeToken = feeInFeeToken + discountInFeeToken\n  const baseFeeInUSD = feeInUSD + discountInUSD\n  const baseMinFee = minFee + discountMin\n  const baseMaxFee = (maxFee + discountMax) * OVERPRICED_MULTIPLIER\n  const baseMinFeeUSD = minFeeUSD + discountBaseMinInUSD\n  const baseMaxFeeUSD = (maxFeeUSD + discountBaseMaxInUSD) * OVERPRICED_MULTIPLIER\n\n  const isUnderpriced = !!estimation.customFee\n    && !isNaN(parseFloat(estimation.customFee))\n    && (baseFeeInFeeToken < baseMinFee)\n\n  const isOverpriced = !!estimation.customFee\n    && !isNaN(parseFloat(estimation.customFee))\n    && (baseFeeInFeeToken > baseMaxFee)\n\n  return (<>\n    {insufficientFee ?\n      (<div className='balance-error'>\n        Insufficient balance for the fee.<br />Accepted tokens: {(estimation.remainingFeeTokenBalances || []).map(x => x.symbol).join(', ')}\n        { isGasTankEnabled && <div>Disable your Gas Tank to use the default fee tokens.</div> }\n      </div>)\n      : feeCurrencySelect\n    }\n\n    {WalletDiscountBanner({\n      selectedFeeToken: estimation.selectedFeeToken,\n      currenciesItems,\n      tokens,\n      estimation,\n      onFeeCurrencyChange,\n      onDismiss,\n      feeSpeed,\n      isGasTankEnabled,\n      network\n    })}\n\n    <div className='section-title'>\n      <span>Transaction Speed</span>\n      { network.isGasTankAvailable && \n        <span>Gas Tank: { isGasTankEnabled ? \n          (<span className='gas-tank-enabled'>Enabled</span>) : \n          (<span className='gas-tank-disabled'>Disabled</span>)}\n        </span> \n      }\n    </div>\n    <div className='fee-selector'>\n      <div className='section'>\n        <div id='fee-selector'>{feeAmountSelectors}</div>\n        {\n          !editCustomFee ?\n            <div id='edit-custom-fee' onClick={() => setEditCustomFee(true)}>\n              <MdEdit />Edit fee\n            </div>\n            :\n            <div id='custom-fee-selector'>\n              <div className='title'>Custom Fee ({symbol})</div>\n              <TextInput\n                small\n                placeholder='Enter amount'\n                className={`${estimation.customFee ? 'selected' : ''}`}\n                onChange={value => setCustomFee(value)}\n                value={estimation.customFee}\n              />\n              {isUnderpriced &&\n                <div className='price-warning'>\n                  <div>Custom Fee too low. You can try to \"sign and send\" the transaction but most probably it will fail.</div>\n                  <div>Min estimated fee: &nbsp;\n                    {<Button textOnly\n                      onClick={() => setCustomFee(baseMinFee)}\n                    >\n                      {baseMinFee} {symbol}\n                    </Button>}\n                    {!isNaN(baseMinFeeUSD) &&\n                      <span>&nbsp; (~${formatFloatTokenAmount(baseMinFeeUSD, true, 4)}) </span>\n                    }\n                  </div>\n                </div>\n              }\n              {isOverpriced &&\n                <div className='price-warning'>\n                  <div>Custom Fee is higher than the APE speed. You will pay more than probably needed. Make sure you know what are you doing!</div>\n                  <div>Recommended max fee: &nbsp;\n                    {<Button textOnly\n                      onClick={() => setCustomFee(baseMaxFee)}\n                    >\n                      {baseMaxFee} {symbol}\n                    </Button>}\n                    {!isNaN(baseMaxFeeUSD) &&\n                      <span>&nbsp; (~${formatFloatTokenAmount(baseMaxFeeUSD, true, 4)}) </span>\n                    }\n                  </div>\n                </div>\n              }\n            </div>\n        }\n      </div>\n\n      <div className='fees-breakdown'>\n        {(<div className='fee-row native-fee-estimation'>\n          <div>\n            Fee {!!discount && <span className='discount-label'>*</span>}\n            {!!(discount && DISCOUNT_TOKENS_SYMBOLS.includes(estimation.selectedFeeToken?.symbol)) &&\n              <a\n                className=\"address row discount-label\"\n                href={walletDiscountBlogpost}\n                target=\"_blank\"\n                rel=\"noreferrer\">\n                &nbsp;<MdInfoOutline />\n              </a>}:\n          </div>\n          <div className='fee-amounts'>\n            {!isNaN(baseFeeInUSD) &&\n              <div>\n                ~${formatFloatTokenAmount(baseFeeInUSD, true, 4)}\n              </div>\n            }\n            {!isNaN(baseFeeInFeeToken) && <div>\n              {formatFloatTokenAmount(baseFeeInFeeToken, true, decimals) + ' ' + estimation?.selectedFeeToken?.symbol}\n            </div>\n            }\n          </div>\n        </div>)}\n\n        {!!discount && (<div className='fee-row native-fee-estimation discount-label'>\n          <div>\n            You save ({discount * 100}%):\n          </div>\n          <div className='fee-amounts'>\n            <div>\n              ~${formatFloatTokenAmount(discountInUSD, true, 4)}\n            </div>\n            {/* <div>\n              {discountInFeeToken + ' ' + estimation.selectedFeeToken.symbol}\n            </div> */}\n          </div>\n        </div>)}\n\n        {!!discount && (<div className='fee-row native-fee-estimation discount-label'>\n          <div>\n            You pay:\n          </div>\n          <div className='fee-amounts'>\n            <div>\n              ~${formatFloatTokenAmount(feeInUSD, true, 4)}\n            </div>\n          </div>\n        </div>)}\n        {!isGasTankEnabled && !isNaN((feeInUSD / estimation.gasLimit) * savedGas) && \n            <div className='fee-row native-fee-estimation warning-label'>\n              <div>\n              Enable Gas Tank to save:\n              </div>\n              <div className='fee-amounts'>\n                <div>\n                  ${formatFloatTokenAmount(((feeInUSD / estimation.gasLimit) * savedGas), true, 4)}\n                </div>\n              </div>\n            </div>}\n        {!!isGasTankEnabled && (<>\n          <div className='fee-row native-fee-estimation discount-label'>\n            <div>\n              Gas Tank fee token balance:\n            </div>\n            <div className='fee-amounts'>\n              <div>\n                ${formatFloatTokenAmount(estimation.selectedFeeToken.balanceInUSD, true, 4)}\n              </div>\n            </div>\n          </div>\n         {!isNaN((feeInUSD / estimation.gasLimit) * savedGas) && \n            <div className='fee-row native-fee-estimation discount-label'>\n              <div>\n                Gas Tank saves you:\n              </div>\n              <div className='fee-amounts'>\n                <div>\n                  ${formatFloatTokenAmount(((feeInUSD / estimation.gasLimit) * savedGas), true, 4)}\n                </div>\n              </div>\n            </div>}\n        </>)}\n      </div>\n    </div>\n\n    {!estimation.feeInUSD ?\n      (<span className='no-relayer-msg'><b>WARNING:</b> Paying fees in tokens other than {nativeAssetSymbol} is unavailable because you are not connected to a relayer. You will pay the fee from <b>{signer.address}</b>.</span>)\n      : (<></>)}\n  </>)\n}\n\nexport function FailingTxn({ message, tooltip = '' }) {\n  return (<div className='failingTxn'>\n    <ToolTip label={tooltip}>\n      <div className='error-title'><AiOutlineWarning></AiOutlineWarning> Warning</div>\n      <div className='error-message'>{message}</div>\n    </ToolTip>\n  </div>)\n}","import { useState, useRef, useEffect } from 'react'\nimport { Button, Loading, TextInput } from 'components/common'\nimport { isTokenEligible } from './helpers'\nimport { MdCheck, MdCheckCircle, MdOutlineCheck, MdOutlineClose } from 'react-icons/md'\n\nexport default function Actions({ \n    estimation, \n    feeSpeed, \n    approveTxn, \n    rejectTxn, \n    cancelSigning, \n    signingStatus, \n    isGasTankEnabled, \n    network\n  }) {\n  const [quickAccCredentials, setQuickAccCredentials] = useState({ code: '', passphrase: '' })\n  // reset this every time the signing status changes\n  useEffect(() => !signingStatus && setQuickAccCredentials(prev => ({ ...prev, code: '' })), [signingStatus])\n\n  const form = useRef(null)\n\n  const rejectButton = rejectTxn && (\n    // WARNING: DO NOT remove type='button' here, it indicates that this button is not a submit button in the <form>\n    // if it is, pressing Enter will reject the transaction rather than submit it\n    <Button danger icon={<MdOutlineClose/>} type='button' className='rejectTxn' onClick={rejectTxn}>Reject</Button>\n  )\n  const insufficientFee = estimation && estimation.feeInUSD\n    && !isTokenEligible(estimation.selectedFeeToken, feeSpeed, estimation, isGasTankEnabled, network)\n  const willFail = (estimation && !estimation.success) || insufficientFee\n  if (willFail) {\n    return (<div className='buttons'>\n      {rejectButton}\n    </div>)\n  }\n\n  const signButtonLabel = signingStatus && signingStatus.inProgress ?\n    <><Loading/>Signing...</>\n    : <><MdOutlineCheck/>Sign and send</>\n\n  const isRecoveryMode = signingStatus && signingStatus.finalBundle && signingStatus.finalBundle.recoveryMode\n  if (signingStatus && signingStatus.quickAcc) {\n    return (<>\n      {\n        signingStatus.confCodeRequired ?\n          <div className='confirmation-code-info'>\n            <div className='confirmation-code-info-title'><MdCheckCircle/>Confirmation</div>\n            <div className='confirmation-code-info-message'>\n              {signingStatus.confCodeRequired === 'otp' ? <>Please enter your OTP code and your password.</> : null}\n              {signingStatus.confCodeRequired === 'email' ?\n                (isRecoveryMode\n                  ? <>A confirmation code was sent to your email, please enter it to initiate the recovery.</>\n                  : <>A confirmation code was sent to your email, please enter it along with your password.</>)\n                      : null\n\t      }\n            </div>\n          </div>\n          :\n          null\n      }\n  \n      <form ref={form} className='quickAccSigningForm' onSubmit={e => { e.preventDefault() }}>\n        {signingStatus.confCodeRequired === 'notRequired' &&\n          <p className='code-2fa-not-required-msg'>You already sent 3 or more transactions to this address, confirmation code is not needed.</p>\n        }\n        <div className='inputs-container'>\n          <TextInput\n            small\n            password\n            required\n            minLength={3}\n            placeholder='Password'\n            value={quickAccCredentials.passphrase}\n            style={isRecoveryMode ? { visibility: 'hidden' } : {} }\n            disabled={isRecoveryMode}\n            onChange={value => setQuickAccCredentials({ ...quickAccCredentials, passphrase: value })}\n          ></TextInput>\n          {/* Changing the autoComplete prop to a random string seems to disable it in more cases */}\n          {signingStatus.confCodeRequired !== 'notRequired' &&\n            <TextInput\n              small\n              pattern='[0-9]+'\n              title='Confirmation code should be 6 digits'\n              autoComplete='nope'\n              required minLength={6} maxLength={6}\n              placeholder={signingStatus.confCodeRequired === 'otp' ? 'Authenticator OTP code' : 'Confirmation code'}\n              value={quickAccCredentials.code}\n              onChange={value => setQuickAccCredentials({ ...quickAccCredentials, code: value })}\n            ></TextInput>\n          }\n        </div>\n        <div className='buttons'>\n          <Button\n            clear\n            disabled={signingStatus && signingStatus.inProgress}\n            icon={<MdOutlineClose/>}\n            type='button'\n            className='cancelSigning'\n            onClick={cancelSigning}\n          >\n            Cancel\n          </Button>\n          <Button \n            className='confirmSigning'\n            onClick={() => {\n              if (!form.current.checkValidity()) return\n              approveTxn({ quickAccCredentials })\n            }}\n          >\n            { signingStatus && signingStatus.inProgress ? <Loading/> : <><MdCheck/> Confirm</>}\n          </Button>\n        </div>\n      </form>\n    </>)\n  }\n\n  return (<div className='buttons'>\n      {rejectButton}\n      <Button className='approveTxn' disabled={!estimation || signingStatus} onClick={approveTxn}>\n        {signButtonLabel}\n      </Button>\n  </div>)\n}\n","import { Interface, hexlify } from 'ethers/lib/utils'\nconst IdentityInterface = new Interface(require('adex-protocol-eth/abi/Identity5.2'))\nconst FactoryInterface = new Interface(require('adex-protocol-eth/abi/IdentityFactory5.2'))\n\nexport async function sendNoRelayer ({ finalBundle, account, network, wallet, estimation, feeSpeed, provider }) {\n    const { signer } = finalBundle\n    // @TODO: in case we need deploying, run using deployAndCall pipeline with signed msgs\n    // @TODO: quickAccManager\n    if (signer.quickAccManager) throw new Error('quickAccManager not supported in relayerless mode yet')\n    // currently disabled quickAccManager cause 1) we don't have a means of getting the second sig 2) we still have to sign txes so it's inconvenient\n    // if (signer.quickAccManager) await finalBundle.sign(wallet)\n    //const [to, data] = signer.quickAccManager ? [signer.quickAccManager, QuickAccManagerInterface.encodeFunctionData('send', [finalBundle.identity, [signer.timelock, signer.one, signer.two], [false, finalBundle.signature, '0x']])] :\n\n    // NOTE: just adding values to gasLimit is bad because 1) they're hardcoded estimates\n    // and 2) the fee displayed in the UI does not reflect that\n    const isDeployed = await provider.getCode(finalBundle.identity).then(code => code !== '0x')\n    let gasLimit\n    let to, data\n    if (isDeployed) {\n      gasLimit = estimation.gasLimit + 20000\n      to = finalBundle.identity\n      data = IdentityInterface.encodeFunctionData('executeBySender', [finalBundle.txns])\n    } else {\n      await finalBundle.getNonce(provider)\n      // just some hardcoded value to make the signing pass\n      finalBundle.gasLimit = 400000\n      await finalBundle.sign(wallet)\n      to = account.identityFactoryAddr\n      data = FactoryInterface.encodeFunctionData('deployAndExecute', [account.bytecode, account.salt, finalBundle.txns, finalBundle.signature])\n      gasLimit = (await provider.estimateGas({ to, data, from: signer.address })).toNumber() + 20000\n    }\n\n    const txn = {\n      from: signer.address,\n      to, data,\n      gas: hexlify(gasLimit),\n      gasPrice: hexlify(Math.floor(estimation.feeInNative[feeSpeed] / estimation.gasLimit * 1e18)),\n      nonce: hexlify(await provider.getTransactionCount(signer.address))\n    }\n    try {\n      let txId\n      if (!wallet.sendTransaction) {\n        // HW wallets which only sign\n        const signed = await wallet.signTransaction(txn)\n        txId = (await provider.sendTransaction(signed)).hash\n      } else {\n        // web3 injectors which can't sign, but can sign+send\n        // they also don't like the gas arg they fully control the chain ID\n        if (wallet.provider) {\n          const { chainId } = await wallet.provider.getNetwork()\n          if (network.chainId !== chainId) throw new Error(`Connected to the wrong network: please switch to ${network.name}`)\n          txId = (await wallet.sendTransaction({ from: txn.from, to: txn.to, data: txn.data, gasPrice: txn.gasPrice, nonce: txn.nonce })).hash\n        } else { // implementation of sendTransaction in getWallet\n          txId = (await wallet.sendTransaction({ from: txn.from, to: txn.to, data: txn.data, gasPrice: txn.gasPrice, gas: txn.gas, nonce: txn.nonce, chainId: network.chainId })).hash\n        }\n\n      }\n      return { success: true, txId }\n    } catch(e) {\n      if (e.code === 'INSUFFICIENT_FUNDS') throw new Error(`Insufficient gas fees: you need to have ${network.nativeAssetSymbol} on ${signer.address}`)\n      throw e\n    }\n  }\n","//import { GrInspect } from 'react-icons/gr'\n// GiObservatory is also interesting\nimport { GiGorilla } from 'react-icons/gi'\nimport { FaChevronLeft } from 'react-icons/fa'\nimport { MdOutlineClose, MdOutlineInfo, MdWarning } from 'react-icons/md'\nimport './SendTransaction.scss'\nimport { useEffect, useState, useMemo, useRef } from 'react'\nimport { Bundle } from 'adex-protocol-eth/js'\nimport { Wallet } from 'ethers'\nimport { Interface } from 'ethers/lib/utils'\nimport * as blockies from 'blockies-ts'\nimport { useToasts } from 'hooks/toasts'\nimport { getWallet } from 'lib/getWallet'\nimport accountPresets from 'ambire-common/src/constants/accountPresets'\nimport { networkIconsById } from 'consts/networks'\nimport { FeeSelector, FailingTxn } from './FeeSelector'\nimport Actions from './Actions'\nimport TxnPreview from 'components/common/TxnPreview/TxnPreview'\nimport { sendNoRelayer } from './noRelayer'\nimport {\n  isTokenEligible,\n  // getFeePaymentConsequences,\n  getFeesData,\n  toHexAmount\n } from './helpers'\nimport { fetchPost } from 'lib/fetch'\nimport { toBundleTxn } from 'ambire-common/src/services/requestToBundleTxn'\nimport { getProvider } from 'lib/provider'\nimport { MdInfo } from 'react-icons/md'\nimport { useCallback } from 'react'\nimport { ToolTip, Button, Loading } from 'components/common'\nimport { ethers } from 'ethers'\nimport { Checkbox } from 'components/common'\n\nconst ERC20 = new Interface(require('adex-protocol-eth/abi/ERC20'))\n\nconst DEFAULT_SPEED = 'fast'\nconst REESTIMATE_INTERVAL = 15000\n\nconst REJECT_MSG = 'Ambire user rejected the request'\n\nconst WALLET_TOKEN_SYMBOLS = ['xWALLET', 'WALLET']\n\nconst isInt = x => !isNaN(x) && x !== null\n\nconst getDefaultFeeToken = (remainingFeeTokenBalances, network, feeSpeed, estimation, currentAccGasTankState) => {\n  if(!remainingFeeTokenBalances?.length) {\n    return { symbol: network.nativeAssetSymbol, decimals: 18, address: '0x0000000000000000000000000000000000000000' }\n  }\n\n  return remainingFeeTokenBalances\n  .sort((a, b) =>\n    (WALLET_TOKEN_SYMBOLS.indexOf(b?.symbol) - WALLET_TOKEN_SYMBOLS.indexOf(a?.symbol))\n    || ((b?.discount || 0) - (a?.discount || 0))\n    || a?.symbol.toUpperCase().localeCompare(b?.symbol.toUpperCase())\n  )\n  .find(token => isTokenEligible(token, feeSpeed, estimation, currentAccGasTankState, network))\n  || remainingFeeTokenBalances[0]\n}\n\nfunction makeBundle(account, networkId, requests) {\n  const bundle = new Bundle({\n    network: networkId,\n    identity: account.id,\n    // checking txn isArray because sometimes we receive txn in array from walletconnect. Also we use Array.isArray because txn object can have prop 0\n    txns: requests.map(({ txn }) => toBundleTxn(Array.isArray(txn) ? txn[0] : txn, account.id)),\n    signer: account.signer\n  })\n  bundle.extraGas = requests.map(x => x.extraGas || 0).reduce((a, b) => a + b, 0)\n  bundle.requestIds = requests.map(x => x.id)\n\n  // Attach bundle's meta\n  if (requests.some(item => item.meta)) {\n    bundle.meta = {}\n\n    if (requests.some(item => item.meta?.addressLabel)) {\n      bundle.meta.addressLabel = requests.map(x => !!x.meta?.addressLabel ? x.meta.addressLabel : { addressLabel: '', address: ''})\n    }\n\n    const xWalletReq = requests.find(x => x.meta?.xWallet)\n    if (xWalletReq) {\n      bundle.meta.xWallet = xWalletReq.meta.xWallet\n    }\n  }\n\n  return bundle\n}\n\nfunction getErrorMessage(e) {\n  if (e && e.message === 'NOT_TIME') {\n    return 'Your 72 hour recovery waiting period still hasn\\'t ended. You will be able to use your account after this lock period.'\n  } else if (e && e.message === 'WRONG_ACC_OR_NO_PRIV') {\n    return 'Unable to sign with this email/password account. Please contact support.'\n  // NOTE: is INVALID_SIGNATURE even a real error?\n  } else if (e && e.message === 'INVALID_SIGNATURE') {\n    return 'Invalid signature. This may happen if you used password/derivation path on your hardware wallet.'\n  } else if (e && e.message === 'INSUFFICIENT_PRIVILEGE') {\n    return 'Wrong signature. This may happen if you used password/derivation path on your hardware wallet.'\n  } else {\n    return e.message || e\n  }\n}\n\nexport default function SendTransaction({ relayerURL, accounts, network, selectedAcc, requests, resolveMany, replacementBundle, replaceByDefault, mustReplaceNonce, onBroadcastedTxn, onDismiss, gasTankState }) {\n  // NOTE: this can be refactored at a top level to only pass the selected account (full object)\n  // keeping it that way right now (selectedAcc, accounts) cause maybe we'll need the others at some point?\n  const account = accounts.find(x => x.id === selectedAcc)\n\n  // Also filtered in App.js, but better safe than sorry here\n  const eligibleRequests = useMemo(() => requests\n    .filter(({ type, chainId, account, txn }) =>\n      type === 'eth_sendTransaction'\n      && chainId === network.chainId\n      && account === selectedAcc\n      && txn && (!txn.from || txn.from.toLowerCase() === selectedAcc.toLowerCase())\n    // we only need to update on change of IDs\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    ), [requests.map(x => x.id).join(','), network.chainId, selectedAcc])\n  const bundle = useMemo(\n    () => replacementBundle || makeBundle(account, network.id, eligibleRequests),\n    [replacementBundle, network.id, account, eligibleRequests]\n  )\n\n  if (!account || !bundle.txns.length) return (<div id='sendTransaction'>\n    <h3 className='error'>SendTransactions: No account or no requests: should never happen.</h3>\n  </div>)\n  return (<SendTransactionWithBundle\n    relayerURL={relayerURL}\n    bundle={bundle}\n    replaceByDefault={replaceByDefault}\n    mustReplaceNonce={mustReplaceNonce}\n    network={network}\n    account={account}\n    resolveMany={resolveMany}\n    onBroadcastedTxn={onBroadcastedTxn}\n    onDismiss={onDismiss}\n    gasTankState={gasTankState}\n  />)\n}\n\nfunction SendTransactionWithBundle({ bundle, replaceByDefault, mustReplaceNonce, network, account, resolveMany, relayerURL, onBroadcastedTxn, onDismiss, gasTankState }) {\n  const currentAccGasTankState = network.isGasTankAvailable ? \n    gasTankState.find(i => i.account === account.id) : \n    { account: account.id, isEnabled: false }\n  const [estimation, setEstimation] = useState(null)\n  const [replaceTx, setReplaceTx] = useState(!!replaceByDefault)\n  const [signingStatus, setSigningStatus] = useState(false)\n  const [feeSpeed, setFeeSpeed] = useState(DEFAULT_SPEED)\n  const { addToast } = useToasts()\n\n  // Safety check: make sure our input parameters make sense\n  if (isInt(mustReplaceNonce) && !(replaceByDefault || isInt(bundle.nonce))) {\n    console.error('ERROR: SendTransactionWithBundle: mustReplaceNonce is set but we are not using replacementBundle or replaceByDefault')\n    console.error('ERROR: SendTransactionWithBundle: This is a huge logical error as mustReplaceNonce is intended to be used only when we want to replace a txn')\n  }\n\n  // Keep track of unmounted: we need this to not try to modify state after async actions if the component is unmounted\n  const isMounted = useRef(false)\n  useEffect(() => {\n    isMounted.current = true\n    return () => { isMounted.current = false }\n  })\n\n  // Reset the estimation when there are no txns in the bundle\n  useEffect(() => {\n    if (!bundle.txns.length) return\n    setEstimation(null)\n  }, [bundle, setEstimation])\n\n  // Estimate the bundle & reestimate periodically\n  const currentBundle = useRef(null)\n  currentBundle.current = bundle\n  useEffect(() => {    // eslint-disable-next-line react-hooks/exhaustive-deps\n    // We don't need to reestimate the fee when a signing process is in progress\n    if (signingStatus) return\n    // nor when there are no txns in the bundle, if this is even possible\n    if (!bundle.txns.length) return\n\n    // track whether the effect has been unmounted\n    let unmounted = false\n\n    // Note: currently, there's no point of getting the nonce if the bundle already has a nonce\n    // We may want to change this if we make a check if the currently replaced txn was already mined\n    const reestimate = () => (relayerURL\n        ? bundle.estimate({ relayerURL, fetch, replacing: !!bundle.minFeeInUSDPerGas, getNextNonce: true, gasTank: currentAccGasTankState.isEnabled })\n        : bundle.estimateNoRelayer({ provider: getProvider(network.id) })\n    )\n      .then((estimation) => {\n        if (unmounted || bundle !== currentBundle.current) return\n        estimation.relayerless = !relayerURL\n        const gasTankTokens = estimation.gasTank?.map(item => { \n          return { \n            ...item,\n            symbol: item.symbol.toUpperCase(), \n            balance: ethers.utils.parseUnits(item.balance.toFixed(item.decimals).toString(), item.decimals).toString(),\n            nativeRate: item.address === '0x0000000000000000000000000000000000000000' ? null : estimation.nativeAssetPriceInUSD / item.price\n          }\n        })\n        if (currentAccGasTankState.isEnabled) estimation.remainingFeeTokenBalances = gasTankTokens\n        estimation.selectedFeeToken = getDefaultFeeToken(estimation.remainingFeeTokenBalances, network, feeSpeed, estimation, currentAccGasTankState.isEnabled, network)\n        setEstimation(prevEstimation => {\n          if (prevEstimation && prevEstimation.customFee) return prevEstimation\n          if (estimation.remainingFeeTokenBalances) {\n            // If there's no eligible token, set it to the first one cause it looks more user friendly (it's the preferred one, usually a stablecoin)\n            estimation.selectedFeeToken = (\n                prevEstimation\n                && isTokenEligible(prevEstimation.selectedFeeToken, feeSpeed, estimation, currentAccGasTankState.isEnabled, network)\n                && prevEstimation.selectedFeeToken\n              )\n              || getDefaultFeeToken(estimation.remainingFeeTokenBalances, network, feeSpeed, estimation, currentAccGasTankState.isEnabled, network)\n          }\n          return estimation\n        })\n      })\n      .catch(e => {\n        if (unmounted) return\n        console.log('estimation error', e)\n        addToast(`Estimation error: ${e.message || e}`, { error: true })\n      })\n\n    reestimate()\n    const intvl = setInterval(reestimate, REESTIMATE_INTERVAL)\n\n    return () => {\n      unmounted = true\n      clearInterval(intvl)\n    }\n  }, [bundle, setEstimation, feeSpeed, addToast, network, relayerURL, signingStatus, currentAccGasTankState.isEnabled ])\n\n  // The final bundle is used when signing + sending it\n  // the bundle before that is used for estimating\n  const getFinalBundle = useCallback(() => {\n    if (!relayerURL) {\n      return new Bundle({\n        ...bundle,\n        gasLimit: estimation.gasLimit,\n      })\n    }\n\n    const feeToken = estimation.selectedFeeToken\n\n    const {\n      feeInNative,\n      // feeInUSD, // don't need fee in USD for stables as it will work with feeInFeeToken\n      // Also it can be stable but not in USD\n      feeInFeeToken,\n      addedGas\n    } = getFeesData(feeToken, estimation, feeSpeed, currentAccGasTankState.isEnabled, network)\n    const feeTxn = feeToken.symbol === network.nativeAssetSymbol\n      // TODO: check native decimals\n      ? [accountPresets.feeCollector, toHexAmount(feeInNative, 18), '0x']\n      : [feeToken.address, '0x0', ERC20.encodeFunctionData('transfer', [\n        accountPresets.feeCollector,\n        toHexAmount(feeInFeeToken, feeToken.decimals)\n    ])]\n\n    const nextFreeNonce = estimation.nextNonce?.nonce\n    const nextNonMinedNonce = estimation.nextNonce?.nextNonMinedNonce\n    // If we've passed in a bundle, use it's nonce (when using a replacementBundle); else, depending on whether we want to replace the current pending bundle,\n    // either use the next non-mined nonce or the next free nonce\n    const nonce = isInt(bundle.nonce) ? bundle.nonce : (replaceTx ? nextNonMinedNonce : nextFreeNonce)\n\n    if (!!currentAccGasTankState.isEnabled) {\n      let gasLimit\n      if (bundle.txns.length > 1) gasLimit = estimation.gasLimit + (bundle.extraGas || 0)\n      else gasLimit = estimation.gasLimit\n\n      let value\n      if (feeToken.address === \"0x0000000000000000000000000000000000000000\") value = feeInNative\n      else {\n        const fToken = estimation.remainingFeeTokenBalances.find(i => i.id === feeToken.id)\n        value = fToken && estimation.feeInNative[feeSpeed] * fToken.nativeRate\n      }\n      \n      return new Bundle({\n        ...bundle,\n        gasTankFee: {\n          assetId: feeToken.id,\n          value: ethers.utils.parseUnits(value.toFixed(feeToken.decimals), feeToken.decimals).toString()\n        },\n        txns: [...bundle.txns],\n        gasLimit,\n        nonce\n      })\n    }\n\n    return new Bundle({\n      ...bundle,\n      txns: [...bundle.txns, feeTxn],\n      gasTankFee: null,\n      gasLimit: estimation.gasLimit + addedGas + (bundle.extraGas || 0),\n      nonce\n    })\n  }, [relayerURL, estimation, feeSpeed, currentAccGasTankState.isEnabled, network, bundle, replaceTx])\n\n  const approveTxnImpl = async () => {\n    if (!estimation) throw new Error('no estimation: should never happen')\n\n    const finalBundle = getFinalBundle()\n    const provider = getProvider(network.id)\n    const signer = finalBundle.signer\n\n    // a bit redundant cause we already called it at the beginning of approveTxn, but\n    // we need to freeze finalBundle in the UI in case signing takes a long time (currently only to freeze the fee selector)\n    setSigningStatus({ inProgress: true, finalBundle })\n\n    const wallet = getWallet({\n      signer,\n      signerExtra: account.signerExtra,\n      chainId: network.chainId\n    })\n\n    if (relayerURL) {\n      // Temporary way of debugging the fee cost\n      // const initialLimit = finalBundle.gasLimit - getFeePaymentConsequences(estimation.selectedFeeToken, estimation).addedGas\n      // finalBundle.estimate({ relayerURL, fetch }).then(estimation => console.log('fee costs: ', estimation.gasLimit - initialLimit), estimation.selectedFeeToken).catch(console.error)\n      await finalBundle.sign(wallet)\n      return await finalBundle.submit({ relayerURL, fetch })\n    } else {\n      return await sendNoRelayer({\n        finalBundle, account, network, wallet, estimation, feeSpeed, provider\n      })\n    }\n  }\n\n  const approveTxnImplQuickAcc = async ({ quickAccCredentials }) => {\n    if (!estimation) throw new Error('no estimation: should never happen')\n    if (!relayerURL) throw new Error('Email/Password account signing without the relayer is not supported yet')\n\n    const finalBundle = (signingStatus && signingStatus.finalBundle) || getFinalBundle()\n    const signer = finalBundle.signer\n\n    const canSkip2FA = signingStatus && signingStatus.confCodeRequired === 'notRequired'\n    const { signature, success, message, confCodeRequired } = await fetchPost(\n      `${relayerURL}/second-key/${bundle.identity}/${network.id}/sign`, {\n        signer, txns: finalBundle.txns, nonce: finalBundle.nonce, gasLimit: finalBundle.gasLimit,\n        ...(!canSkip2FA) && {code: quickAccCredentials && quickAccCredentials.code},\n        // This can be a boolean but it can also contain the new signer/primaryKeyBackup, which instructs /second-key to update acc upon successful signature\n        recoveryMode: finalBundle.recoveryMode,\n        canSkip2FA: canSkip2FA\n      }\n    )\n    if (!success) {\n      if (!message) throw new Error(`Secondary key: no success but no error message`)\n      if (message.includes('invalid confirmation code')) {\n        addToast('Unable to sign: wrong confirmation code', { error: true })\n        return\n      }\n      throw new Error(`Secondary key error: ${message}`)\n    }\n    if (confCodeRequired) {\n      setSigningStatus({ quickAcc: true, finalBundle, confCodeRequired })\n    } else {\n      if (!signature) throw new Error(`QuickAcc internal error: there should be a signature`)\n      if (!account.primaryKeyBackup) throw new Error(`No key backup found: you need to import the account from JSON or login again.`)\n      setSigningStatus({ quickAcc: true, inProgress: true, confCodeRequired: canSkip2FA ? 'notRequired' : undefined })\n      if (!finalBundle.recoveryMode) {\n        // Make sure we let React re-render without blocking (decrypting and signing will block)\n        await new Promise(resolve => setTimeout(resolve, 0))\n        const pwd = quickAccCredentials.passphrase || alert('Enter password')\n        const wallet = await Wallet.fromEncryptedJson(JSON.parse(account.primaryKeyBackup), pwd)\n        await finalBundle.sign(wallet)\n      } else {\n        // set both .signature and .signatureTwo to the same value: the secondary signature\n        // this will trigger a timelocked txn\n        finalBundle.signature = signature\n      }\n      finalBundle.signatureTwo = signature\n      return await finalBundle.submit({ relayerURL, fetch })\n    }\n  }\n\n  const approveTxn = ({ quickAccCredentials }) => {\n    if (signingStatus && signingStatus.inProgress) return\n    setSigningStatus(signingStatus || { inProgress: true })\n\n    if (account.signerExtra && account.signerExtra.type === 'ledger') {\n      addToast('Please confirm this transaction on your Ledger device.', { timeout: 10000 })\n    }\n\n    if (account.signerExtra && account.signerExtra.type === 'Lattice') {\n      addToast('Please confirm this transaction on your Lattice device.', { timeout: 10000 })\n    }\n\n    const requestIds = bundle.requestIds\n    const approveTxnPromise = bundle.signer.quickAccManager ?\n      approveTxnImplQuickAcc({ quickAccCredentials })\n      : approveTxnImpl()\n    approveTxnPromise.then(bundleResult => {\n      // special case for approveTxnImplQuickAcc: when a user interaction prevents the operation from completing\n      if (!bundleResult) return\n\n      // do not to call this after onDimiss, cause it might cause state to be changed post-unmount\n      if (isMounted.current) setSigningStatus(null)\n\n      // Inform everything that's waiting for the results (eg WalletConnect)\n      const skipResolve = !bundleResult.success && bundleResult.message && bundleResult.message.match(/underpriced/i)\n      if (!skipResolve && requestIds) resolveMany(requestIds, { success: bundleResult.success, result: bundleResult.txId, message: bundleResult.message })\n\n      if (bundleResult.success) {\n        onBroadcastedTxn(bundleResult.txId)\n        onDismiss()\n      } else {\n        // to force replacementBundle to be null, so it's not filled from previous state change in App.js in useEffect\n        // basically close the modal if the txn was already mined\n        if (bundleResult.message.includes('was already mined')) {\n          onDismiss()\n        }\n        addToast(`Transaction error: ${getErrorMessage(bundleResult)}`, { error: true })  //'unspecified error'\n      }\n    })\n    .catch(e => {\n      if (isMounted.current) setSigningStatus(null)\n      console.error(e)\n      if (e && e.message.includes('must provide an Ethereum address')) {\n        addToast(`Signing error: not connected with the correct address. Make sure you're connected with ${bundle.signer.address}.`, { error: true })\n      } else if (e && e.message.includes('0x6b0c')) {\n        // not sure if that's actually the case with this hellish error, but after unlocking the device it no longer appeared\n        // however, it stopped appearing after that even if the device is locked, so I'm not sure it's related...\n        addToast(`Ledger: unknown error (0x6b0c): is your Ledger unlocked and in the Ethereum application?`, { error: true })\n      } else {\n        addToast(`Signing error: ${getErrorMessage(e)}`, { error: true })\n      }\n    })\n  }\n\n  const rejectTxn = () => {\n    onDismiss()\n    bundle.requestIds && resolveMany(bundle.requestIds, { message: REJECT_MSG })\n  }\n\n  const accountAvatar = blockies.create({ seed: account.id }).toDataURL()\n\n  // `mustReplaceNonce` is set on speedup/cancel, to prevent the user from broadcasting the txn if the same nonce has been mined\n  const canProceed = isInt(mustReplaceNonce)\n    ? (\n      isInt(estimation?.nextNonce?.nextNonMinedNonce)\n        ? mustReplaceNonce >= estimation?.nextNonce?.nextNonMinedNonce\n        : null // null = waiting to get nonce data from relayer\n    )\n    : true\n\n  return (\n    <div id='sendTransaction'>\n      <div id=\"titleBar\">\n        <div className='dismiss' onClick={onDismiss}>\n          <FaChevronLeft size={35}/>\n          back\n          <ToolTip label=\"You can go back to the main dashboard and add more transactions to this bundle in order to sign & send them all at once.\">\n            <MdOutlineInfo size={25}/>\n          </ToolTip>\n        </div>\n      </div>\n\n      <div className='container'>\n        <div id='transactionPanel' className='panel'>\n          <div className='heading'>\n            <div className='title'>{ bundle.txns.length } Transaction{ bundle.txns.length > 1 ? 's' : '' } Waiting</div>\n          </div>\n          <div className='content'>\n            <div className={`listOfTransactions${bundle.requestIds ? '' : ' frozen'}`}>\n              {bundle.txns.map((txn, i) => {\n                const isFirstFailing = estimation && !estimation.success && estimation.firstFailing === i\n                // we need to re-render twice per minute cause of DEX deadlines\n                const min = Math.floor(Date.now() / 30000)\n                return (<TxnPreview\n                  key={[...txn, i].join(':')}\n                  // pasing an unused property to make it update\n                  minute={min}\n                  onDismiss={bundle.requestIds && (() => resolveMany([bundle.requestIds[i]], { message: REJECT_MSG }))}\n                  txn={txn} network={bundle.network} account={bundle.identity}\n                  isFirstFailing={isFirstFailing}\n                  disableDismiss={!!signingStatus}\n                  disableDismissLabel={\"Cannot modify transaction bundle while a signing procedure is pending\"}\n                  addressLabel={!!bundle.meta && bundle.meta.addressLabel}\n                  />\n                )\n              })}\n            </div>\n\n            <div className='separator'></div>\n\n            <div className='transactionsNote'>\n              {\n                // only render this if we're using the queue\n                bundle.requestIds &&\n                  <>\n                    <b><GiGorilla size={16}/> DEGEN TIP</b>\n                    <span>You can sign multiple transactions at once. Add more transactions to this batch by interacting with a connected dApp right now. Alternatively, you may click \"Back\" to add more transactions.</span>\n                  </>\n              }\n            </div>\n          </div>\n        </div>\n\n        <div id='detailsPanel' className='panel'>\n          <div id=\"options-container\">\n            <div className='section' id=\"signing-details\">\n              <div className='section-title'>Signing With</div>\n              <div className='section-content'>\n                <div className='account'>\n                  <div className='icon' style={{ backgroundImage: `url(${accountAvatar})` }}/>\n                  <div className='address'>{ account.id }</div>\n                </div>\n                <div className='network'>\n                  on\n                  <div className='icon' style={{ backgroundImage: `url(${networkIconsById[network.id]})` }}/>\n                  <div className='address'>{ network.name }</div>\n                </div>\n              </div>\n            </div>\n\n            { /* Only lock the fee selector when the bundle is locked too - to make sure that the fee really is set in stone (won't change on the next getFinalBundle()) */ }\n            {\n              canProceed &&\n              <FeeSelector\n                disabled={signingStatus && signingStatus.finalBundle && !(estimation && !estimation.success)}\n                signer={bundle.signer}\n                estimation={estimation}\n                setEstimation={setEstimation}\n                network={network}\n                feeSpeed={feeSpeed}\n                setFeeSpeed={setFeeSpeed}\n                onDismiss={onDismiss}\n                isGasTankEnabled={currentAccGasTankState.isEnabled && !!relayerURL}\n              ></FeeSelector>\n            }\n\n          </div>\n\n         {\n            // If there's `bundle.nonce` set, it means we're cancelling or speeding up, so this shouldn't even be visible\n            // We also don't show this in any case in which we're forced to replace a particular transaction (mustReplaceNonce)\n            !isInt(bundle.nonce) && !isInt(mustReplaceNonce) && !!estimation?.nextNonce?.pendingBundle &&\n            (\n              <div>\n               <Checkbox\n                    label='Replace currently pending transaction'\n                    checked={replaceTx}\n                    onChange={({ target }) => setReplaceTx(target.checked)}\n                />\n              </div>\n            )\n          }\n\n          {\n            // NOTE there's a case in which both \"This transaction will replace the current pending transaction\" and the checkbox will render - when we're doing a modify\n            // If we are replacing a txn, look at whether canProceed is true\n            isInt(mustReplaceNonce) &&\n            <>\n              {\n                // We always warn the user if they're trying to replace a particular transaction\n                // This doesn't need to show when replacing is optional\n                (canProceed || canProceed === null) && <div className='replaceInfo warning' ><MdWarning /><span>This transaction bundle will replace the one that's currently pending.</span></div>\n              }\n\n              {\n                // canProceed equals null means we don't have data yet\n                canProceed === null &&\n                <div>\n                  <Loading />\n                </div>\n              }\n\n              {\n                canProceed === false &&\n                <div id='actions-container-replace'>\n                  <div className='replaceInfo info' ><MdInfo /><span>The transaction you're trying to replace has already been confirmed</span></div>\n                  <div className='buttons'>\n                    <Button clear icon={<MdOutlineClose/>} type='button' className='rejectTxn' onClick={rejectTxn}>Close</Button>\n                  </div>\n                </div>\n              }\n            </>\n          }\n\n          {\n            canProceed &&\n            <>\n              {\n                estimation && estimation.success && estimation.isDeployed === false && bundle.gasLimit ?\n                  <div className='first-tx-note'>\n                    <div className='first-tx-note-title'><MdInfo/>Note</div>\n                    <div className='first-tx-note-message'>\n                      Because this is your first Ambire transaction, this fee is {(60000 / bundle.gasLimit * 100).toFixed()}% higher than usual because we have to deploy your smart wallet.\n                      Subsequent transactions will be cheaper\n                    </div>\n                  </div>\n                  :\n                  null\n              }\n\n              <div id=\"actions-container\">\n                {\n                  bundle.signer.quickAccManager && !relayerURL ?\n                    <FailingTxn message='Signing transactions with an email/password account without being connected to the relayer is unsupported.'></FailingTxn>\n                    :\n                    <div className='section' id=\"actions\">\n                      <Actions\n                        estimation={estimation}\n                        approveTxn={approveTxn}\n                        rejectTxn={rejectTxn}\n                        cancelSigning={() => setSigningStatus(null)}\n                        signingStatus={signingStatus}\n                        feeSpeed={feeSpeed}\n                        isGasTankEnabled={currentAccGasTankState.isEnabled && !!relayerURL}\n                        network={network}\n                      />\n                    </div>\n                }\n              </div>\n            </>\n          }\n\n        </div>\n      </div>\n    </div>\n  )\n}\n","const customIcons = {\n    '0xb468a1e5596cfbcdf561f21a10490d99b4bb7b68': 'https://upload.wikimedia.org/wikipedia/commons/thumb/5/5a/Jeff_Sessions_with_Elmo_and_Rosita_%28cropped%29.jpg/220px-Jeff_Sessions_with_Elmo_and_Rosita_%28cropped%29.jpg', // TEST Polygon ELMO token,\n    '0x88800092ff476844f74dc2fc427974bbee2794ae': 'https://raw.githubusercontent.com/AmbireTech/ambire-brand/main/logos/ambire_logo_white_bg_250x250.png', // Ambire Wallet Token\n    '0x47cd7e91c3cbaaf266369fe8518345fc4fc12935': 'https://raw.githubusercontent.com/AmbireTech/ambire-brand/main/logos/xwallet_250x250.png', //xWallet\n    '0xb6456b57f03352be48bf101b46c1752a0813491a': 'https://raw.githubusercontent.com/AmbireTech/adex-brand/master/logos/vaporwave-adex-2.png', // ADX-STAKING\n    '0xd9a4cb9dc9296e111c66dfacab8be034ee2e1c2c': 'https://raw.githubusercontent.com/AmbireTech/adex-brand/master/logos/ADX-loyalty%40256x256.png', // ADX-LOYALTY\n    '0xec3b10ce9cabab5dbf49f946a623e294963fbb4e': 'https://raw.githubusercontent.com/AmbireTech/ambire-brand/main/logos/xwallet_250x250.png', // Polygons test xWallet\n    '0xe9415e904143e42007865e6864f7f632bd054a08': 'https://raw.githubusercontent.com/AmbireTech/ambire-brand/main/logos/Ambire_logo_250x250.png', // Polygons test Wallet\n    '0xade00c28244d5ce17d72e40330b1c318cd12b7c3': 'https://raw.githubusercontent.com/AmbireTech/ambire-brand/main/official-logos/Ambire-AdEx/Ambire_AdEx_Symbol_color_white_bg.png' //ADX-TOKEN\n}\n\nconst zapperStorageTokenIcons = 'https://storage.googleapis.com/zapper-fi-assets/tokens'\n\nexport function getTokenIcon(networkId = '', address = '') {\n    const addr = address.toLowerCase()\n    const net = networkId.toLowerCase()\n    return customIcons[addr] || `${zapperStorageTokenIcons}/${net}/${addr}.png`\n}\n","export function formatFloatTokenAmount(amount, useGrouping = true, maximumFractionDigits = 18) {\n    if (isNaN(amount) || isNaN(parseFloat(amount)) || !(typeof amount === 'number' || typeof amount === 'string')) return amount\n\n    try {\n        const minimumFractionDigits = Math.min(2, maximumFractionDigits || 0)\n        return ((typeof amount === 'number') ? amount : parseFloat(amount))\n            .toLocaleString(undefined,\n                {\n                    useGrouping,\n                    maximumFractionDigits: Math.max(minimumFractionDigits, maximumFractionDigits),\n                    minimumFractionDigits\n                })\n    } catch (err) {\n        console.error(err)\n        return amount\n    }\n}\n\n// Round a floating point number to a specific decimal places, i.e. 1.156 => 1.16\nexport function roundFloatingNumber(number, places = 2) {\n  const decimals = Math.pow(10, places)\n\n  return Math.round((number + Number.EPSILON) * decimals) / decimals\n}\n","import { Client } from 'gridplus-sdk'\nimport { ethers } from 'ethers'\nimport { serialize } from '@ethersproject/transactions'\n\nconst crypto = require('crypto')\nconst HARDENED_OFFSET = 0x80000000\n\nconst getAddressesReqOpts = {\n    startPath: [\n        HARDENED_OFFSET + 44,\n        HARDENED_OFFSET + 60,\n        HARDENED_OFFSET,\n        0,\n        0,\n    ],\n    n: 10,\n}\n\nconst latticeInit = commKey => {\n    const clientConfig = {\n        name: 'Ambire Wallet',\n        crypto: crypto,\n        privKey: commKey,\n    }\n\n    return new Client(clientConfig)\n}\n\nconst latticeConnect = async(client, deviceId) => {\n    return await new Promise((resolve, reject) => {\n        client.connect(deviceId, (err, isPaired) => {\n            if (err) {\n                reject(`Lattice connect: ${err} Or check if the DeviceID is correct.`)\n                return\n            }\n            \n            resolve({ isPaired: !!isPaired, errConnect: false })\n        })\n    }).catch(err => {\n        console.error(err)\n        return { isPaired: false, errConnect: err }\n    })\n}\n\nconst latticePair = async(client, secret) => {\n    return await new Promise((resolve, reject) => {\n        client.pair(secret, (err, hasActiveWallet) => {\n            if (err) {\n                reject(`Lattice connect: ${err}`)\n                return\n            }\n            \n            resolve({ hasActiveWallet, errPair: false })\n        })\n    }).catch(err => {\n        console.error(err)\n        return { hasActiveWallet: false, errPair: err }\n    })\n}\n\nconst latticeGetAddresses = async client => {\n    return await new Promise((resolve, reject) => {\n        client.getAddresses(getAddressesReqOpts, (err, res) => {\n            if (err) {\n                reject(`Lattice get addresses: ${err}`)\n                return\n            }\n\n            if (!res) throw new Error('Lattice could not get the addresses.')\n\n            resolve({res, errGetAddresses: false })\n        })\n    }).catch(err => {\n        console.error(err)\n        return { res: null, errGetAddresses: err }\n    })\n}\n\nconst latticeSignMessage = async(client, hash) => {\n    const dataMsg = {\n        protocol: 'signPersonal',\n        payload: ethers.utils.hexlify(hash),\n        signerPath: [HARDENED_OFFSET+44, HARDENED_OFFSET+60, HARDENED_OFFSET, 0, 0],\n    }\n\n    const signOptsMsg = {\n        currency: 'ETH_MSG',\n        data: dataMsg,\n    }\n\n    \n    return await new Promise((resolve, reject) => {\n        client.sign(signOptsMsg, (err, signedTx) => {\n            if (err) {\n                reject(err)\n                return\n            }\n\n            if (!signedTx) throw new Error('Lattice could not sign the message.')\n            \n            resolve({ signedMsg: '0x' + signedTx.sig.r + signedTx.sig.s + signedTx.sig.v[0].toString(16), errSignMessage: false })  \n        })\n    }).catch(err => {\n        console.error(err)\n        return { signedMsg: null, errSignMessage: err }\n    })\n}\n\nconst latticeSignMessage712 = async(client, message) => {\n    const reqData = {\n        currency: 'ETH_MSG',\n        data: {\n          signerPath: [HARDENED_OFFSET+44, HARDENED_OFFSET+60, HARDENED_OFFSET, 0, 0],\n          protocol: 'eip712', // You must use this string to specify this protocol\n          payload: message\n        }\n      }\n\n    return await new Promise((resolve, reject) => {\n        client.sign(reqData, (err, signedTx) => {\n            if (err) {\n                reject(err)\n                return\n            }\n\n            if (!signedTx) throw new Error('Lattice could not sign the message.')\n            \n            resolve({ signedMsg: '0x' + signedTx.sig.r + signedTx.sig.s + signedTx.sig.v[0].toString(16), errSignMessage: false })  \n        })\n    }).catch(err => {\n        console.error(err)\n        return { signedMsg: null, errSignMessage: err }\n    })\n}\n\nconst latticeSignTransaction = async(client, txn, chainId) => {\n    const { to, data, gas, gasPrice, nonce, value = 0 } = txn\n    const unsignedTxObj = {\n        ...txn,\n        gasLimit: txn.gasLimit || txn.gas,\n        chainId\n    }\n    delete unsignedTxObj.from\n    delete unsignedTxObj.gas\n\n    const txData = {\n        nonce,\n        gasLimit: gas || txn.gasLimit,\n        gasPrice,\n        to,\n        value,\n        data: data || '',\n        // -- m/44'/60'/0'/0/0\n        signerPath: [HARDENED_OFFSET+44, HARDENED_OFFSET+60, HARDENED_OFFSET, 0, 0],\n        chainId,\n        useEIP155: true,\n    }\n\n    const signOpts = {\n        currency: 'ETH',\n        data: txData,\n    }\n\n    \n    return await new Promise((resolve, reject) => {\n        client.sign(signOpts, (err, signedTx) => {\n            if (err) {\n                reject(err)\n                return\n            }\n\n            if (!signedTx) throw new Error('Lattice could not sign the message.')\n            \n            delete unsignedTxObj.v\n            const serializedSigned = serialize(unsignedTxObj, {\n                r: '0x' + signedTx.sig.r,\n                s: '0x' + signedTx.sig.s,\n                v: signedTx.sig.v[0].toString(16)\n            })\n            \n            resolve({ serializedSigned, errSignTxn: false })\n        })\n    }).catch(err => {\n        console.error(err)\n        return { serializedSigned: null, errSignTxn: err }\n    })\n}\n\nexport { \n    latticeInit,\n    latticeConnect,\n    latticePair,\n    latticeGetAddresses,\n    latticeSignMessage,\n    latticeSignMessage712,\n    latticeSignTransaction\n }\n","import objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","// It costs around 19k to send a token, if that token was interacted with before in the same transaction,\n// because of SLOAD costs - they depend on whether a slot has been read\n// however, it costs 30k if the token has not been interacted with\n// we may decrease it a bit and lean on the relayer failsafe values (cfg.gasAddedOnEstimate) later on\nconst ADDED_GAS_TOKEN = 30000\nconst ADDED_GAS_NATIVE = 12000\n\nexport function isTokenEligible(token, speed, estimation, isGasTankEnabled, network) {\n  if (estimation?.relayerless && token?.address === '0x0000000000000000000000000000000000000000') return true\n  if (!token) return false\n  const { feeInFeeToken } = getFeesData(token, estimation, speed, isGasTankEnabled, network)\n  const balanceInFeeToken = (parseInt(token.balance) / Math.pow(10, token.decimals))\n  return balanceInFeeToken > feeInFeeToken\n}\n\nexport function getAddedGas(token) {\n  return !token?.address || token?.address === '0x0000000000000000000000000000000000000000'\n    ? ADDED_GAS_NATIVE\n    : ADDED_GAS_TOKEN\n}\n\n// can't think of a less funny name for that\nexport function getFeePaymentConsequences(token, estimation, isGasTankEnabled) {\n  // Relayerless mode\n  if (!estimation?.feeInUSD || !token) return { multiplier: 1, addedGas: 0 }\n  // Relayer mode\n  const addedGas = getAddedGas(token)\n  // If Gas Tank enabled\n  if (!!isGasTankEnabled) return { addedGas: 0, multiplier: 1 }\n\n  return {\n    // otherwise we get very long floating point numbers with trailing .999999\n    multiplier: parseFloat(((estimation.gasLimit + addedGas) / estimation.gasLimit).toFixed(4)),\n    addedGas\n  }\n}\n\nconst contractErrors = ['caller is a contract', 'caller is another contract', 'contract not allowed', 'contract not supported', 'No contractz allowed', 'o contracts', /*no */'contracts allowed', /* c or C*/'ontract is not allowed', 'aller must be user', 'aller must be a user', 'ontract call not allowed']\n\nexport function mapTxnErrMsg(msg) {\n  if (!msg) return\n  if (msg.includes('Router: EXPIRED')) return 'Swap expired'\n  if (msg.includes('Router: INSUFFICIENT_OUTPUT_AMOUNT')) return 'Swap will suffer slippage higher than your requirements'\n  if (msg.includes('INSUFFICIENT_PRIVILEGE')) return 'Your signer address is not authorized.'\n  if (contractErrors.find(contractMsg => msg.includes(contractMsg))) return 'This dApp does not support smart wallets.'\n  return msg\n}\n\nexport function getErrHint(msg) {\n  if (!msg) return\n  if (msg.includes('Router: EXPIRED')) return 'Try performing the swap again'\n  if (msg.includes('Router: INSUFFICIENT_OUTPUT_AMOUNT')) return 'Try performing the swap again or increase your slippage requirements'\n  if (msg.includes('INSUFFICIENT_PRIVILEGE')) return 'If you set a new signer for this account, try re-adding the account.'\n  if (contractErrors.find(contractMsg => msg.includes(contractMsg))) {\n    return 'WARNING! We detected that this dApp intentionally blocks smart contract calls. This is a highly disruptive practice, as it breaks support for all smart wallets (Ambire, Gnosis Safe and others). We recommend you report this to the dApp ASAP and ask them to fix it.'\n    // return 'This dApp does not support smart wallets or purposefully excludes them. Contact the dApp developers to tell them to implement smart wallets by not blocking contract interactions and/or implementing EIP1271.'\n  }\n  return 'Sending this transaction batch would have resulted in an error, so we prevented it.'\n}\n\nexport function checkIfDAppIncompatible(msg) {\n  return contractErrors.find(contractMsg => msg.includes(contractMsg))\n}\n\nexport function toHexAmount(amnt, decimals) {\n  return '0x' + Math.round(amnt * Math.pow(10, decimals)).toString(16)\n}\n\nexport function getDiscountApplied(amnt, discount = 0) {\n  if (!discount) return 0\n  if (!amnt) return 0\n  if (discount === 1) return amnt\n  return amnt / (1 - discount) * discount\n}\n\n// Returns feeToken data with all multipliers applied\nexport function getFeesData(feeToken, estimation, speed, isGasTankEnabled, network) {\n  const { addedGas, multiplier } = getFeePaymentConsequences(feeToken, estimation, isGasTankEnabled)\n  const savedGas = getAddedGas(feeToken)\n  const discountMultiplier = 1 - (feeToken?.discount || 0)\n  const totalMultiplier = multiplier * discountMultiplier\n  const nativeRate = feeToken?.nativeRate || 1\n  const isCrossChainNativeSelected = isGasTankEnabled && feeToken.address === '0x0000000000000000000000000000000000000000' && (network.id !== feeToken.network)\n  const feeInNative = estimation.customFee\n    ? ((estimation.customFee * discountMultiplier) / nativeRate)\n    : !isCrossChainNativeSelected ? \n        estimation.feeInNative[speed] * totalMultiplier : \n        (((estimation.feeInNative[speed] * totalMultiplier) / nativeRate) * estimation.nativeAssetPriceInUSD) / feeToken.price\n  const feeInUSD = !isNaN(estimation.nativeAssetPriceInUSD) ? \n    !isCrossChainNativeSelected ? \n      feeInNative * estimation.nativeAssetPriceInUSD : \n      feeInNative * feeToken.price : \n    undefined\n  const feeInFeeToken = feeInNative * nativeRate\n\n  return {\n    feeInNative,\n    feeInUSD,\n    feeInFeeToken,\n    addedGas, // use it bundle data\n    savedGas,\n  }\n}\n","import './TxnPreview.scss'\n\nimport { useState, Fragment, useEffect  } from 'react'\n\nimport { getName, getTransactionSummary, isKnown } from 'lib/humanReadableTransactions'\nimport networks from 'consts/networks'\nimport { formatUnits } from 'ethers/lib/utils'\nimport { ToolTip } from 'components/common'\nimport { HiOutlineExternalLink } from 'react-icons/hi'\nimport { MdOutlineClose } from 'react-icons/md'\nimport { BsChevronDown, BsChevronUp } from 'react-icons/bs'\nimport { getTokenIcon } from 'lib/icons'\nimport { formatFloatTokenAmount } from 'lib/formatters'\nimport { setKnownAddressNames } from 'lib/humanReadableTransactions'\nimport useConstants from 'hooks/useConstants'\n\nfunction getNetworkSymbol(networkId) {\n  const network = networks.find(x => x.id === networkId)\n  return network ? network.nativeAssetSymbol : 'UNKNW'\n}\n\nfunction parseExtendedSummaryItem(item, i, networkDetails) {\n  if (item.length === 1) return item\n\n  if (i === 0) return (<div className={`action ${item.toLowerCase()}`} key={`item-${i}`}>{ item }</div>)\n\n  if (!item.type) return (<div className='word' key={`item-${i}`}>{ item }</div>)\n  if (item.type === 'token') {\n    return (\n    <div className='token' key={`item-${i}`}>\n      { item.amount > 0 && <span>{ formatFloatTokenAmount(item.amount, true, item.decimals) }</span> }\n      { item.decimals !== null && item.symbol ? \n        <Fragment>\n          {item.address &&\n            <div className='icon' \n              style={{ backgroundImage: `url(${getTokenIcon(networkDetails.id, item.address)})` }}>\n            </div>}\n          {item.symbol}\n        </Fragment>\n        : (item.amount > 0) ? 'units of unknown token' : null \n      }\n    </div>\n  )}\n\n  if (item.type === 'address') return (\n    <a\n      className='address'\n      key={`item-${i}`}\n      href={item.address ? `${networkDetails.explorerUrl}/address/${item.address}` : null}\n      target=\"_blank\"\n      rel=\"noreferrer\"\n      onClick={e => e.stopPropagation()}\n    >\n      <ToolTip disabled={!item.address} label={item.address}>\n        { item.name ? item.name : item.address }\n        { item.address ? <HiOutlineExternalLink/> : null }\n      </ToolTip>\n    </a>\n  )\n\n  if (item.type === 'network') return (\n    <div className='network' key={`item-${i}`}>\n      { item.icon ? <div className='icon' style={{ backgroundImage: `url(${item.icon})` }}></div> : null }\n      { item.name }\n    </div>\n  )\n\n  if (item.type === 'erc721') {\n    const canShowLink = item.network && item.address && item.id\n    return (\n      <a\n        className='erc721'\n        key={`item-${i}`}\n        href={canShowLink ? `#/wallet/nft/${item.network}/${item.address}/${item.id}` : null}\n        target=\"_blank\"\n        rel=\"noreferrer\"\n        onClick={e => e.stopPropagation()}\n      >\n        { item.name }\n        { canShowLink ? <HiOutlineExternalLink/> : null }\n      </a>\n    )\n  }\n\n  return <></>\n}\n\nexport default function TxnPreview ({ txn, onDismiss, network, account, isFirstFailing, mined, disableExpand, disableDismiss, disableDismissLabel, addressLabel = null }) {\n  const { constants: { tokenList, humanizerInfo } } = useConstants()\n  const [isExpanded, setExpanded] = useState(false)\n  const contractName = getName(humanizerInfo, txn[0])\n\n  const networkDetails = networks.find(({ id }) => id === network)\n  const extendedSummary = getTransactionSummary(humanizerInfo, tokenList, txn, network, account, { mined, extended: true })\n\n  const summary = (extendedSummary.map(entry => Array.isArray(entry) ? entry.map((item, i) => parseExtendedSummaryItem(item, i, networkDetails)) : (entry))) // If entry is extended summary parse it\n  useEffect(() => !!addressLabel && setKnownAddressNames(addressLabel), [addressLabel])\n  \n  return (\n    <div className={isFirstFailing ? 'txnPreview firstFailing' : 'txnPreview'}>\n        <div className=\"heading\">\n          <div className=\"info\" onClick={() => !disableExpand && setExpanded(e => !e)}>\n            <div className=\"summary-container\">\n              {!disableExpand && (<div className='expandTxn'>\n                {isExpanded ? (<BsChevronUp/>) : (<BsChevronDown/>)}\n              </div>)}\n              <div className=\"summary\">{ summary }</div>\n            </div>\n            {isFirstFailing && (<div className='firstFailingLabel'>This is the first failing transaction.</div>)}\n              {!isFirstFailing && !mined && !isKnown(humanizerInfo, txn, account) && (<div className='unknownWarning'>Warning: interacting with an unknown contract or address.</div>)}\n          </div>\n          <div className='actionIcons'>\n            {onDismiss ? (\n              <ToolTip disabled={!disableDismiss || !disableDismissLabel} label={disableDismissLabel}>\n                <div className={`dismissTxn ${disableDismiss ? 'disabled' : ''}`} onClick={e => { e.stopPropagation(); !disableDismiss && onDismiss.apply(this, e) }}><MdOutlineClose/></div>\n              </ToolTip>\n            ) : (<></>)}\n          </div>\n        </div>\n        {\n          isExpanded ? (<div className='advanced'>\n            <div><b>Interacting with (<i>to</i>):</b> {txn[0]}{contractName ? ` (${contractName})` : ''}</div>\n            <div><b>Value to be sent (<i>value</i>):</b> {formatUnits(txn[1] || '0x0', 18)} {getNetworkSymbol(network)}</div>\n            <div><b>Data:</b> {txn[2]}</div>\n          </div>) : (<></>)\n        }\n    </div>\n  )\n}\n","// @ts-ignore adex-protocol-eth package doesn't have any types written\nimport IdentityFactoryABI from 'adex-protocol-eth/abi/IdentityFactory'\nimport { Interface } from 'ethers/lib/utils'\n\nimport accountPresets from '../../constants/accountPresets'\n\nconst IdentityFactory = new Interface(IdentityFactoryABI)\n\n// Pass deploySalt (eg `id('IsAmbireIdentity')`) to deploy contracts at the same address across chains\nexport function toBundleTxn(\n  { to, value, data, deploySalt }: { to: string; value: string; data: string; deploySalt: string },\n  from: string\n) {\n  // Transactions with no `to` are interpreted by the Ethereum network as CREATE (contract deployment) if they come from an EOA\n  // however, our accounts are not EOAs, so we will just call the factory with a user-specific nonce, that's also identifiable (0x6942)\n  if (to === '0x' || !to) {\n    const salt =\n      deploySalt || `0x69420000000000${Date.now().toString(16).slice(1, 9)}00${from.slice(2)}`\n    return [\n      accountPresets.identityFactoryAddr,\n      value,\n      IdentityFactory.encodeFunctionData('deploy', [data, salt])\n    ]\n  }\n  return [to, value || '0x0', data || '0x']\n}\n"],"sourceRoot":""}