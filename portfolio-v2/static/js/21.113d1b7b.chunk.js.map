{"version":3,"sources":["components/Wallet/Transfer/Transfer.module.scss","components/Wallet/Transfer/Addresses/Addresses.module.scss","components/Modals/AddAddressModal/AddAddressModal.js","components/Wallet/Transfer/Addresses/Addresses.js","components/Wallet/Transfer/Transfer.js","lib/icons.js","../node_modules/@babel/runtime/helpers/defineProperty.js","lib/formatters.js","../node_modules/@babel/runtime/helpers/objectSpread2.js","lib/validations/formValidations.js","../node_modules/ambire-common/src/helpers/sendTxnHelpers/sendTxnHelpers.ts","../node_modules/ambire-common/src/services/isFeeCollectorTxn/isFeeCollectorTxn.ts","../node_modules/ambire-common/src/hooks/useGasTankData/index.ts","../node_modules/ambire-common/src/hooks/useGasTankData/useGasTankData.ts"],"names":["module","exports","AddAddressModal","title","inputs","selectedNetwork","onClose","hideModal","useModals","useState","isDisabled","setDisabled","uDAddress","setUDAddress","ensAddress","setEnsAddress","timer","useRef","inputsFields","useMemo","map","input","ref","createRef","getUDomain","value","a","resolveUDomain","unstoppableDomainsChain","onInput","current","clearTimeout","validateForm","isFound","find","item","inputType","domain","uDAddr","ensAddr","resolveENSDomain","isFormValid","validate","isUDField","every","v","setTimeout","catch","console","error","buttons","clear","small","icon","onClick","disabled","values","push","type","id","label","placeholder","className","Addresses","addresses","addAddress","removeAddress","onSelectAddress","showModal","modalInputs","isValidAddress","addAddressModal","name","address","styles","wrapper","AddressList","noAccounts","separator","ERC20","Interface","require","unsupportedSWPlatforms","segments","withRouter","history","portfolio","selectedAcc","addRequest","addressBook","relayerURL","isKnownAddress","feeAssetsRes","useGasTankData","network","useRelayerData","feeAssetsPerNetwork","length","filter","disableGasTankDeposit","tokenAddressOrSymbol","useParams","addToast","useToasts","state","useLocation","gasTankDetails","tokenAddress","tokens","symbol","asset","setAsset","amount","setAmount","bigNumberHexAmount","setBigNumberHexAmount","accountPresets","feeCollector","setAddress","addressConfirmed","setAddressConfirmed","sWAddressConfirmed","setSWAddressConfirmed","newAddress","setNewAddress","success","messages","validationFormMgs","setValidationFormMgs","feeBaseTokenWarning","setFeeBaseTokenWarning","assetsItems","isTopUp","some","i","toLowerCase","img","tokenImageUrl","fallbackIcon","getTokenIcon","selectedAsset","maxAmount","maxAmountFormatted","balanceRaw","decimals","balance","ethers","utils","formatUnits","formatFloatTokenAmount","showSWAddressWarning","Number","networks","includes","onAmountChange","bigNumberAmount","parseUnits","toHexString","useEffect","gasFeeToken","ft","baseToken","feeBaseToken","toUpperCase","replace","pathname","isValidSendTransferAmount","validateSendTransferAmount","startsWith","indexOf","isValidRecipientAddress","validateSendTransferAddress","message","UDAddress","bip44Item","getBip44Items","isUDAddress","selectedAddress","isEnsAddress","amountLabel","segment","setSegment","sortedAssetsItems","sort","b","style","justifyContent","panel","defaultValue","onChange","isCurrNetworkBalanceLoading","form","searchable","items","gasTankConvertMsg","precision","button","onButtonClick","size","gasTankMsg","recipientField","info","recipientInput","inputContainerClass","textInputContainer","cn","ensLogo","ensLogoActive","udomainsLogo","udomainsLogoActive","x","dropdown","onAddNewAddress","binanceAddressWarning","join","href","target","rel","checked","primaryGradient","recipientAddress","txn","to","data","encodeFunctionData","req","Date","now","dateAdded","valueOf","chainId","account","meta","addressLabel","e","Providers","walletAddress","networkDetails","sellMode","customIcons","zapperStorageTokenIcons","networkId","addr","net","obj","key","Object","defineProperty","enumerable","configurable","writable","useGrouping","maximumFractionDigits","isNaN","parseFloat","minimumFractionDigits","Math","min","toLocaleString","undefined","max","err","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","sym","getOwnPropertyDescriptor","apply","arguments","source","forEach","getOwnPropertyDescriptors","defineProperties","validateAddress","validateAddAuthSignerAddress","isValidAddr","isKnownTokenOrContract","parsedAmount","slice","gt","validateSendNftAddress","metadata","owner","getAddedGas","token","ERC20AbiInterface","ERC20ABI","TRANSFER_SIGHASH","getSighash","getFunction","format","isFeeCollectorTxn","res","decodeFunctionData","BigNumber","from","_value","getTxnTransferInfo","_to","cacheBreak","useCacheBreak","urlGetBalance","urlGetFeeAssets","urlGetTransactions","url","balancesRes","isLoading","executedTxnsRes","gasTankBalances","balanceInUSD","reduce","gasTankTxns","txns","gasTankFee","executedTxns","gasTankFilledTxns","transactions","depositTxns","txId","submittedAt","identity","rest","filteredTxns","txnCall","fillTxn","getGasTankFilledTxns","availableFeeAssets","balanceUSD","price","totalSavedResult","feeTokenDetails","feeToken","savedGas","saved","feeInUSDPerGas","cashback","toString"],"mappings":"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","file":"static/js/21.113d1b7b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"transferButton\":\"Transfer_transferButton__1rMpZ\",\"wrapper\":\"Transfer_wrapper__1zpDw\",\"amountLabel\":\"Transfer_amountLabel__2FfXd\",\"recipientField\":\"Transfer_recipientField__38BwH\",\"recipientInput\":\"Transfer_recipientInput__1fRT1\",\"dropdown\":\"Transfer_dropdown__1iOox\",\"udomainsLogo\":\"Transfer_udomainsLogo__2kvpB\",\"udomainsLogoActive\":\"Transfer_udomainsLogoActive__1yiB2\",\"ensLogo\":\"Transfer_ensLogo__3Mty8\",\"ensLogoActive\":\"Transfer_ensLogoActive__3lBQM\",\"panel\":\"Transfer_panel__3xc_N\",\"form\":\"Transfer_form__vDDvB\",\"separator\":\"Transfer_separator__2LFW-\",\"gasTankMsg\":\"Transfer_gasTankMsg__1e4vi\",\"gasTankConvertMsg\":\"Transfer_gasTankConvertMsg__2WccI\",\"binanceAddressWarning\":\"Transfer_binanceAddressWarning__2UP0i\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"addresses-button\":\"Addresses_addresses-button__3nLP7\",\"wrapper\":\"Addresses_wrapper__2fkD9\",\"separator\":\"Addresses_separator__1OSZH\",\"item\":\"Addresses_item__2G0-3\",\"details\":\"Addresses_details__3NAv3\",\"address\":\"Addresses_address__1RlKw\",\"button\":\"Addresses_button__235kc\"};","import './AddAddressModal.scss'\n\nimport { createRef, useRef, useState, useMemo } from 'react'\nimport { MdCheck, MdClose } from 'react-icons/md'\nimport { useModals } from 'hooks'\nimport { Modal, TextInput, Button, ToolTip } from \"components/common\"\nimport { resolveUDomain } from 'lib/unstoppableDomains'\nimport { resolveENSDomain } from 'lib/ensDomains'\n\nconst AddAddressModal = ({ title, inputs, selectedNetwork, onClose }) => {\n    const { hideModal } = useModals()\n    const [isDisabled, setDisabled] = useState(true)\n    const [uDAddress, setUDAddress] = useState('')\n    const [ensAddress, setEnsAddress] = useState('')\n    const timer = useRef(null)\n\n    const inputsFields = useMemo(() => inputs.map(input => ({ ...input, ref: createRef() })), [inputs])\n    const getUDomain = async (value) => {\n        return await resolveUDomain(value, null, selectedNetwork.unstoppableDomainsChain)\n    }\n\n    const onInput = () => {\n        if (timer.current) {\n            clearTimeout(timer.current)\n        }\n\n        const validateForm = async () => {\n            const isFound = inputsFields.find(item => item.inputType === 'address')\n            const domain = isFound && isFound.ref && isFound.ref.current.value\n            if (!domain) return\n            \n            let uDAddr = null\n            let ensAddr = null\n            if (isFound) {\n                uDAddr = await getUDomain(domain)\n                ensAddr = await resolveENSDomain(domain)\n                timer.current = null\n                if (uDAddr) setUDAddress(uDAddr)\n                else if (ensAddr) setEnsAddress(ensAddr)\n            }\n\n            const isFormValid = inputsFields\n                .map(({ ref, validate, inputType }) => {\n                    const isUDField = inputType === 'address'\n                    const value = isUDField && uDAddr ? uDAddr : isUDField && ensAddr ? ensAddr : ref.current.value\n                    if (!validate) return !!value\n\n                    return validate(value)\n                })\n                .every(v => v === true)\n\n            setDisabled(!isFormValid)\n        }\n\n        timer.current = setTimeout(async () => {\n            return validateForm().catch(console.error)\n        }, 500)\n    }\n\n    const onConfirm = () => {\n        let values = inputsFields.map(({ ref }) => ref.current.value)\n        if (uDAddress) values.push({ type: 'ud' })\n        else if (ensAddress) values.push({ type: 'ens' })\n        else values.push({ type: 'pub' })\n        \n        onClose && onClose(values)\n        hideModal()\n    }\n\n    const buttons = <>\n        <Button clear small icon={<MdClose />} onClick={hideModal}>Cancel</Button>\n        <Button small icon={<MdCheck />} disabled={isDisabled} onClick={onConfirm}>Confirm</Button>\n    </>\n\n    return (\n        <Modal id=\"input-modal\" title={title} buttons={buttons}>\n            {\n                inputsFields.map(({ id, label, placeholder, ref, type }) => (\n                    <div key={id + label}>\n                        <TextInput label={label} placeholder={placeholder} onInput={onInput} ref={ref} className='address-input' />\n                        {(type === 'address') &&\n                            <>\n                                <ToolTip label={!uDAddress ? 'You can use Unstoppable domainsⓇ' : 'Valid Unstoppable domainsⓇ domain'}>\n                                    <span id=\"udomains-logo\" className={ uDAddress ? 'ud-logo-active ' : '' } />\n                                </ToolTip>\n                                <ToolTip label={!ensAddress ? 'You can use Ethereum Name ServiceⓇ' : 'Valid Ethereum Name ServicesⓇ domain'}>\n                                    <div id=\"ens-logo\" className={ensAddress ? 'ens-logo-active ' : ''} />\n                                </ToolTip>\n                            </>\n                        }\n                    </div>\n                ))\n            }\n        </Modal>\n    )\n}\n\nexport default AddAddressModal\n","import styles from './Addresses.module.scss'\n\nimport AddressList from 'components/common/AddressBook/AddressList/AddressList'\nimport { Button, Panel } from 'components/common'\nimport { isValidAddress } from 'ambire-common/src/services/address'\nimport AddAddressModal from 'components/Modals/AddAddressModal/AddAddressModal'\nimport { useModals } from 'hooks'\n\nconst Addresses = ({ addresses, addAddress, removeAddress, onSelectAddress, selectedNetwork }) => {\n    const { showModal } = useModals()\n\n    const modalInputs = [\n        { inputType: 'name', label: 'Name', placeholder: 'Address title' },\n        { inputType: 'address', label: 'Address / Unstoppable domainsⓇ / ENSⓇ', placeholder: 'Address / Unstoppable Domains / ENS', validate: value => isValidAddress(value) } \n    ]\n\n    const addAddressModal = <AddAddressModal \n            title=\"Add New Address\" \n            selectedNetwork={selectedNetwork} \n            inputs={modalInputs} \n            onClose={([name, address, type]) => addAddress(name, address, type)}\n        ></AddAddressModal>\n    const showInputModal = () => showModal(addAddressModal)\n\n    return (\n        <Panel title=\"Address Book\" className={styles.wrapper}>\n            <AddressList\n                noAccounts={true}\n                addresses={addresses}\n                removeAddress={removeAddress}\n                onSelectAddress={onSelectAddress}\n            />\n            <div className={styles.separator}></div>\n            <Button onClick={showInputModal} className={styles['addresses-button']}>Add Address</Button>\n        </Panel>\n    )\n}\n\nexport default Addresses","import styles from './Transfer.module.scss'\n\nimport { BsXLg } from 'react-icons/bs'\nimport { MdWarning } from 'react-icons/md'\nimport { useParams, withRouter } from 'react-router'\nimport { useEffect, useMemo, useState, useRef } from 'react'\nimport { ethers } from 'ethers'\nimport { Interface } from 'ethers/lib/utils'\nimport { useToasts } from 'hooks/toasts'\nimport { TextInput, NumberInput, Button, Select, Loading, AddressBook, AddressWarning, NoFundsPlaceholder, Checkbox, ToolTip, Panel, Segments } from 'components/common'\nimport { validateSendTransferAddress, validateSendTransferAmount } from 'lib/validations/formValidations'\nimport { resolveUDomain } from 'lib/unstoppableDomains'\nimport { isValidAddress } from 'ambire-common/src/services/address'\nimport Addresses from './Addresses/Addresses'\nimport { MdInfo } from 'react-icons/md'\nimport networks from 'consts/networks'\nimport { getTokenIcon } from 'lib/icons'\nimport { formatFloatTokenAmount } from 'lib/formatters'\nimport { useLocation } from 'react-router-dom'\nimport accountPresets from 'ambire-common/src/constants/accountPresets'\nimport { resolveENSDomain, getBip44Items } from 'lib/ensDomains'\n// eslint-disable-next-line import/no-relative-parent-imports\nimport Providers from '../Deposit/Providers/Providers'\nimport useGasTankData from 'ambire-common/src/hooks/useGasTankData'\nimport { useRelayerData } from 'hooks'\nimport cn from 'classnames'\n\nconst ERC20 = new Interface(require('adex-protocol-eth/abi/ERC20'))\nconst unsupportedSWPlatforms = ['Binance', 'Huobi', 'KuCoin', 'Gate.io', 'FTX']\nconst segments = [{ value: 'Send' }, { value: 'Sell' }]\n\nconst Transfer = ({ history, portfolio, selectedAcc, selectedNetwork, addRequest, addressBook, relayerURL }) => {\n    const { addresses, addAddress, removeAddress, isKnownAddress } = addressBook\n    const {\n        feeAssetsRes\n      } = useGasTankData({\n        relayerURL,\n        selectedAcc,\n        network: selectedNetwork,\n        portfolio,\n        useRelayerData\n      })\n    const feeAssetsPerNetwork = feeAssetsRes && feeAssetsRes.length && feeAssetsRes.filter(item => (item.network === selectedNetwork.id) && !item.disableGasTankDeposit)\n    const { tokenAddressOrSymbol } = useParams()\n    const { addToast } = useToasts()\n    const { state } = useLocation()\n    const [gasTankDetails] = useState(state ? state : null)\n    const tokenAddress = isValidAddress(tokenAddressOrSymbol) ? tokenAddressOrSymbol : portfolio.tokens.find(({ symbol }) => symbol === tokenAddressOrSymbol)?.address || null\n\n    const [asset, setAsset] = useState(tokenAddress)\n    const [amount, setAmount] = useState(0)\n    const [bigNumberHexAmount, setBigNumberHexAmount] = useState('')\n    const [address, setAddress] = useState(gasTankDetails ? accountPresets.feeCollector : '')\n    const [uDAddress, setUDAddress] = useState('')\n    const [ensAddress, setEnsAddress] = useState('')\n    const [disabled, setDisabled] = useState(true)\n    const [addressConfirmed, setAddressConfirmed] = useState(false)\n    const [sWAddressConfirmed, setSWAddressConfirmed] = useState(false)\n    const [newAddress, setNewAddress] = useState('')\n    const [validationFormMgs, setValidationFormMgs] = useState({\n        success: {\n            amount: false,\n            address: false\n        },\n        messages: {\n            amount: '',\n            address: ''\n        }\n    })\n    const [feeBaseTokenWarning, setFeeBaseTokenWarning] = useState('')\n    const timer = useRef(null)\n    let eligibleFeeTokens = null\n    if (gasTankDetails?.isTopUp) {\n        eligibleFeeTokens = portfolio.tokens.filter(item => feeAssetsPerNetwork && feeAssetsPerNetwork?.some(i => i.address.toLowerCase() === item.address.toLowerCase()))\n    } else eligibleFeeTokens = portfolio.tokens\n    \n    const assetsItems = eligibleFeeTokens.map(({ label, symbol, address, img, tokenImageUrl, network }) => ({\n        label: label || symbol,\n        value: address,\n        icon: img || tokenImageUrl,\n        fallbackIcon: getTokenIcon(network, address)\n    }))\n\n    const selectedAsset = portfolio.tokens.find(({ address }) => address === asset)\n\n    const { maxAmount, maxAmountFormatted } = useMemo(() => {\n        if (!selectedAsset) return { maxAmount: '0', maxAmountFormatted: '0.00' };\n        const { balanceRaw, decimals, balance } = selectedAsset\n        return {\n            maxAmount: ethers.utils.formatUnits(balanceRaw, decimals),\n            maxAmountFormatted: formatFloatTokenAmount(balance, true, decimals)\n        }\n    }, [selectedAsset])\n\n    const showSWAddressWarning = useMemo(() =>\n        !gasTankDetails && Number(tokenAddress) === 0 && networks.map(({ id }) => id).filter(id => id !== 'ethereum').includes(selectedNetwork.id)\n        , [gasTankDetails, tokenAddress, selectedNetwork.id])\n\n    const setMaxAmount = () => onAmountChange(maxAmount)\n\n    const onAmountChange = value => {\n        if (value) {\n            const { decimals } = selectedAsset\n            const bigNumberAmount = ethers.utils.parseUnits(value, decimals).toHexString()\n            setBigNumberHexAmount(bigNumberAmount)\n        }\n\n        setAmount(value)\n    }\n\n    const sendTx = () => {\n        const recipientAddress = uDAddress ? uDAddress : ensAddress ? ensAddress :  address\n        if (!bigNumberHexAmount) return \n        \n        try {\n            const txn = {\n                to: selectedAsset.address,\n                value: '0',\n                data: ERC20.encodeFunctionData('transfer', [recipientAddress, bigNumberHexAmount])\n            }\n\n            if (Number(selectedAsset.address) === 0) {\n                txn.to = recipientAddress\n                txn.value = bigNumberHexAmount\n                txn.data = '0x'\n            }\n\n            let req = {\n                id: `transfer_${Date.now()}`,\n                dateAdded: new Date().valueOf(),\n                type: 'eth_sendTransaction',\n                chainId: selectedNetwork.chainId,\n                account: selectedAcc,\n                txn,\n                meta: null\n            }\n\n            if (uDAddress) {\n                req.meta = {\n                    addressLabel: {\n                        addressLabel: address,\n                        address: uDAddress\n                    }\n                }\n            } else if (ensAddress) {\n                req.meta = {\n                    addressLabel: {\n                        addressLabel: address,\n                        address: ensAddress\n                    }\n                }\n            }\n\n            addRequest(req)\n\n            setAmount(0)\n        } catch (e) {\n            console.error(e)\n            addToast(`Error: ${e.message || e}`, { error: true })\n        }\n    }\n\n    useEffect(() => {\n        // check gasTank topUp with token for convertion\n        setFeeBaseTokenWarning('')\n        if (gasTankDetails?.isTopUp){\n            const gasFeeToken = feeAssetsPerNetwork && feeAssetsPerNetwork.find(ft => ft?.address?.toLowerCase() === selectedAsset?.address?.toLowerCase())\n            if (gasFeeToken?.baseToken) {\n                const feeBaseToken = feeAssetsPerNetwork && feeAssetsPerNetwork.find(ft => ft.address.toLowerCase() === gasFeeToken.baseToken.toLowerCase())\n                setFeeBaseTokenWarning(`Token ${gasFeeToken.symbol.toUpperCase()} will be converted to ${feeBaseToken.symbol.toUpperCase()} without additional fees.`)\n            }\n        }\n    }, [feeAssetsPerNetwork, gasTankDetails?.isTopUp, selectedAsset])\n\n    useEffect(() => {\n        setAmount(0)\n        setBigNumberHexAmount('')\n        setSWAddressConfirmed(false)\n    }, [asset, selectedNetwork.id])\n\n    useEffect(() => {\n        if (!selectedAsset) return\n        history.replace({ pathname: `/wallet/transfer/${Number(asset) !== 0 ? asset : selectedAsset.symbol}` })\n    }, [asset, history, selectedAsset])\n\n    useEffect(() => {\n        const isValidSendTransferAmount = validateSendTransferAmount(amount, selectedAsset)\n\n        if (address.startsWith('0x') && (address.indexOf('.') === -1)) {\n            if (uDAddress !== '') setUDAddress('')\n            if (ensAddress !== '') setEnsAddress('')\n            const isValidRecipientAddress = validateSendTransferAddress(address, selectedAcc, addressConfirmed, isKnownAddress)\n\n            setValidationFormMgs({\n                success: {\n                    amount: isValidSendTransferAmount.success,\n                    address: isValidRecipientAddress.success\n                },\n                messages: {\n                    amount: isValidSendTransferAmount.message ? isValidSendTransferAmount.message : '',\n                    address: isValidRecipientAddress.message ? isValidRecipientAddress.message : ''\n                }\n            })\n\n            setDisabled(!isValidRecipientAddress.success || !isValidSendTransferAmount.success || (showSWAddressWarning && !sWAddressConfirmed))\n        } else {\n            if (timer.current) {\n                clearTimeout(timer.current)\n            }\n\n            const validateForm = async () => {\n                const UDAddress = await resolveUDomain(address, selectedAsset ? selectedAsset.symbol : null, selectedNetwork.unstoppableDomainsChain)\n                const bip44Item = getBip44Items(selectedAsset ? selectedAsset.symbol : null)\n                const ensAddr = await resolveENSDomain(address, bip44Item)\n                timer.current = null\n                const isUDAddress = UDAddress ? true : false\n                const isEnsAddress = ensAddr ? true : false\n                let selectedAddress = ''\n                if (isEnsAddress) selectedAddress = ensAddr\n                else if (isUDAddress) selectedAddress = UDAddress\n                else selectedAddress = address\n\n                const isValidRecipientAddress = validateSendTransferAddress(selectedAddress, selectedAcc, addressConfirmed, isKnownAddress, isUDAddress, isEnsAddress)\n\n                setUDAddress(UDAddress)\n                setEnsAddress(ensAddr)\n                setValidationFormMgs({\n                    success: {\n                        amount: isValidSendTransferAmount.success,\n                        address: isValidRecipientAddress.success\n                    },\n                    messages: {\n                        amount: isValidSendTransferAmount.message ? isValidSendTransferAmount.message : '',\n                        address: isValidRecipientAddress.message ? isValidRecipientAddress.message : ''\n                    }\n                })\n\n                setDisabled(!isValidRecipientAddress.success || !isValidSendTransferAmount.success || (showSWAddressWarning && !sWAddressConfirmed))\n            }\n\n            timer.current = setTimeout(async () => {\n                return validateForm().catch(console.error)\n            }, 300)\n        }\n        return () => clearTimeout(timer.current)\n    }, [address, amount, selectedAcc, selectedAsset, addressConfirmed, showSWAddressWarning, sWAddressConfirmed, isKnownAddress, addToast, selectedNetwork, addAddress, uDAddress, disabled, ensAddress])\n\n    const amountLabel = <div className={styles.amountLabel}>Available Amount: <span>{maxAmountFormatted} {selectedAsset?.symbol}</span></div>\n    const [segment, setSegment] = useState(segments[0].value)\n    const sortedAssetsItems = [\n        ...assetsItems.filter(i => i.label.toLowerCase() === 'wallet'),\n        ...assetsItems.filter(i => i.label.toLowerCase() !== 'wallet').sort((a, b) => a.label.toLowerCase() > b.label.toLowerCase() ? 1 : -1),\n    ]\n\n    return (\n        <div className={styles.wrapper} style={{ justifyContent: gasTankDetails ? 'center' : '' }}>\n           <Panel title=\"Send\" className={styles.panel}>\n           <Segments small defaultValue={segment} segments={segments} onChange={(value) => setSegment(value)} />\n               { segment === segments[0].value ? (\n                    portfolio.isCurrNetworkBalanceLoading ?\n                        <Loading />\n                        :\n                        assetsItems.length ?\n                            <div className={styles.form}>\n                                <Select searchable defaultValue={asset} items={sortedAssetsItems} onChange={({ value }) => setAsset(value)}/>\n                                { feeBaseTokenWarning ? <p className={styles.gasTankConvertMsg}><MdWarning /> {feeBaseTokenWarning}</p> : <></>}\n                                <NumberInput\n                                    label={amountLabel}\n                                    value={amount}\n                                    precision={selectedAsset?.decimals}\n                                    onInput={onAmountChange}\n                                    button=\"MAX\"\n                                    onButtonClick={() => setMaxAmount()}\n                                />\n                                \n                                { validationFormMgs.messages.amount && \n                                    (<div className='validation-error'><BsXLg size={12}/>&nbsp;{validationFormMgs.messages.amount}</div>)}\n                                { gasTankDetails ? <p className={styles.gasTankMsg}><MdWarning /> {gasTankDetails?.gasTankMsg}</p> : (<div className={styles.recipientField}>\n                                    <TextInput\n                                        placeholder=\"Recipient\"\n                                        info=\"Please double-check the recipient address, blockchain transactions are not reversible.\"\n                                        value={address}\n                                        onInput={setAddress}\n                                        className={styles.recipientInput}\n                                        inputContainerClass={styles.textInputContainer}\n                                    />\n                                    <ToolTip label={!ensAddress ? 'You can use Ethereum Name ServiceⓇ' : 'Valid Ethereum Name ServicesⓇ domain'}>\n                                        <div className={cn(styles.ensLogo, {[styles.ensLogoActive]: ensAddress})} />\n                                    </ToolTip>\n                                    <ToolTip label={!uDAddress ? 'You can use Unstoppable domainsⓇ' : 'Valid Unstoppable domainsⓇ domain'}>\n                                        <div className={cn(styles.udomainsLogo, { [styles.udomainsLogoActive]: uDAddress })} />\n                                    </ToolTip>\n                                    <AddressBook\n                                        addresses={addresses.filter(x => x.address !== selectedAcc)}\n                                        addAddress={addAddress}\n                                        removeAddress={removeAddress}\n                                        newAddress={newAddress}\n                                        onClose={() => setNewAddress(null)}\n                                        onSelectAddress={address => setAddress(address)}\n                                        selectedNetwork={selectedNetwork}\n                                        className={styles.dropdown}\n                                    />\n                                </div>)}\n                                { validationFormMgs.messages.address && \n                                    (<div className='validation-error'><BsXLg size={12}/>&nbsp;{validationFormMgs.messages.address}</div>)}\n                                <div className={styles.separator} />\n                                <AddressWarning\n                                    address={address}\n                                    onAddNewAddress={() => setNewAddress(address)}\n                                    onChange={(value) => setAddressConfirmed(value)}\n                                    isKnownAddress={isKnownAddress}\n                                    uDAddress={uDAddress}\n                                    ensAddress={ensAddress}\n                                />\n                                {\n                                    showSWAddressWarning ?\n                                        <Checkbox\n                                            className={styles.binanceAddressWarning}\n                                            label={<span id=\"binance-address-warning-label\">\n                                                I confirm this address is not a {unsupportedSWPlatforms.join(' / ')} address: <br />\n                                                These platforms do not support ${selectedAsset?.symbol} deposits from smart wallets\n                                                <a href='https://help.ambire.com/hc/en-us/articles/4415473743506-Statement-on-MATIC-BNB-deposits-to-Binance' target='_blank' rel='noreferrer'><MdInfo size={20} /></a>\n                                            </span>}\n                                            checked={sWAddressConfirmed}\n                                            onChange={({ target }) => setSWAddressConfirmed(target.checked)}\n                                        />\n                                        :\n                                        null\n                                }\n                                <Button primaryGradient={true} disabled={disabled} onClick={sendTx} className='transfer-button'>Send</Button>\n                            </div>\n                            :\n                            <NoFundsPlaceholder/>\n                ) :\n                <Providers walletAddress={selectedAcc} networkDetails={selectedNetwork} relayerURL={relayerURL} portfolio={portfolio} sellMode={true} selectedAsset={selectedAsset ? selectedAsset : null}/>\n               }\n           </Panel>\n           {!gasTankDetails && <Addresses\n                selectedAsset={selectedAsset}\n                selectedNetwork={selectedNetwork}\n                addresses={addresses}\n                addAddress={addAddress}\n                removeAddress={removeAddress}\n                onSelectAddress={address => setAddress(address)}\n            />}\n        </div>\n    )\n}\n\nexport default withRouter(Transfer)","const customIcons = {\n    '0xb468a1e5596cfbcdf561f21a10490d99b4bb7b68': 'https://upload.wikimedia.org/wikipedia/commons/thumb/5/5a/Jeff_Sessions_with_Elmo_and_Rosita_%28cropped%29.jpg/220px-Jeff_Sessions_with_Elmo_and_Rosita_%28cropped%29.jpg', // TEST Polygon ELMO token,\n    '0x88800092ff476844f74dc2fc427974bbee2794ae': 'https://raw.githubusercontent.com/AmbireTech/ambire-brand/main/logos/ambire_logo_white_bg_250x250.png', // Ambire Wallet Token\n    '0x47cd7e91c3cbaaf266369fe8518345fc4fc12935': 'https://raw.githubusercontent.com/AmbireTech/ambire-brand/main/logos/xwallet_250x250.png', //xWallet\n    '0xb6456b57f03352be48bf101b46c1752a0813491a': 'https://raw.githubusercontent.com/AmbireTech/adex-brand/master/logos/vaporwave-adex-2.png', // ADX-STAKING\n    '0xd9a4cb9dc9296e111c66dfacab8be034ee2e1c2c': 'https://raw.githubusercontent.com/AmbireTech/adex-brand/master/logos/ADX-loyalty%40256x256.png', // ADX-LOYALTY\n    '0xec3b10ce9cabab5dbf49f946a623e294963fbb4e': 'https://raw.githubusercontent.com/AmbireTech/ambire-brand/main/logos/xwallet_250x250.png', // Polygons test xWallet\n    '0xe9415e904143e42007865e6864f7f632bd054a08': 'https://raw.githubusercontent.com/AmbireTech/ambire-brand/main/logos/Ambire_logo_250x250.png', // Polygons test Wallet\n    '0xade00c28244d5ce17d72e40330b1c318cd12b7c3': 'https://raw.githubusercontent.com/AmbireTech/ambire-brand/main/official-logos/Ambire-AdEx/Ambire_AdEx_Symbol_color_white_bg.png' //ADX-TOKEN\n}\n\nconst zapperStorageTokenIcons = 'https://storage.googleapis.com/zapper-fi-assets/tokens'\n\nexport function getTokenIcon(networkId = '', address = '') {\n    const addr = address.toLowerCase()\n    const net = networkId.toLowerCase()\n    return customIcons[addr] || `${zapperStorageTokenIcons}/${net}/${addr}.png`\n}\n","function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nmodule.exports = _defineProperty;","export function formatFloatTokenAmount(amount, useGrouping = true, maximumFractionDigits = 18) {\n    if (isNaN(amount) || isNaN(parseFloat(amount)) || !(typeof amount === 'number' || typeof amount === 'string')) return amount\n\n    try {\n        const minimumFractionDigits = Math.min(2, maximumFractionDigits || 0)\n        return ((typeof amount === 'number') ? amount : parseFloat(amount))\n            .toLocaleString(undefined,\n                {\n                    useGrouping,\n                    maximumFractionDigits: Math.max(minimumFractionDigits, maximumFractionDigits),\n                    minimumFractionDigits\n                })\n    } catch (err) {\n        console.error(err)\n        return amount\n    }\n}\n\n// Round a floating point number to a specific decimal places, i.e. 1.156 => 1.16\nexport function roundFloatingNumber(number, places = 2) {\n  const decimals = Math.pow(10, places)\n\n  return Math.round((number + Number.EPSILON) * decimals) / decimals\n}\n","var defineProperty = require(\"./defineProperty\");\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nmodule.exports = _objectSpread2;","import { parseUnits } from 'ethers/lib/utils'\nimport { isValidAddress, isKnownTokenOrContract } from 'ambire-common/src/services/address'\nimport accountPresets from 'ambire-common/src/constants/accountPresets'\n\nconst validateAddress = address => {\n    if (!(address && address.length)) {\n        return {\n            success: false,\n            message: ''\n        }\n    }\n\n    if (!(address && isValidAddress(address))) {\n        return {\n            success: false,\n            message: 'Invalid address.'\n        }\n    }\n\n    return { success: true }\n}\n\nconst validateAddAuthSignerAddress = (address, selectedAcc) => {\n    const isValidAddr = validateAddress(address)\n    if (!isValidAddr.success) return isValidAddr\n\n    if (address && selectedAcc && (address === selectedAcc)) {\n        return {\n            success: false,\n            message: 'The entered address should be different than the your own account address.'\n        }\n    }\n    \n    return { success: true }\n}\n\nconst validateSendTransferAddress = (address, selectedAcc, addressConfirmed, isKnownAddress, isUDAddress, isEnsAddress) => {\n    const isValidAddr = validateAddress(address)\n    if (!isValidAddr.success) return isValidAddr\n\n    if (address && address === accountPresets.feeCollector) {\n        return {\n            success: true\n        }\n    }\n\n    if (address && selectedAcc && (address === selectedAcc)) {\n        return {\n            success: false,\n            message: 'The entered address should be different than the your own account address.'\n        }\n    }\n    \n    if (address && isKnownTokenOrContract(address)) {\n        return {\n            success: false,\n            message: 'You are trying to send tokens to a smart contract. Doing so would burn them.'\n        }\n    }\n\n    if (address && (!isKnownAddress(address) && !addressConfirmed && !isUDAddress && !isEnsAddress)) { \n        return {\n            success: false,\n            message: `You're trying to send to an unknown address. If you're really sure, confirm using the checkbox below.`\n        }\n    }\n\n    if (address && (!isKnownAddress(address) && !addressConfirmed && (isUDAddress || isEnsAddress))) { \n        const name = isUDAddress ? 'Unstoppable domain' : 'Ethereum Name Service'\n        return {\n            success: false,\n            message: `You're trying to send to an ${name}. If you really trust to the person who gave you, confirm using the checkbox below.`\n        }\n    }\n\n    return { success: true }\n}\n\nconst validateSendTransferAmount = (amount, selectedAsset) => {\n    if (!(amount && amount.length)) {\n        return {\n            success: false,\n            message: ''\n        }\n    }\n    \n    if (!(amount && (amount > 0))) {\n        return {\n            success: false,\n            message: 'The amount must be greater than 0.'\n        }\n    }\n\n    try {\n        if (amount && selectedAsset && selectedAsset.decimals) {\n            const parsedAmount = amount.slice(0, amount.indexOf('.') + selectedAsset.decimals + 1); // Fixed decimals in case amount is bigger than selectedAsset.decimals, otherwise would cause overflow error\n            const bigNumberAmount = parseUnits(parsedAmount, selectedAsset.decimals)\n            if (bigNumberAmount && selectedAsset.balanceRaw && bigNumberAmount.gt(selectedAsset.balanceRaw)) {\n                return {\n                    success: false,\n                    message: `The amount is greater than the asset's balance: ${selectedAsset?.balance} ${selectedAsset?.symbol}.`\n                }\n            }\n        }\n    } catch(e) {\n        console.error(e);\n    }\n\n    return { success: true }\n}\n\nconst validateSendNftAddress = (address, selectedAcc, addressConfirmed, isKnownAddress, metadata, selectedNetwork, network, isUDAddress, isEnsAddress) => {\n    const isValidAddr = validateSendTransferAddress(address, selectedAcc, addressConfirmed, isKnownAddress, isUDAddress, isEnsAddress)\n    if (!isValidAddr.success) return isValidAddr\n\n    if (metadata && selectedAcc && (metadata.owner?.address.toLowerCase() !== selectedAcc.toLowerCase())) {\n        return {\n            success: false,\n            message: `The NFT you're trying to send is not owned by you!`\n        }\n    }\n\n    if (selectedNetwork && network && (selectedNetwork.id !== network)) {\n        return {\n            success: false,\n            message: 'The selected network is not the correct one.'\n        }\n    }\n\n    return { success: true }\n}\n\nexport {\n    validateAddAuthSignerAddress,\n    validateSendNftAddress,\n    validateSendTransferAddress,\n    validateSendTransferAmount\n}\n","// @ts-nocheck TODO: Fill in all missing types before enabling the TS check again\n// It costs around 19k to send a token, if that token was interacted with before in the same transaction,\n// because of SLOAD costs - they depend on whether a slot has been read\n// however, it costs 30k if the token has not been interacted with\n// we may decrease it a bit and lean on the relayer failsafe values (cfg.gasAddedOnEstimate) later on\nconst ADDED_GAS_TOKEN = 30000\nconst ADDED_GAS_NATIVE = 12000\n\nexport function getAddedGas(token) {\n  return !token?.address || token?.address === '0x0000000000000000000000000000000000000000'\n    ? ADDED_GAS_NATIVE\n    : ADDED_GAS_TOKEN\n}\n\n// can't think of a less funny name for that\nexport function getFeePaymentConsequences(token, estimation, isGasTankEnabled) {\n  // Relayerless mode\n  if (!estimation?.feeInUSD || !token) return { multiplier: 1, addedGas: 0 }\n  // Relayer mode\n  const addedGas = getAddedGas(token)\n  // If Gas Tank enabled\n  if (isGasTankEnabled) return { addedGas: 0, multiplier: 1 }\n\n  return {\n    // otherwise we get very long floating point numbers with trailing .999999\n    multiplier: parseFloat(((estimation.gasLimit + addedGas) / estimation.gasLimit).toFixed(4)),\n    addedGas\n  }\n}\n\n// Returns feeToken data with all multipliers applied\nexport function getFeesData(feeToken, estimation, speed, isGasTankEnabled, network) {\n  const { addedGas, multiplier } = getFeePaymentConsequences(feeToken, estimation, isGasTankEnabled)\n  const savedGas = getAddedGas(feeToken)\n  const discountMultiplier = 1 - (feeToken?.discount || 0)\n  const totalMultiplier = multiplier * discountMultiplier\n  const nativeRate = feeToken?.nativeRate || 1\n  const isCrossChainNativeSelected =\n    isGasTankEnabled &&\n    feeToken.address === '0x0000000000000000000000000000000000000000' &&\n    network.id !== feeToken.network\n  // eslint-disable-next-line no-nested-ternary\n  const feeInNative = estimation.customFee\n    ? (estimation.customFee * discountMultiplier) / nativeRate\n    : !isCrossChainNativeSelected\n    ? estimation.feeInNative[speed] * totalMultiplier\n    : (((estimation.feeInNative[speed] * totalMultiplier) / nativeRate) *\n        estimation.nativeAssetPriceInUSD) /\n      feeToken.price\n  // eslint-disable-next-line no-nested-ternary\n  const feeInUSD = !Number.isNaN(estimation.nativeAssetPriceInUSD)\n    ? !isCrossChainNativeSelected\n      ? feeInNative * estimation.nativeAssetPriceInUSD\n      : feeInNative * feeToken.price\n    : undefined\n  const feeInFeeToken = feeInNative * nativeRate\n\n  return {\n    feeInNative,\n    feeInUSD,\n    feeInFeeToken,\n    addedGas, // use it bundle data\n    savedGas\n  }\n}\nexport function isTokenEligible(token, speed, estimation, isGasTankEnabled, network) {\n  if (estimation?.relayerless && token?.address === '0x0000000000000000000000000000000000000000')\n    return true\n  if (!token) return false\n  const { feeInFeeToken } = getFeesData(token, estimation, speed, isGasTankEnabled, network)\n  const balanceInFeeToken = parseInt(token.balance) / 10 ** token.decimals\n  return balanceInFeeToken > feeInFeeToken\n}\n\nconst contractErrors = [\n  'caller is a contract',\n  'contract not allowed',\n  'contract not supported',\n  'No contractz allowed',\n  /* no */ 'contracts allowed',\n  /* c or C */ 'ontract is not allowed'\n]\n\nexport function mapTxnErrMsg(msg: any) {\n  if (!msg) return\n  if (msg.includes('Router: EXPIRED')) return 'Swap expired'\n  if (msg.includes('Router: INSUFFICIENT_OUTPUT_AMOUNT'))\n    return 'Swap will suffer slippage higher than your requirements'\n  if (msg.includes('INSUFFICIENT_PRIVILEGE')) return 'Your signer address is not authorized.'\n  if (contractErrors.find((contractMsg) => msg.includes(contractMsg)))\n    return 'This dApp does not support smart wallets.'\n  return msg\n}\n\nexport function getErrHint(msg: any) {\n  if (!msg) return\n  if (msg.includes('Router: EXPIRED')) return 'Try performing the swap again'\n  if (msg.includes('Router: INSUFFICIENT_OUTPUT_AMOUNT'))\n    return 'Try performing the swap again or increase your slippage requirements'\n  if (msg.includes('INSUFFICIENT_PRIVILEGE'))\n    return 'If you set a new signer for this account, try re-adding the account.'\n  if (contractErrors.find((contractMsg) => msg.includes(contractMsg)))\n    return 'Contact the dApp developers to tell them to implement smart wallet support by not blocking contract interactions and/or implementing EIP1271.'\n  return 'Sending this transaction batch would have resulted in an error, so we prevented it.'\n}\n\nexport function toHexAmount(amnt: any, decimals: any) {\n  return `0x${Math.round(amnt * 10 ** decimals).toString(16)}`\n}\n\nexport function getDiscountApplied(amnt: any, discount = 0) {\n  if (!discount) return 0\n  if (!amnt) return 0\n  if (discount === 1) return amnt\n  return (amnt / (1 - discount)) * discount\n}\n","// @ts-nocheck TODO: Fill in all missing types before enabling the TS check again\nimport ERC20ABI from 'adex-protocol-eth/abi/ERC20.json'\nimport { BigNumber } from 'ethers'\nimport { Interface } from 'ethers/lib/utils'\n\nimport accountPresets from '../../constants/accountPresets'\n\nconst ERC20AbiInterface = new Interface(ERC20ABI)\nconst TRANSFER_SIGHASH = ERC20AbiInterface.getSighash(\n  ERC20AbiInterface.getFunction('transfer').format()\n)\nconst feeCollector = accountPresets.feeCollector\nconst NATIVE_ADDRESS = '0x0000000000000000000000000000000000000000'\n\nfunction getTxnTransferInfo(txn) {\n  try {\n    const res = ERC20AbiInterface.decodeFunctionData('transfer', txn)\n\n    return {\n      value: BigNumber.from(res._value),\n      ...res\n    }\n  } catch (e) {\n    console.error(e)\n    return {}\n  }\n}\n\nfunction isFeeCollectorTxn(txn) {\n  // is first call is to relayer this is native\n  if (txn[0] === feeCollector) return true\n  // transfer token to relayer\n  if (txn[2].startsWith(TRANSFER_SIGHASH) && getTxnTransferInfo(txn[2])._to === feeCollector)\n    return true\n  return false\n}\n\nconst getGasTankFilledTxns = (transactions) => {\n  const depositTxns: any = []\n  transactions.forEach(({ txId, txns, submittedAt, gasTankFee, identity, ...rest }) => {\n    const filteredTxns = txns\n      .filter((txnCall, i) => isFeeCollectorTxn(txnCall) && (gasTankFee || i < txns.length - 1))\n      .map((fillTxn) => {\n        if (fillTxn[0] === feeCollector) {\n          return {\n            submittedAt,\n            address: NATIVE_ADDRESS,\n            value: BigNumber.from(fillTxn[1]),\n            identity,\n            txId,\n            ...rest\n          }\n        }\n        if (\n          fillTxn[2].startsWith(TRANSFER_SIGHASH) &&\n          ERC20AbiInterface.decodeFunctionData('transfer', fillTxn[2])._to === feeCollector\n        ) {\n          return {\n            submittedAt,\n            address: fillTxn[0],\n            value: BigNumber.from(\n              ERC20AbiInterface.decodeFunctionData('transfer', fillTxn[2])._value\n            ),\n            identity,\n            txId,\n            ...rest\n          }\n        }\n        return null\n      })\n\n    if (filteredTxns.length) depositTxns.push(filteredTxns[0])\n  })\n\n  return depositTxns\n}\n\nexport { getGasTankFilledTxns }\n","import useGasTankData from './useGasTankData'\n\nexport default useGasTankData\n","import { formatUnits } from 'ethers/lib/utils'\nimport { useMemo } from 'react'\n\nimport { getAddedGas } from '../../helpers/sendTxnHelpers'\nimport { getGasTankFilledTxns } from '../../services/isFeeCollectorTxn'\nimport useCacheBreak from '../useCacheBreak'\nimport { UseGasTankDataProps, UseGasTankDataReturnType } from './types'\n\nexport default function useGasTankData({\n  relayerURL,\n  selectedAcc,\n  network,\n  portfolio,\n  useRelayerData\n}: UseGasTankDataProps): UseGasTankDataReturnType {\n  const { cacheBreak } = useCacheBreak()\n  const { tokens } = portfolio\n\n  const urlGetBalance = relayerURL\n    ? `${relayerURL}/gas-tank/${selectedAcc}/getBalance?cacheBreak=${cacheBreak}`\n    : null\n  const urlGetFeeAssets = relayerURL\n    ? `${relayerURL}/gas-tank/assets?cacheBreak=${cacheBreak}`\n    : null\n  const urlGetTransactions = relayerURL\n    ? `${relayerURL}/identity/${selectedAcc}/${network?.id}/transactions`\n    : null\n\n  const { data: balancesRes, isLoading } = useRelayerData({ url: urlGetBalance })\n  const { data: feeAssetsRes } = useRelayerData({ url: urlGetFeeAssets })\n  const { data: executedTxnsRes } = useRelayerData({ url: urlGetTransactions })\n\n  const gasTankBalances = useMemo(\n    () =>\n      balancesRes &&\n      balancesRes.length &&\n      balancesRes.map(({ balanceInUSD }: any) => balanceInUSD).reduce((a: any, b: any) => a + b, 0),\n    [balancesRes]\n  )\n\n  const gasTankTxns = useMemo(\n    () =>\n      executedTxnsRes &&\n      executedTxnsRes.txns.length &&\n      executedTxnsRes.txns.filter((item: any) => !!item.gasTankFee),\n    [executedTxnsRes]\n  )\n\n  const feeAssetsPerNetwork = useMemo(\n    () =>\n      feeAssetsRes &&\n      feeAssetsRes.length &&\n      feeAssetsRes.filter((item: any) => item.network === network?.id),\n    [feeAssetsRes, network?.id]\n  )\n\n  const executedTxns = executedTxnsRes && executedTxnsRes.txns.length && executedTxnsRes.txns\n  const gasTankFilledTxns = useMemo(\n    () => executedTxns && executedTxns.length && getGasTankFilledTxns(executedTxns),\n    [executedTxns]\n  )\n\n  const availableFeeAssets = useMemo(\n    () =>\n      feeAssetsPerNetwork?.map((item: any) => {\n        const isFound = tokens?.find((x) => x.address.toLowerCase() === item.address.toLowerCase())\n        if (isFound)\n          return {\n            ...isFound,\n            tokenImageUrl: item.icon,\n            decimals: item.decimals,\n            symbol: item.symbol,\n            balance: isFound.balance,\n            disableGasTankDeposit: !!item.disableGasTankDeposit,\n            balanceUSD:\n              parseFloat(isFound.balance) *\n              parseFloat(\n                feeAssetsPerNetwork.find(\n                  (x: any) => x.address.toLowerCase() === isFound.address.toLowerCase()\n                ).price || 0\n              )\n          }\n\n        return {\n          ...item,\n          tokenImageUrl: item.icon,\n          balance: 0,\n          balanceUSD: 0,\n          decimals: 0,\n          address: item.address.toLowerCase(),\n          symbol: item.symbol.toUpperCase()\n        }\n      }),\n    [feeAssetsPerNetwork, tokens]\n  )\n\n  const totalSavedResult = useMemo(\n    () =>\n      gasTankTxns &&\n      gasTankTxns.length &&\n      gasTankTxns.map((item: any) => {\n        const feeTokenDetails = feeAssetsRes\n          ? feeAssetsRes.find((i: any) => i.symbol === item.feeToken)\n          : null\n        const savedGas = feeTokenDetails ? getAddedGas(feeTokenDetails) : null\n        return {\n          saved: savedGas ? item.feeInUSDPerGas * savedGas : 0.0,\n          cashback:\n            item.gasTankFee && item.gasTankFee.cashback\n              ? // @ts-ignore FIXME: Figure out why TypeScript complains\n                formatUnits(\n                  item.gasTankFee.cashback.toString(),\n                  feeTokenDetails?.decimals\n                ).toString() * feeTokenDetails?.price\n              : 0.0\n        }\n      }),\n    [feeAssetsRes, gasTankTxns]\n  )\n\n  return {\n    balancesRes,\n    gasTankBalances,\n    isLoading,\n    gasTankTxns,\n    feeAssetsRes,\n    gasTankFilledTxns,\n    totalSavedResult,\n    availableFeeAssets\n  }\n}\n"],"sourceRoot":""}