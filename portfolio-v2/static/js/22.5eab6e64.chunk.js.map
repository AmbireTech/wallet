{"version":3,"sources":["components/Wallet/CrossChain/useMovr.js","components/Wallet/CrossChain/Quotes/Quotes.js","components/Wallet/CrossChain/History/movrTxParser.js","components/Wallet/CrossChain/History/History.js","components/Wallet/CrossChain/CrossChain.js","lib/icons.js"],"names":["baseURL","useMovr","fetchChains","useCallback","a","fetchGet","response","result","fetchFromTokens","from","to","map","token","fetchToTokens","fetchQuotes","fromAsset","fromChainId","toAsset","toChainId","amount","excludeBridges","sort","checkApprovalAllowance","chainID","owner","allowanceTarget","tokenAddress","approvalBuildTx","sendBuildTx","recipient","output","routePath","checkTxStatus","transactionHash","formatAmount","asset","Math","pow","decimals","formatFeeAmount","fee","route","address","getNetwork","id","networks","find","chainId","Quotes","addRequest","selectedAccount","fromTokensItems","quotes","onQuotesConfirmed","onCancel","addToast","useToasts","value","fromNetwork","toNetwork","useState","selectedRoute","setSelectedRoute","loading","setLoading","routes","fees","middlewareRoute","bridgeRoute","middlewareFee","bridgeFee","radios","label","className","style","backgroundImage","middlewareInfo","icon","displayName","bridgeInfo","inputAmount","symbol","outputAmount","sendTx","data","account","type","txn","onConfirm","isApprovalRequired","Date","now","tx","hex","serviceTimeMinutes","serviceTime","getMinutes","txData","console","error","message","name","length","onChange","small","clear","disabled","onClick","getAssetInfo","tokens","formattedAddress","formatNativeTokenAddress","knownTokens","getAssetIcon","network","n","getTokenIcon","formatTx","inputToken","outputToken","fromAssetIcon","toAssetIcon","toString","toNumber","movrTxParser","humanizerInfo","abis","MovrAnyswapInterface","Interface","MovrAnyswap","MovrRouterInterface","MovrRouter","getSighash","currentNetwork","parseTransaction","args","middlewareInputToken","tokenToBridge","middlewareRequest","bridgeRequest","History","relayerURL","quotesConfirmed","useConstants","constants","txStatuses","setTxStatuses","cacheBreak","setCacheBreak","useRef","getNetworkDetails","useEffect","intvl","setTimeout","clearTimeout","url","useRelayerData","relayerTransactions","errMsg","isRelayerLoading","isLoading","txTransfers","useMemo","current","txns","txId","outboundTransferTo","sigHash","slice","parseOutboundTransferTo","filter","call","hash","Promise","all","storedQuote","q","status","isPending","sourceTxStatus","destinationTxStatus","sourceTx","statusError","statuses","getStatuses","href","explorerUrl","target","rel","CrossChain","portfolio","setDisabled","loadingFromTokens","setLoadingFromTokens","loadingToTokens","setLoadingToTokens","loadingQuotes","setLoadingQuotes","setFromTokenItems","fromToken","setFromToken","setAmount","chainsItems","setChainsItems","toChain","setToChain","toTokenItems","setToTokenItems","toToken","setToToken","setQuotes","portfolioTokens","useLocalStorage","key","defaultValue","setQuotesConfirmed","fromChain","formDisabled","hasNoFunds","balance","total","full","getTokenFromPortofolio","Number","repeat","loadChains","chains","isSupported","includes","loadFromTokens","fromTokens","filteredFromTokens","uniqueFromTokenAddresses","Set","loadToTokens","toTokens","filteredToTokens","uniqueTokenAddresses","tokenItems","b","localeCompare","maxAmount","portfolioToken","balanceRaw","ethers","utils","formatUnits","e","getQuotes","flatAmount","parseUnits","fromTokenItem","equivalentToken","asyncLoad","setStateLoading","loadCallback","loaded","isCurrNetworkBalanceLoading","amountLabel","quoteRequest","updatedQuotesConfirmed","searchable","items","min","onInput","button","onButtonClick","customIcons","zapperStorageTokenIcons","networkId","addr","toLowerCase","net"],"mappings":"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","file":"static/js/22.5eab6e64.chunk.js","sourcesContent":["import { useCallback } from \"react\";\nimport { fetchGet } from \"lib/fetch\";\n\nconst baseURL = 'https://backend.movr.network/v1'\nconst watcherBaseURL = 'https://watcherapi.fund.movr.network/api/v1'\n\nconst useMovr = () => {\n    const fetchChains = useCallback(async () => {\n        const response = await fetchGet(`${baseURL}/supported/chains`)\n        if (!response) return null\n        return response.result\n    }, [])\n\n    const fetchFromTokens = useCallback(async (from, to) => {\n        const response = await fetchGet(`${baseURL}/supported/from-token-list?fromChainId=${from}&toChainId=${to}`)\n        if (!response) return null\n        return response.result.map(({ token }) => token)\n    }, [])\n\n    const fetchToTokens = useCallback(async (from, to) => {\n        const response = await fetchGet(`${baseURL}/supported/to-token-list?fromChainId=${from}&toChainId=${to}`)\n        if (!response) return null\n        return response.result.map(({ token }) => token)\n    }, [])\n\n    const fetchQuotes = useCallback(async (fromAsset, fromChainId, toAsset, toChainId, amount, excludeBridges, sort = 'cheapestRoute') => {\n        const response = await fetchGet(`${baseURL}/quote?fromAsset=${fromAsset}&fromChainId=${fromChainId}&toAsset=${toAsset}&toChainId=${toChainId}&amount=${amount}&excludeBridges=${excludeBridges}&sort=${sort}`)\n        if (!response) return null\n        return response.result\n    }, [])\n\n    const checkApprovalAllowance = useCallback(async (chainID, owner, allowanceTarget, tokenAddress) => {\n        const response = await fetchGet(`${baseURL}/approval/check-allowance?chainID=${chainID}&owner=${owner}&allowanceTarget=${allowanceTarget}&tokenAddress=${tokenAddress}`)\n        if (!response) return null\n        return response.result\n    }, [])\n\n    const approvalBuildTx = useCallback(async (chainID, owner, allowanceTarget, tokenAddress, amount) => {\n        const response = await fetchGet(`${baseURL}/approval/build-tx?chainID=${chainID}&owner=${owner}&allowanceTarget=${allowanceTarget}&tokenAddress=${tokenAddress}&amount=${amount}`)\n        if (!response) return null\n        return response.result\n    }, [])\n\n    const sendBuildTx = useCallback(async (recipient, fromAsset, fromChainId, toAsset, toChainId, amount, output, routePath) => {\n        const response = await fetchGet(`${baseURL}/send/build-tx?recipient=${recipient}&fromAsset=${fromAsset}&fromChainId=${fromChainId}&toAsset=${toAsset}&toChainId=${toChainId}&amount=${amount}&output=${output}&fromAddress=${recipient}&routePath=${routePath}`)\n        if (!response) return null\n        return response.result\n    }, [])\n\n    const checkTxStatus = useCallback(async (transactionHash, fromChainId, toChainId) => {\n        const response = await fetchGet(`${watcherBaseURL}/transaction-status?transactionHash=${transactionHash}&fromChainId=${fromChainId}&toChainId=${toChainId}`)\n        if (!response) return null\n        return response.result\n    }, [])\n\n    return {\n        fetchChains,\n        fetchToTokens,\n        fetchFromTokens,\n        fetchQuotes,\n        checkApprovalAllowance,\n        approvalBuildTx,\n        sendBuildTx,\n        checkTxStatus\n    }\n}\n\nexport default useMovr","import './Quotes.scss'\n\nimport { MdOutlineArrowBack, MdOutlineArrowForward, MdOutlineCheck, MdOutlineClose } from 'react-icons/md';\nimport { Button, Loading, Radios } from 'components/common';\nimport { useState } from 'react';\nimport networks from 'consts/networks';\nimport useMovr from 'components/Wallet/CrossChain/useMovr';\nimport { useToasts } from 'hooks/toasts';\n\n\nconst formatAmount = (amount, asset) => amount / Math.pow(10, asset.decimals)\nconst formatFeeAmount = (fee, route) => {\n    const asset = fee.address === route.toAsset.address ? route.toAsset : route.fromAsset\n    return formatAmount(fee.amount, asset)\n}\nconst getNetwork = id => networks.find(({ chainId }) => chainId === id)\n\nconst Quotes = ({ addRequest, selectedAccount, fromTokensItems, quotes, onQuotesConfirmed, onCancel }) => {\n    const { addToast } = useToasts()\n    const { approvalBuildTx, sendBuildTx } = useMovr()\n\n    const { toAsset } = quotes;\n    const fromAsset = fromTokensItems.find(({ value }) => value === quotes.fromAsset.address)\n    const fromNetwork = getNetwork(quotes.fromAsset.chainId)\n    const toNetwork = getNetwork(toAsset.chainId)\n    const [selectedRoute, setSelectedRoute] = useState(null)\n    const [loading, setLoading] = useState(false)\n\n    const routes = quotes.routes.map(route => {\n        const { fees, middlewareRoute, bridgeRoute } = route\n        return {\n            ...route,\n            middlewareFee: middlewareRoute ? formatFeeAmount(fees.middlewareFee, middlewareRoute) : 0,\n            bridgeFee: bridgeRoute ? formatFeeAmount(fees.bridgeFee, bridgeRoute) : 0\n        }\n    })\n\n    const radios = routes.map(({ routePath, middlewareFee, bridgeFee, middlewareRoute, bridgeRoute }) => ({\n        label:\n            <div className=\"route\">\n                <div className=\"info\">\n                    {\n                        middlewareRoute ?\n                            <div className=\"middleware\">\n                                <div className=\"icon\" style={{backgroundImage: `url(${middlewareRoute.middlewareInfo.icon})`}}></div>\n                                <div className=\"name\">{ middlewareRoute.middlewareInfo.displayName }</div>\n                            </div>\n                            :\n                            null\n                    }\n                    <div className=\"bridge\">\n                        <div className=\"icon\" style={{backgroundImage: `url(${bridgeRoute.bridgeInfo.icon})`}}></div>\n                        <div className=\"name\">{ bridgeRoute.bridgeInfo.displayName }</div>\n                    </div>\n                </div>\n                <div className=\"summary\">\n                    <div className=\"amounts\">\n                        {\n                            middlewareRoute ?\n                                <div className=\"amount\">\n                                    { formatAmount(middlewareRoute.inputAmount, middlewareRoute.fromAsset) } { middlewareRoute.fromAsset.symbol }\n                                </div>\n                                :\n                                null\n                        }   \n                        <div className=\"amount\">\n                            { formatAmount(bridgeRoute.outputAmount, bridgeRoute.toAsset) } { bridgeRoute.toAsset.symbol }\n                        </div>\n                    </div>\n                    <div className=\"fees\">\n                        {\n                            middlewareRoute ?\n                                <div className=\"fee\">\n                                    { middlewareFee ? <>Fee: { middlewareFee } { middlewareRoute.fromAsset.symbol }</> : null }\n                                </div>\n                                :\n                                null\n                        }\n                        <div className=\"fee\">\n                            { bridgeFee ? <>Fee: { bridgeFee } { bridgeRoute.toAsset.symbol }</> : null }\n                        </div>\n                    </div>\n                </div>\n            </div>,\n        value: routePath\n    }))\n\n    const sendTx = (id, chainId, to, data, value = '0x00') => {\n        addRequest({\n            id,\n            chainId,\n            account: selectedAccount,\n            type: 'eth_sendTransaction',\n            txn: {\n                to,\n                data,\n                value\n            }\n        })\n    }\n\n    const onConfirm = async () => {\n        setLoading(true)\n\n        try {\n            const { allowanceTarget, isApprovalRequired, middlewareRoute, bridgeRoute, routePath } = routes.find(({ routePath }) => routePath === selectedRoute)\n\n            let fromAsset, inputAmount = null\n            if (middlewareRoute) {\n                fromAsset = middlewareRoute.fromAsset\n                inputAmount = middlewareRoute.inputAmount\n            } else {\n                fromAsset = bridgeRoute.fromAsset\n                inputAmount = bridgeRoute.inputAmount\n            }\n\n            const { toAsset, outputAmount, bridgeInfo } = bridgeRoute\n            \n            if (isApprovalRequired) {\n                const { to, data } = await approvalBuildTx(fromAsset.chainId, selectedAccount, allowanceTarget, fromAsset.address, inputAmount)\n                sendTx(`transfer_approval_crosschain_${Date.now()}`, fromAsset.chainId, to, data)\n            }\n\n            const { tx } = await sendBuildTx(selectedAccount, fromAsset.address, fromAsset.chainId, toAsset.address, toAsset.chainId, inputAmount, outputAmount, routePath)\n            sendTx(`transfer_send_crosschain_${Date.now()}`, fromAsset.chainId, tx.to, tx.data, tx.value.hex)\n\n            const serviceTimeMinutes = new Date((bridgeInfo?.serviceTime || 0) + (middlewareRoute?.serviceTime || 0)).getMinutes()\n            onQuotesConfirmed({\n                txData: tx.data,\n                serviceTimeMinutes,\n                to: {\n                    chainId: toAsset.chainId,\n                    asset: toAsset,\n                    amount: outputAmount\n                }\n            })\n            onCancel()\n        } catch(e) {\n            console.error(e);\n            addToast(e.message || e, { error: true })\n        }\n\n        setLoading(false)\n    }\n\n    return (\n        <div id=\"quotes\">\n            <div id=\"summary\">\n                <div className=\"path\">\n                    <div className=\"network\">\n                        <div className=\"icon\" style={{backgroundImage: `url(${fromNetwork.icon})`}}></div>\n                        <div className=\"name\">{ fromNetwork.name }</div>\n                    </div>\n                    <div className=\"token\">\n                        <div className=\"icon\" style={{backgroundImage: `url(${fromAsset.icon})`}}></div>\n                        <div className=\"name\">{ fromAsset.label }</div>\n                    </div>\n                </div>\n                <MdOutlineArrowForward/>\n                <div className=\"path\">\n                    <div className=\"network\">\n                        <div className=\"icon\" style={{backgroundImage: `url(${toNetwork.icon})`}}></div>\n                        <div className=\"name\">{ toNetwork.name }</div>\n                    </div>\n                    <div className=\"token\">\n                        <div className=\"icon\" style={{backgroundImage: `url(${toAsset.icon})`}}></div>\n                        <div className=\"name\">{ toAsset.name } ({ toAsset.symbol })</div>\n                    </div>\n                </div>\n            </div>\n\n            {\n                loading ?\n                    <Loading/>\n                    :\n                    <div id=\"routes\">\n                        <div className=\"title\">Routes</div>\n                        {\n                            !radios.length ?\n                                <div id=\"no-routes-placeholder\">\n                                    There is no routes available for this configuration at the moment.<br/>\n                                    Try increasing the amount or switching token.\n                                </div>\n                                :\n                                <Radios radios={radios} onChange={value => setSelectedRoute(value)}/>\n                        }\n                    </div>\n            }\n\n            <div className=\"separator\"></div>\n\n            <div id=\"buttons\">\n                <Button small clear icon={routes.length ? <MdOutlineClose/> : <MdOutlineArrowBack/>} disabled={loading} onClick={onCancel}>{ routes.length ? 'Cancel' : 'Go Back' }</Button>\n                { routes.length ? \n                    <Button small icon={<MdOutlineCheck/>} disabled={!selectedRoute || loading} onClick={onConfirm}>Confirm</Button>\n                : null }\n            </div>\n        </div>\n    )\n}\n\nexport default Quotes","import { formatNativeTokenAddress, knownTokens } from 'lib/humanReadableTransactions'\nimport { Interface } from 'ethers/lib/utils'\nimport networks from 'consts/networks'\nimport { getTokenIcon } from 'lib/icons'\n\nconst getAssetInfo = (tokens, address) => {\n    const formattedAddress = formatNativeTokenAddress(address)\n    return tokens[formattedAddress] || knownTokens[formattedAddress] || ['Unknown', 0]\n}\n\nconst getAssetIcon = (address, chainId) => {\n    const network = networks.find(n => n.chainId === chainId)\n    return network ? getTokenIcon(network.id, formatNativeTokenAddress(address)) : null\n}\n\nconst formatTx = (tokens, fromChainId, toChainId, inputToken, outputToken, amount) => {\n    const fromAsset = getAssetInfo(tokens, inputToken)\n    const toAsset = getAssetInfo(tokens, outputToken)\n    const fromAssetIcon = getAssetIcon(inputToken, fromChainId)\n    const toAssetIcon = getAssetIcon(outputToken, fromChainId)\n\n    return {\n        from: {\n            chainId: fromChainId,\n            asset: {\n                address: inputToken,\n                symbol: fromAsset[0],\n                decimals: fromAsset[1],\n                icon: fromAssetIcon\n            },\n            amount: amount.toString()\n        },\n        to: {\n            chainId: toChainId.toNumber(),\n            asset: {\n                address: outputToken,\n                symbol: toAsset[0],\n                decimals: toAsset[1],\n                icon: toAssetIcon\n            },\n            amount: null\n        }\n    }\n}\n\nconst movrTxParser = (humanizerInfo) => {\n    const { tokens, abis } = humanizerInfo\n\n    const MovrAnyswapInterface = new Interface(abis.MovrAnyswap)\n    const MovrRouterInterface = new Interface(abis.MovrRouter)\n    return {\n        [MovrAnyswapInterface.getSighash('outboundTransferTo')]: (value, data, currentNetwork) => {\n            const { middlewareInputToken, amount, tokenToBridge, toChainId } = MovrAnyswapInterface.parseTransaction({ data, value }).args[0]\n            return formatTx(tokens, currentNetwork.chainId, toChainId, middlewareInputToken, tokenToBridge, amount)\n        },\n        [MovrRouterInterface.getSighash('outboundTransferTo')]: (value, data, currentNetwork) => {\n            const { middlewareRequest, amount, bridgeRequest, toChainId } = MovrRouterInterface.parseTransaction({ data, value }).args[0]\n            const { inputToken } = middlewareRequest\n            const { inputToken: outputToken } = bridgeRequest\n            return formatTx(tokens, currentNetwork.chainId, toChainId, inputToken, outputToken, amount)\n        }\n    }\n}\n\nexport default movrTxParser","import './History.scss'\n\nimport { useState, useEffect, useMemo, useRef } from 'react'\nimport { MdOutlineArrowForward, MdOutlineCheck, MdOutlineClose } from 'react-icons/md'\nimport { HiOutlineExternalLink } from 'react-icons/hi'\nimport { Loading } from 'components/common'\nimport useMovr from 'components/Wallet/CrossChain/useMovr'\nimport networks from 'consts/networks'\nimport { useToasts } from 'hooks/toasts'\nimport { useRelayerData } from 'hooks'\nimport movrTxParser from './movrTxParser'\nimport useConstants from 'hooks/useConstants'\n\nconst History = ({ relayerURL, network, account, quotesConfirmed }) => {\n    const { constants: { humanizerInfo } } = useConstants()\n    const { addToast } = useToasts()\n    const { checkTxStatus } = useMovr()\n\n    const [txStatuses, setTxStatuses] = useState([])\n    const [loading, setLoading] = useState(false)\n    const [cacheBreak, setCacheBreak] = useState(() => Date.now())\n    const currentNetwork = useRef(network.id)\n\n    const getNetworkDetails = chainId => networks.find(n => n.chainId === chainId)\n    const formatAmount = (amount, asset) => amount / Math.pow(10, asset.decimals)\n\n    // @TODO refresh this after we submit a bundle; perhaps with the upcoming transactions service\n    // We want this pretty much on every rerender with a 5 sec debounce\n    useEffect(() => {\n        if ((Date.now() - cacheBreak) > 5000) setCacheBreak(Date.now())\n        const intvl = setTimeout(() => setCacheBreak(Date.now()), 10000)\n        return () => clearTimeout(intvl)\n    }, [cacheBreak])\n\n    const url = relayerURL\n        ? `${relayerURL}/identity/${account}/${network.id}/transactions?cacheBreak=${cacheBreak}`\n        : null\n\n    const { data: relayerTransactions, errMsg, isLoading: isRelayerLoading } = useRelayerData({ url })\n    \n    // Return relayer txs that contains outboundTransferTo calls to Movr contracts and parse them\n    const txTransfers = useMemo(() => {\n        if (network.id !== currentNetwork.current) return []\n\n        const transactions = relayerTransactions && relayerTransactions.txns ? relayerTransactions.txns : []\n        return transactions.map(({ txId, txns }) => {\n            const outboundTransferTo = txns.map(([, value, data]) => {\n                const sigHash = data.slice(0, 10)\n                const parseOutboundTransferTo = movrTxParser(humanizerInfo)[sigHash]\n                if (parseOutboundTransferTo) return {\n                    txData: data,\n                    ...parseOutboundTransferTo(value, data, network)\n                }\n                return null\n            }).filter(call => call)\n\n            return outboundTransferTo.length ? {\n                hash: txId,\n                ...outboundTransferTo[0]\n            } : null\n        }).filter(tx => tx)\n    }, [relayerTransactions, network, humanizerInfo])\n\n    useEffect(() => {\n        async function getStatuses() {\n            const statuses = await Promise.all(txTransfers.map(async ({ hash, txData, from, to }) => {\n                const storedQuote = quotesConfirmed.find(q => q.txData === txData)\n                const serviceTimeMinutes = storedQuote ? storedQuote.serviceTimeMinutes || null : null\n                const fromNetwork = getNetworkDetails(from.chainId)\n                const toNetwork = getNetworkDetails(to.chainId)\n\n                try {\n                    const status = await checkTxStatus(hash, from.chainId, to.chainId)\n                    return {\n                        ...status,\n                        from,\n                        to: storedQuote ? storedQuote.to || null : to,\n                        serviceTimeMinutes,\n                        fromNetwork,\n                        toNetwork,\n                        isPending: !(status.sourceTxStatus === 'COMPLETED' && status.destinationTxStatus === 'COMPLETED')\n                    }\n                } catch(e) {\n                    console.error(e)\n                    addToast('Cross-Chain History: Unable to fetch transfer status.', { error: true })\n                    return {\n                        sourceTx: hash,\n                        from,\n                        to,\n                        serviceTimeMinutes,\n                        fromNetwork,\n                        toNetwork,\n                        statusError: true\n                    }\n                }\n            }))\n\n            if (network.id !== currentNetwork.current) return\n            setTxStatuses(statuses)\n        }\n\n        getStatuses()\n    }, [txTransfers, quotesConfirmed, network, checkTxStatus, addToast])\n\n    useEffect(() => {\n        if (!errMsg) return\n        console.error(errMsg)\n        addToast(`Cross-Chain History: ${errMsg}`, { error: true })\n    }, [errMsg, addToast])\n\n    useEffect(() => {\n        setLoading(isRelayerLoading && !txStatuses.length)\n    }, [isRelayerLoading, txStatuses])\n\n    useEffect(() => {\n        currentNetwork.current = network.id\n        setTxStatuses([])\n        setCacheBreak(Date.now())\n    }, [network])\n\n    return (\n        <div id=\"history\" className=\"panel\">\n            <div className=\"title\">\n               History\n            </div>\n            <div>\n                {\n                    loading ?\n                        <Loading/>\n                        :\n                        !txStatuses.length ?\n                            <div>No pending transfer/swap on this network.</div>\n                            :\n                            txStatuses.map(({ sourceTx, fromNetwork, toNetwork, from, to, serviceTimeMinutes, isPending, statusError }) => (\n                                <div className=\"tx-status\" key={sourceTx}>\n                                    <div className=\"summary\">\n                                        <div className=\"path\">\n                                            <div className=\"network\">\n                                                <div className=\"icon\" style={{backgroundImage: `url(${fromNetwork.icon})`}}></div>\n                                                <div className=\"name\">{ fromNetwork.name }</div>\n                                            </div>\n                                            <div className=\"amount\">\n                                                { from.amount ? formatAmount(from.amount, from.asset) : '' }\n                                                <div className=\"asset\">\n                                                    <div className=\"icon\" style={{backgroundImage: `url(${from?.asset?.icon})`}}></div>\n                                                    <div className=\"name\">{ from?.asset?.symbol }</div>\n                                                </div>\n                                            </div>\n                                        </div>\n                                        <MdOutlineArrowForward/>\n                                        <div className=\"path\">\n                                            <div className=\"network\">\n                                                <div className=\"icon\" style={{backgroundImage: `url(${toNetwork.icon})`}}></div>\n                                                <div className=\"name\">{ toNetwork.name }</div>\n                                            </div>\n\n                                            <div className=\"amount\">\n                                                { to.amount ? formatAmount(to.amount, to.asset) : '' }\n                                                <div className=\"asset\">\n                                                    <div className=\"icon\" style={{backgroundImage: `url(${to?.asset?.icon})`}}></div>\n                                                    <div className=\"name\">{ to?.asset?.symbol }</div>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                    <div className=\"details\">\n                                        <a href={`${fromNetwork.explorerUrl}/tx/${sourceTx}`} target=\"_blank\" rel=\"noreferrer\">View on Block Explorer <HiOutlineExternalLink/></a>\n                                        {\n                                            statusError ? \n                                                <div className=\"status error\">\n                                                    <MdOutlineClose/>\n                                                    Could not fetch status\n                                                </div>\n                                                :\n                                                isPending ? \n                                                    <div className=\"status pending\">\n                                                        <Loading/>\n                                                        Pending\n                                                        <span>(Usually takes { serviceTimeMinutes || 20 } minutes)</span>\n                                                    </div>\n                                                    :\n                                                    <div className=\"status confirmed\">\n                                                        <MdOutlineCheck/>\n                                                        Confirmed\n                                                    </div>\n                                        }\n                                    </div>\n                                </div>\n                            ))\n                }\n            </div>\n        </div>\n    )\n}\n\nexport default History\n","import './CrossChain.scss'\n\nimport { BsArrowDown } from 'react-icons/bs'\n\nimport { useEffect, useState, useCallback, useMemo, useRef } from 'react'\nimport { ethers } from 'ethers'\nimport { parseUnits } from 'ethers/lib/utils'\nimport { NumberInput, Button, Select, Loading, NoFundsPlaceholder } from 'components/common'\nimport useMovr from './useMovr'\nimport networks from 'consts/networks'\nimport { useToasts } from 'hooks/toasts'\nimport { useLocalStorage } from 'hooks'\nimport Quotes from './Quotes/Quotes'\nimport History from './History/History'\n\nconst CrossChain = ({ addRequest, selectedAccount, portfolio, network, relayerURL }) => {\n    const { addToast } = useToasts()\n    const { fetchChains, fetchFromTokens, fetchQuotes, fetchToTokens } = useMovr()\n\n    const [disabled, setDisabled] = useState(false)\n    const [loading, setLoading] = useState(true)\n    const [loadingFromTokens, setLoadingFromTokens] = useState(false)\n    const [loadingToTokens, setLoadingToTokens] = useState(false)\n    const [loadingQuotes, setLoadingQuotes] = useState(false)\n\n    const [fromTokensItems, setFromTokenItems] = useState([])\n    const [fromToken, setFromToken] = useState(null)\n    const [amount, setAmount] = useState(0)\n    const [chainsItems, setChainsItems] = useState([])\n    const [toChain, setToChain] = useState(null)\n    const [toTokenItems, setToTokenItems] = useState([])\n    const [toToken, setToToken] = useState(null)\n    const [quotes, setQuotes] = useState(null)\n    const portfolioTokens = useRef([])\n    const [quotesConfirmed, setQuotesConfirmed] = useLocalStorage({ key: 'quotesConfirmed', defaultValue: [] })\n\n    const fromChain = useMemo(() => network.chainId, [network.chainId])\n    const formDisabled = !(fromToken && toToken && fromChain && toChain && amount > 0)\n    const hasNoFunds = !portfolio.balance.total.full\n    const getTokenFromPortofolio = useCallback(tokenAddress => portfolio.tokens\n        .map(token => ({\n            ...token,\n            address: Number(token.address) === 0 ? `0x${'e'.repeat(40)}` : token.address\n        }))\n        .find(({ address }) => address === tokenAddress), [portfolio.tokens])\n\n    const loadChains = useCallback(async () => {\n        try {\n            const chains = await fetchChains()\n            const isSupported = chains.find(({ chainId }) => chainId === fromChain)\n            setDisabled(!isSupported)\n            if (!isSupported) return\n\n            const chainsItems = chains\n                .filter(({ chainId }) => chainId !== fromChain && networks.map(({ chainId }) => chainId).includes(chainId))\n                .map(({ icon, chainId, name }) => ({\n                    icon,\n                    label: name,\n                    value: chainId\n                }))\n            setChainsItems(chainsItems)\n            setToChain(chainsItems[0].value)\n            return true\n        } catch(e) {\n            console.error(e);\n            addToast(`Error while loading chains: ${e.message || e}`, { error: true })\n            return false\n        }\n    }, [fromChain, fetchChains, addToast])\n\n    const loadFromTokens = useCallback(async () => {\n        if (!fromChain || !toChain) return\n\n        try {\n            const fromTokens = await fetchFromTokens(fromChain, toChain)\n            const filteredFromTokens = fromTokens.filter(({ name }) => name)\n            const uniqueFromTokenAddresses = [\n                ...new Set(fromTokens\n                    .filter(({ address }) => portfolioTokens.current\n                        .map(({ address }) => address)\n                        .map(address => Number(address) === 0 ? `0x${'e'.repeat(40)}` : address).includes(address))\n                    .map(({ address }) => address)\n                )\n            ]\n\n            const fromTokensItems = uniqueFromTokenAddresses\n                .map(address => filteredFromTokens.find(token => token.address === address))\n                .filter(token => token)\n                .map(({ icon, name, symbol, address }) => ({\n                    icon,\n                    label: `${name} (${symbol})`,\n                    value: address,\n                    symbol\n                }))\n            setFromTokenItems(fromTokensItems)\n            return true\n        } catch(e) {\n            console.error(e);\n            addToast(`Error while loading from tokens: ${e.message || e}`, { error: true })\n            return false\n        }\n    }, [fromChain, toChain, fetchFromTokens, addToast])\n\n    const loadToTokens = useCallback(async () => {\n        if (!fromChain || !toChain) return\n\n        try {\n            const toTokens = await fetchToTokens(fromChain, toChain)\n            const filteredToTokens = toTokens.filter(({ name }) => name)\n            const uniqueTokenAddresses = [...new Set(toTokens.map(({ address }) => address))]\n            const tokenItems = uniqueTokenAddresses\n                .map(address => filteredToTokens.find(token => token.address === address))\n                .filter(token => token)\n                .map(({ icon, name, symbol, address }) => ({\n                    icon,\n                    label: `${name} (${symbol})`,\n                    value: address,\n                    symbol\n                }))\n                .sort((a, b) => a.label.localeCompare(b.label))\n            setToTokenItems(tokenItems)\n            return true\n        } catch(e) {\n            console.error(e);\n            addToast(`Error while loading to tokens: ${e.message || e}`, { error: true })\n            return false\n        }\n    }, [fromChain, toChain, fetchToTokens, addToast])\n\n    const maxAmount = useMemo(() => {\n        try {\n            const portfolioToken = getTokenFromPortofolio(fromToken)\n            if (!portfolioToken) return 0\n            const { balanceRaw, decimals } = portfolioToken\n            return ethers.utils.formatUnits(balanceRaw, decimals)\n        } catch(e) {\n            console.error(e);\n            addToast(`Error while formating amount: ${e.message || e}`, { error: true })\n        }\n    }, [getTokenFromPortofolio, fromToken, addToast])\n\n    const getQuotes = async () => {\n        setLoadingQuotes(true)\n\n        try {\n            const portfolioToken = getTokenFromPortofolio(fromToken)\n            if (!portfolioToken) return\n            const { decimals } = portfolioToken\n            const flatAmount = parseUnits(amount, decimals).toString()\n            const quotes = await fetchQuotes(fromToken, fromChain, toToken, toChain, flatAmount, ['hyphen', 'celer']) //'anyswap-router-v4'\n            setQuotes(quotes)\n        } catch(e) {\n            console.error(e);\n            addToast(`Error while loading quotes: ${e.message || e}`, { error: true })\n        }\n\n        setLoadingQuotes(false)\n    }\n\n    const onQuotesConfirmed = quoteRequest => {\n        const updatedQuotesConfirmed = [...quotesConfirmed, quoteRequest]\n        setQuotesConfirmed(updatedQuotesConfirmed)\n    }\n\n    useEffect(() => setAmount(0), [fromToken])\n    useEffect(() => {\n        const fromTokenItem = fromTokensItems.find(({ value }) => value === fromToken)\n        if (!fromTokenItem) return\n        const equivalentToken = toTokenItems.find(({ symbol }) => symbol === fromTokenItem.symbol)\n        if (equivalentToken) setToToken(equivalentToken.value)\n    }, [fromTokensItems, toTokenItems, fromToken])\n\n    const asyncLoad = async (setStateLoading, loadCallback) => {\n        setStateLoading(true)\n        const loaded = await loadCallback()\n        setStateLoading(!loaded)\n    }\n\n    useEffect(() => {\n        if (!toChain) return\n        asyncLoad(setLoadingToTokens, loadToTokens)\n    }, [toChain, loadToTokens])\n\n    useEffect(() => {\n        if (!toChain) return\n        asyncLoad(setLoadingFromTokens, loadFromTokens)\n    }, [toChain, loadFromTokens])\n\n    useEffect(() => {\n        if (!fromChain || portfolio.isCurrNetworkBalanceLoading) return\n        setQuotes(null)\n        asyncLoad(setLoading, loadChains)\n    }, [fromChain, portfolio.isCurrNetworkBalanceLoading, loadChains])\n\n    useEffect(() => portfolioTokens.current = portfolio.tokens, [portfolio.tokens])\n\n    const amountLabel = <div className=\"amount-label\">Available Amount: <span>{ maxAmount }</span></div>\n\n    return (\n        <div id=\"cross-chain\">\n            <div className='panel'>\n                <div className=\"title\">\n                    Cross-chain transfers/swaps\n                    <div id=\"powered\">\n                        Powered by Socket\n                    </div>\n                </div>\n                {\n                    disabled ?\n                        <div className=\"placeholder\">Not supported on this Network</div>\n                        :\n                        loading || portfolio.isCurrNetworkBalanceLoading ?\n                            <Loading/>\n                            :\n                            hasNoFunds ?\n                                <NoFundsPlaceholder/>\n                                :\n                                !loadingFromTokens && !loadingToTokens && !fromTokensItems.length ?\n                                    <div className=\"placeholder\">You don't have any available tokens to swap</div>\n                                    :\n                                    loadingQuotes ?\n                                            <Loading/>\n                                            :\n                                            quotes ?\n                                                <Quotes\n                                                    addRequest={addRequest}\n                                                    selectedAccount={selectedAccount}\n                                                    fromTokensItems={fromTokensItems}\n                                                    quotes={quotes}\n                                                    onQuotesConfirmed={onQuotesConfirmed}\n                                                    onCancel={() => setQuotes(null)}\n                                                />\n                                                :\n                                                <div className=\"form\">\n                                                    <label>From</label>\n                                                    <div className=\"inputs\">\n                                                        { loadingFromTokens ? <Loading/> : null }\n                                                        <Select searchable defaultValue={fromToken} items={fromTokensItems} onChange={({ value }) => setFromToken(value)}/>\n                                                        <NumberInput min=\"0\" label={amountLabel} value={amount} onInput={value => setAmount(value)} button=\"MAX\" onButtonClick={() => setAmount(maxAmount)}/>\n                                                    </div>\n                                                    <div className=\"separator\">\n                                                        <BsArrowDown/>\n                                                    </div>\n                                                    <label>To</label>\n                                                    <div className=\"inputs\">\n                                                        { loadingToTokens ? <Loading/> : null }\n                                                        <Select searchable defaultValue={toChain} items={chainsItems} onChange={({ value }) => setToChain(value)}/>\n                                                        <Select searchable defaultValue={toToken} items={toTokenItems} onChange={({ value }) => setToToken(value)}/>\n                                                    </div>\n                                                    <Button disabled={formDisabled} onClick={getQuotes}>Get Quotes</Button>\n                                                </div>\n                }\n            </div>\n            <History\n                network={network}\n                account={selectedAccount}\n                quotesConfirmed={quotesConfirmed}\n                relayerURL={relayerURL}\n            />\n        </div>\n    )\n}\n\nexport default CrossChain\n","const customIcons = {\n    '0xb468a1e5596cfbcdf561f21a10490d99b4bb7b68': 'https://upload.wikimedia.org/wikipedia/commons/thumb/5/5a/Jeff_Sessions_with_Elmo_and_Rosita_%28cropped%29.jpg/220px-Jeff_Sessions_with_Elmo_and_Rosita_%28cropped%29.jpg', // TEST Polygon ELMO token,\n    '0x88800092ff476844f74dc2fc427974bbee2794ae': 'https://raw.githubusercontent.com/AmbireTech/ambire-brand/main/logos/ambire_logo_white_bg_250x250.png', // Ambire Wallet Token\n    '0x47cd7e91c3cbaaf266369fe8518345fc4fc12935': 'https://raw.githubusercontent.com/AmbireTech/ambire-brand/main/logos/xwallet_250x250.png', //xWallet\n    '0xb6456b57f03352be48bf101b46c1752a0813491a': 'https://raw.githubusercontent.com/AmbireTech/adex-brand/master/logos/vaporwave-adex-2.png', // ADX-STAKING\n    '0xd9a4cb9dc9296e111c66dfacab8be034ee2e1c2c': 'https://raw.githubusercontent.com/AmbireTech/adex-brand/master/logos/ADX-loyalty%40256x256.png', // ADX-LOYALTY\n    '0xec3b10ce9cabab5dbf49f946a623e294963fbb4e': 'https://raw.githubusercontent.com/AmbireTech/ambire-brand/main/logos/xwallet_250x250.png', // Polygons test xWallet\n    '0xe9415e904143e42007865e6864f7f632bd054a08': 'https://raw.githubusercontent.com/AmbireTech/ambire-brand/main/logos/Ambire_logo_250x250.png', // Polygons test Wallet\n    '0xade00c28244d5ce17d72e40330b1c318cd12b7c3': 'https://raw.githubusercontent.com/AmbireTech/ambire-brand/main/official-logos/Ambire-AdEx/Ambire_AdEx_Symbol_color_white_bg.png' //ADX-TOKEN\n}\n\nconst zapperStorageTokenIcons = 'https://storage.googleapis.com/zapper-fi-assets/tokens'\n\nexport function getTokenIcon(networkId = '', address = '') {\n    const addr = address.toLowerCase()\n    const net = networkId.toLowerCase()\n    return customIcons[addr] || `${zapperStorageTokenIcons}/${net}/${addr}.png`\n}\n"],"sourceRoot":""}