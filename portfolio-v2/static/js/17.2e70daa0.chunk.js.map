{"version":3,"sources":["components/Wallet/Gas/GasDetails/GasDetails.js","components/Modals/GasTankBalanceByTokensModal/GasTankBalanceByTokensModal.js","components/Wallet/Gas/GasTank/GasTank.js","components/Wallet/Gas/Gas.js","lib/icons.js","lib/formatters.js","../node_modules/ambire-common/src/constants/gasSpeeds.ts","../node_modules/ambire-common/src/helpers/sendTxnHelpers/sendTxnHelpers.ts","../node_modules/ambire-common/src/services/isFeeCollectorTxn/isFeeCollectorTxn.ts","../node_modules/ambire-common/src/hooks/useGasTankData/index.ts","../node_modules/ambire-common/src/hooks/useGasTankData/useGasTankData.ts"],"names":["GasDetails","gasData","GAS_PRICES","GAS_SPEEDS","reduce","acc","speed","gasPrice","maxPriorityFeePerGas","id","className","Date","updated","toDateString","toTimeString","substr","map","index","Math","round","ACTION_GAS_COSTS","a","name","rowIndex","gas","AMBIRE_OVERHEAD_COST","gasFeeAssets","native","toFixed","GasTankBalanceByTokensModal","data","hideModal","useModals","buttons","clear","icon","onClick","title","sort","b","balance","item","key","width","height","alt","src","getTokenIcon","network","address","symbol","toUpperCase","formatFloatTokenAmount","balanceInUSD","GasTank","relayerURL","portfolio","account","userSorting","setUserSorting","gasTankState","setGasTankState","useGasTankData","selectedAcc","useRelayerData","isLoading","balancesRes","gasTankBalances","totalSavedResult","gasTankFilledTxns","feeAssetsRes","availableFeeAssets","showModal","addToast","useToasts","gasTankBalancesFormatted","totalSaved","length","i","saved","totalCashBack","cashback","isBalanceLoading","sortType","tokens","isMobileScreen","useCheckMobileScreen","useState","failedImg","setFailedImg","sortedTokens","filter","disableGasTankDeposit","balanceUSD","items","chainId","indexOf","toLowerCase","decreasing","localeCompare","useDragAndDrop","list","prev","dragStart","dragEnter","target","handle","dragTarget","drop","currentAccGasTankState","find","isEnabled","style","cursor","checked","onChange","updatedGasTankDetails","error","toggleGasTank","label","color","tokenImageUrl","decimals","img","send","category","sortedTokensLength","logo","includes","disabled","draggable","onDragStart","e","current","contains","preventDefault","onMouseDown","onDragEnter","onDragEnd","onDragOver","size","onError","failed","to","pathname","state","gasTankMsg","isTopUp","small","tokenItem","date","tokenDetails","submittedAt","toLocaleDateString","toLocaleTimeString","toString","formatUnits","value","href","explorerUrl","txId","rel","stopPropagation","r","Gas","selectedNetwork","selectedAccount","now","cacheBreak","setCacheBreak","useEffect","intvl","setTimeout","clearTimeout","url","errMsg","isGasTankAvailable","customIcons","zapperStorageTokenIcons","networkId","addr","net","amount","useGrouping","maximumFractionDigits","isNaN","parseFloat","minimumFractionDigits","min","toLocaleString","undefined","max","err","console","getAddedGas","token","ERC20AbiInterface","Interface","ERC20ABI","TRANSFER_SIGHASH","getSighash","getFunction","format","feeCollector","accountPresets","isFeeCollectorTxn","txn","startsWith","res","decodeFunctionData","BigNumber","from","_value","getTxnTransferInfo","_to","useCacheBreak","urlGetBalance","urlGetFeeAssets","urlGetTransactions","executedTxnsRes","useMemo","gasTankTxns","txns","gasTankFee","feeAssetsPerNetwork","executedTxns","transactions","depositTxns","forEach","identity","rest","filteredTxns","txnCall","fillTxn","push","getGasTankFilledTxns","isFound","x","price","feeTokenDetails","feeToken","savedGas","feeInUSDPerGas"],"mappings":"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","file":"static/js/17.2e70daa0.chunk.js","sourcesContent":["import './GasDetails.scss'\n\nimport { GAS_SPEEDS } from 'ambire-common/src/constants/gasSpeeds'\nimport { ACTION_GAS_COSTS, AMBIRE_OVERHEAD_COST } from 'ambire-common/src/constants/actionGasCosts'\n\nconst GasDetails = ({ gasData }) => {\n  const GAS_PRICES = GAS_SPEEDS.reduce((acc, speed) => {\n    acc[speed] =\n        gasData.gasPrice.maxPriorityFeePerGas\n          ? (gasData.gasPrice.maxPriorityFeePerGas[speed] + gasData.gasPrice[speed])\n          : gasData.gasPrice[speed]\n    return acc\n  }, {})\n\n  return (\n    <div id='gas-details-modal'>\n      <div className='gas-details-date'>\n        Last updated: { new Date(gasData.gasPrice.updated).toDateString() + ' ' + new Date(gasData.gasPrice.updated).toTimeString().substr(0, 8) }\n      </div>\n      <div className='gas-speed-row'>\n        {\n          GAS_SPEEDS.map((speed, index) => {\n            return (\n              <div className='gas-speed-block' key={index}>\n                <div className='gas-speed-name'>{speed}</div>\n                <div className='gas-speed-price'>\n                  {Math.round(GAS_PRICES[speed] / 10 ** 9)} Gwei\n                </div>\n              </div>\n            )\n          })\n        }\n      </div>\n      <h4>Estimated Cost of Transaction Actions</h4>\n     <div className='table-wrapper'>\n      <table className='gas-action-costs'>\n          <thead>\n          <tr>\n            <th>Action</th>\n            {GAS_SPEEDS.map((speed, index) => <th key={index}>{speed}</th>)}\n          </tr>\n          </thead>\n          <tbody>\n          {\n            ACTION_GAS_COSTS.map((a, index) => <tr key={index}>\n              <td>{a.name}</td>\n              {GAS_SPEEDS.map((speed, rowIndex) => <td key={rowIndex}>${(GAS_PRICES[speed] * (a.gas + AMBIRE_OVERHEAD_COST) / 10 ** 18 * gasData.gasFeeAssets.native).toFixed(2)}</td>)}\n            </tr>)\n          }\n          </tbody>\n        </table>\n      </div>\n    </div>\n  )\n}\n\nexport default GasDetails\n","import './GasTankBalanceByTokensModal.scss'\n\nimport { Button, Modal } from 'components/common'\nimport { MdOutlineClose } from 'react-icons/md'\nimport { useModals } from 'hooks'\nimport { getTokenIcon } from 'lib/icons'\nimport { formatFloatTokenAmount } from 'lib/formatters'\n\nconst GasTankBalanceByTokensModal = ({ data }) => {\n    const { hideModal } = useModals()\n    const buttons = <>\n        <Button clear icon={<MdOutlineClose/>} onClick={() => hideModal()}>Close</Button>\n    </>\n    \n    return (\n        <Modal id=\"gas-tank-balance-by-tokens-modal\" title=\"GAS TANK BALANCE BY TOKENS\" buttons={buttons}>\n           <div className='content'>\n                <div className='row'>\n                    <div className='logo'> </div>\n                    <div className='item'>\n                        <span>Token</span>\n                    </div>\n                    <div className='balance'>\n                        <span>Amount</span>\n                    </div>\n                    <div className='balance'>\n                        <span>Balance</span>\n                    </div>\n                </div>\n                {\n                    data && data.sort((a, b) => b.balance - a.balance).map((item, key) => {\n                        return (\n                            <div className='row' key={key}>\n                                <div className='logo'>\n                                    <img width=\"25px\" height='25px' alt='logo' src={item.icon || getTokenIcon(item.network, item.address)} /> \n                                </div>\n                                <div className='item'>\n                                    <span>{ item.symbol.toUpperCase() }</span>\n                                </div>\n                                <div className='balance'>\n                                    <span>{ formatFloatTokenAmount(item.balance, true, 6) }</span>\n                                </div>\n                                <div className='balance'>\n                                    <span>$ {formatFloatTokenAmount(item.balanceInUSD, true, 6) }</span>\n                                </div>\n                            </div>\n                        )\n                    })\n                }\n           </div>\n        </Modal>\n    )\n}\n\nexport default GasTankBalanceByTokensModal","import useGasTankData from 'ambire-common/src/hooks/useGasTankData'\n\nimport './GasTank.scss'\nimport { Toggle } from 'components/common'\nimport { useState } from 'react'\nimport { GiToken, GiGasPump } from 'react-icons/gi'\nimport { NavLink } from 'react-router-dom'\nimport { Button, Loading } from 'components/common'\nimport { MdDragIndicator, MdOutlineSort } from 'react-icons/md'\nimport { useDragAndDrop, useCheckMobileScreen } from 'hooks'\nimport { getTokenIcon } from 'lib/icons'\nimport { formatFloatTokenAmount } from 'lib/formatters'\nimport { ToolTip } from 'components/common'\nimport { useRelayerData } from 'hooks'\nimport { useModals } from 'hooks'\nimport GasTankBalanceByTokensModal from 'components/Modals/GasTankBalanceByTokensModal/GasTankBalanceByTokensModal'\nimport { HiOutlineExternalLink } from 'react-icons/hi'\nimport { formatUnits } from 'ethers/lib/utils'\n// eslint-disable-next-line import/no-relative-parent-imports\nimport { useToasts } from '../../../../hooks/toasts'\n\nconst GasTank = ({ \n    network, \n    relayerURL, \n    portfolio, \n    account, \n    userSorting, \n    setUserSorting,\n    gasTankState, \n    setGasTankState \n}) => {\n    const {\n        isLoading,\n        balancesRes,\n        gasTankBalances,\n        totalSavedResult,\n        gasTankFilledTxns,\n        feeAssetsRes,\n        availableFeeAssets\n      } = useGasTankData({\n        relayerURL,\n        selectedAcc: account,\n        network,\n        portfolio,\n        useRelayerData\n      })\n\n    const { showModal } = useModals()\n    const { addToast } = useToasts()\n\n    const gasTankBalancesFormatted = gasTankBalances ? formatFloatTokenAmount(gasTankBalances, true, 2) : '0.00'\n    const totalSaved = totalSavedResult && totalSavedResult.length && \n        formatFloatTokenAmount(totalSavedResult.map(i => i.saved).reduce((a, b) => a + b), true, 2)\n    const totalCashBack = totalSavedResult && totalSavedResult.length && \n        formatFloatTokenAmount(totalSavedResult.map(i => i.cashback).reduce((a, b) => a + b), true, 2)\n        \n    const { isBalanceLoading } = portfolio\n    const sortType = userSorting.tokens?.sortType || 'decreasing'\n    const isMobileScreen = useCheckMobileScreen()\n    const [failedImg, setFailedImg] = useState([])\n    const toLocaleDateTime = date => `${date.toLocaleDateString()} ${date.toLocaleTimeString()}`\n    const sortedTokens = availableFeeAssets?.filter(item => !item.disableGasTankDeposit).sort((a, b) => b.balanceUSD - a.balanceUSD).sort((a, b) => {\n        if (sortType === 'custom' && userSorting.tokens?.items?.[`${account}-${network.chainId}`]?.length) {\n            const addressA = userSorting.tokens.items[`${account}-${network.chainId}`].indexOf(a.address.toLowerCase())\n            const addressB = userSorting.tokens.items[`${account}-${network.chainId}`].indexOf(b.address.toLowerCase())\n            const sorted = addressA - addressB\n            return sorted\n        } else {\n            const decreasing = b.balanceUSD - a.balanceUSD\n            if (decreasing === 0) return a.symbol.toUpperCase().localeCompare(b.symbol.toUpperCase())\n            return decreasing\n        }\n    })\n\n    const onDropEnd = (list) => {        \n        setUserSorting(\n            prev => ({\n                ...prev,\n                tokens: {\n                    sortType: 'custom',\n                    items: {\n                        ...prev.tokens?.items,\n                        [`${account}-${network.chainId}`]: list\n                    }\n                }\n            })\n        )\n    }\n\n    const { dragStart, dragEnter, target, handle, dragTarget,drop } = useDragAndDrop('address', onDropEnd)\n    const currentAccGasTankState = gasTankState.length ? \n    gasTankState.find(i => i.account === account) :\n        setGasTankState([\n            ...gasTankState,\n            { account: account, isEnabled: false }\n        ])\n    const toggleGasTank = () => {\n        if (!gasTankBalances && !gasTankBalances.length) {\n            addToast('Add assets from the list to the Gas Tank to enable it.', { error: true })\n            return \n        }\n\n        const updatedGasTankDetails = \n            gasTankState.map(item => (item.account === account) ? \n            { ...item, isEnabled: !item.isEnabled } : item)\n        setGasTankState(updatedGasTankDetails)\n    }\n\n    const openGasTankBalanceByTokensModal = () => {\n        showModal(<GasTankBalanceByTokensModal data={ (balancesRes && balancesRes.length) ? balancesRes : [] }/>)\n    }\n\n    const tokenItem = (index, img, symbol, balance, balanceUSD, address, send = false, network, decimals, category, sortedTokensLength) => \n        {\n            const logo = failedImg.includes(img) ? getTokenIcon(network, address) : img\n                \n            return (<div className=\"token\" key={`token-${address}-${index}`}\n                disabled={balance === 0}\n                draggable={category === 'tokens' && sortedTokensLength > 1 && sortType === 'custom' && !isMobileScreen}\n                onDragStart={(e) => {\n                    if (handle.current === target.current || handle.current.contains(target.current)) dragStart(e, index)\n                    else e.preventDefault();\n                }}\n                onMouseDown={(e) => dragTarget(e, index)}\n                onDragEnter={(e) => dragEnter(e, index)}\n                onDragEnd={() => drop(sortedTokens)}\n                onDragOver={(e) => e.preventDefault()}\n                >\n                {sortedTokensLength > 1 && sortType === 'custom' && !isMobileScreen && <MdDragIndicator size={20} className='drag-handle' onClick={(e) => dragStart(e, index)} id={`${index}-handle`} />}\n                <div className=\"icon\">\n                    { \n                        failedImg.includes(logo) ?\n                            <GiToken size={20}/>\n                            :\n                            <img src={logo} draggable=\"false\" alt=\"Token Icon\" onError={() => setFailedImg(failed => [...failed, logo])}/>\n                    }\n                </div>\n                <div className=\"name\">\n                    { symbol.toUpperCase() }\n                </div>\n                <div className=\"separator\"></div>\n                <div className=\"balance\">\n                    <div className=\"currency\">\n                        <span className=\"value\" >{ formatFloatTokenAmount(balance, true, 4) }</span>\n                    </div>\n                    <div className=\"dollar\">\n                        <span className=\"symbol\">$</span> { balanceUSD.toFixed(2) }\n                    </div>\n                </div>\n                {\n                    send ? \n                        <div className=\"actions\">\n                            <NavLink to={{\n                                pathname: `/wallet/transfer/${address}`,\n                                state: {\n                                    gasTankMsg: 'Warning: You are about to top up your Gas Tank. Top ups to the Gas Tank are non-refundable.',\n                                    isTopUp: true\n                                }\n                            }}>\n                                <Button small>Top up</Button>\n                            </NavLink>\n                        </div>\n                        :\n                        null\n                }\n            </div>)\n        }\n\n    return (\n        <div id=\"gas-tank\">\n            <div className='heading-wrapper'>\n                <div className=\"balance-wrapper\" style={{ cursor: 'pointer' }} onClick={openGasTankBalanceByTokensModal}>\n                    <span><GiGasPump/> Balance on All Networks</span>\n                    { (!isLoading && gasTankBalances) ?\n                        (<div className={ (gasTankBalancesFormatted.length > 6)? 'inner-wrapper-left small-font' : 'inner-wrapper-left' } >\n                            <span>$ </span>{ gasTankBalancesFormatted }\n                        </div>) : \n                        <Loading /> }\n                    {/* TODO: Add functionality for drag and drop */}\n                    {/* <span>Drag and drop tokens here</span> */}\n                    <span>More details...</span>\n                </div>\n                <div className='switch-wrapper'>\n                    <Toggle checked={currentAccGasTankState.isEnabled} onChange={() => toggleGasTank()}/>\n                    {currentAccGasTankState.isEnabled ? <span>Enabled</span> : <span>Disabled</span>}\n                </div>\n\n                <div className=\"balance-wrapper total-save\">\n                    <div className='inner-wrapper-right'>\n                        <div className='label green'>Total Saved: </div> \n                        <div className='amount'><span>$</span> {totalSaved ? totalSaved : '0.00'}</div>\n                    </div>\n                    <div className='inner-wrapper-right'>\n                        <div className='label'>Total Cashback: </div> \n                        <div className='amount'><span>$</span> {totalCashBack ? totalCashBack : '0.00'}</div>\n                    </div>\n                    <span>From transaction fees on {network.id.toUpperCase()}</span>\n                </div>\n            </div>\n            <div>\n                <p className='benefit'>Save over 20% of fees by enabling the gas tank</p>\n                <p>This is your special account for pre-paying transaction fees.</p>\n                <p>By filling up your Gas Tank, you are setting aside, or prepaying for network fees.</p>\n                <p>Only the tokens listed below are eligible for filling up your Gas Tank. You can add more tokens to your Gas Tank at any time.</p>\n                <p>The tokens in your Gas Tank can pay network fees on all supported networks.</p>\n            </div>\n            <div className=\"sort-holder\">\n                <span className='title'>Available fee tokens on {network.id.toUpperCase()}</span>\n                {sortedTokens && !isMobileScreen &&  (\n                    <div className=\"sort-buttons\">\n                        <ToolTip label='Sorted tokens by drag and drop'>\n                            <MdDragIndicator color={sortType === \"custom\" ? \"#80ffdb\" : \"\"} cursor=\"pointer\" onClick={() => setUserSorting(prev => ({\n                                ...prev,\n                                tokens: {\n                                    ...prev.tokens,\n                                    sortType: 'custom'\n                                }\n                            }))} />\n                        </ToolTip>\n                        <ToolTip label='Sorted tokens by DESC balance'>\n                            <MdOutlineSort color={sortType === \"decreasing\" ? \"#80ffdb\" : \"\"} cursor=\"pointer\" onClick={() => setUserSorting(prev => ({\n                                ...prev,\n                                tokens: {\n                                    ...prev.tokens,\n                                    sortType: 'decreasing'\n                                }\n                            }))} />\n                        </ToolTip>\n                    </div>\n                )}\n            </div>\n            <div className=\"list\">\n                { !isBalanceLoading ?\n                        sortedTokens && sortedTokens?.map(({ address, symbol, tokenImageUrl, balance, balanceUSD, network, decimals, icon }, i) =>\n                            tokenItem(\n                                i, \n                                tokenImageUrl = tokenImageUrl || icon, \n                                symbol, \n                                balance, \n                                balanceUSD, \n                                address, \n                                true, \n                                network, \n                                decimals, \n                                'tokens', \n                                sortedTokens.length\n                            ))\n                        : <Loading />  }\n            </div>\n            <div>\n                <NavLink to={{\n                    pathname: `/wallet/transfer/`,\n                    state: {\n                        gasTankMsg: 'Warning: You are about to top up your Gas Tank. Top ups to the Gas Tank are non-refundable.',\n                        isTopUp: true\n                    }\n                }}>\n                    <Button className='deposit-button' small>top up gas tank</Button>\n                </NavLink>\n            </div>\n            <span className='title'>Gas Tank top ups history on {network.id.toUpperCase()}</span>\n            <p className='warning-msg'>Warning: It will take some time to top up the Gas Tank after the transaction is signed.</p>\n            <div className=\"txns-wrapper\">\n                {\n                    gasTankFilledTxns && gasTankFilledTxns.length ? gasTankFilledTxns.map((item, key) => {\n                        const tokenDetails = feeAssetsRes && feeAssetsRes.length ? \n                            feeAssetsRes.find(({address, network}) => address.toLowerCase() === item.address.toLowerCase() && network === item.network) : null\n                        if (!tokenDetails) return null // txn to gas Tank with not eligible token\n                        return (\n                            <div key={key} className=\"txns-item-wrapper\">\n                                <div className='logo'><GiGasPump size={20} /></div>\n                                <div className='date'>{ item.submittedAt && toLocaleDateTime(new Date(item.submittedAt)).toString() }</div>\n                                <div className='balance'>\n                                    { tokenDetails && \n                                        (<>\n                                            <img width=\"25px\" height='25px' alt='logo' src={tokenDetails.icon || getTokenIcon(item.network, item.address)} /> \n                                            <div>{ tokenDetails.symbol.toUpperCase() }</div>\n                                            { tokenDetails && formatUnits(item.value.toString(), tokenDetails.decimals).toString() }\n                                        </>)\n                                    }\n                                </div>\n                                <div className='logo'>\n                                    <a\n                                        href={network.explorerUrl + '/tx/'+ item.txId}\n                                        target='_blank'\n                                        rel='noreferrer'\n                                        onClick={e => e.stopPropagation()}\n                                    >\n                                        <HiOutlineExternalLink size={20} />\n                                    </a>\n                                </div>\n                            </div>)\n                    }).filter(r => r) : <p>No top ups were made to Gas Tank on {network.id.toUpperCase()}</p>\n                }\n            </div>\n        </div>\n    )\n}\n\nexport default GasTank\n","import './Gas.scss'\n\nimport GasDetails from './GasDetails/GasDetails'\nimport GasTank from './GasTank/GasTank'\nimport { useState, useEffect } from 'react'\nimport { useRelayerData } from 'hooks'\nimport { Loading } from 'components/common'\n\nconst Gas = ({ \n    selectedNetwork, \n    relayerURL, \n    portfolio, \n    selectedAccount, \n    userSorting, \n    setUserSorting, \n    gasTankState, \n    setGasTankState\n }) => {\n    const [cacheBreak, setCacheBreak] = useState(() => Date.now())\n\n    useEffect(() => {\n        if (Date.now() - cacheBreak > 5 * 1000) setCacheBreak(Date.now())\n        const intvl = setTimeout(() => setCacheBreak(Date.now()), 60 * 1000)\n        return () => clearTimeout(intvl)\n    }, [cacheBreak])\n\n    const url = relayerURL ? `${relayerURL}/gasPrice/${selectedNetwork.id}?cacheBreak=${cacheBreak}` : null\n    //TODO: To implement \"isLoading\" and \"errMsg\"\n    const { data, errMsg, isLoading } = useRelayerData({ url })\n    \n    const gasData = data ? data.data : null\n    \n    return (\n        <section id=\"gas\">\n            <div className=\"panel\">\n                <div className=\"heading\">\n                    <div className=\"title\">Current Network Fees</div>\n                </div>\n                <div className=\"description\">\n                    <p>Network fees are determined on a market principle - if more users are trying to use the network, fees are higher. Each network has different fees.</p>\n                    { gasData && !isLoading && <GasDetails gasData={gasData} />  }\n                    { isLoading && <Loading /> }\n                    { !gasData && errMsg && (\n                        <h3 className=\"error\">Gas Information: {errMsg}</h3>\n                    )}\n                </div>\n            </div>\n            \n                <div className=\"panel\">\n                    <div className=\"heading\">\n                        <div className=\"title\">Gas Tank</div>\n                    </div>\n                    <div className=\"description\">\n                    { selectedNetwork.isGasTankAvailable ?\n                        <GasTank\n                            network={selectedNetwork}\n                            relayerURL={relayerURL}\n                            portfolio={portfolio}\n                            account={selectedAccount}\n                            userSorting={userSorting}\n                            setUserSorting={setUserSorting}\n                            gasTankState={gasTankState}\n                            setGasTankState={setGasTankState}\n                        /> : \n                        <h3 className=\"error\">Gas Tank is not available on {selectedNetwork.id.toUpperCase()}</h3>\n                    }\n                    </div>\n                </div>\n            \n        </section>\n    )\n}\n\nexport default Gas\n","const customIcons = {\n    '0xb468a1e5596cfbcdf561f21a10490d99b4bb7b68': 'https://upload.wikimedia.org/wikipedia/commons/thumb/5/5a/Jeff_Sessions_with_Elmo_and_Rosita_%28cropped%29.jpg/220px-Jeff_Sessions_with_Elmo_and_Rosita_%28cropped%29.jpg', // TEST Polygon ELMO token,\n    '0x88800092ff476844f74dc2fc427974bbee2794ae': 'https://raw.githubusercontent.com/AmbireTech/ambire-brand/main/logos/ambire_logo_white_bg_250x250.png', // Ambire Wallet Token\n    '0x47cd7e91c3cbaaf266369fe8518345fc4fc12935': 'https://raw.githubusercontent.com/AmbireTech/ambire-brand/main/logos/xwallet_250x250.png', //xWallet\n    '0xb6456b57f03352be48bf101b46c1752a0813491a': 'https://raw.githubusercontent.com/AmbireTech/adex-brand/master/logos/vaporwave-adex-2.png', // ADX-STAKING\n    '0xd9a4cb9dc9296e111c66dfacab8be034ee2e1c2c': 'https://raw.githubusercontent.com/AmbireTech/adex-brand/master/logos/ADX-loyalty%40256x256.png', // ADX-LOYALTY\n    '0xec3b10ce9cabab5dbf49f946a623e294963fbb4e': 'https://raw.githubusercontent.com/AmbireTech/ambire-brand/main/logos/xwallet_250x250.png', // Polygons test xWallet\n    '0xe9415e904143e42007865e6864f7f632bd054a08': 'https://raw.githubusercontent.com/AmbireTech/ambire-brand/main/logos/Ambire_logo_250x250.png', // Polygons test Wallet\n    '0xade00c28244d5ce17d72e40330b1c318cd12b7c3': 'https://raw.githubusercontent.com/AmbireTech/ambire-brand/main/official-logos/Ambire-AdEx/Ambire_AdEx_Symbol_color_white_bg.png' //ADX-TOKEN\n}\n\nconst zapperStorageTokenIcons = 'https://storage.googleapis.com/zapper-fi-assets/tokens'\n\nexport function getTokenIcon(networkId = '', address = '') {\n    const addr = address.toLowerCase()\n    const net = networkId.toLowerCase()\n    return customIcons[addr] || `${zapperStorageTokenIcons}/${net}/${addr}.png`\n}\n","export function formatFloatTokenAmount(amount, useGrouping = true, maximumFractionDigits = 18) {\n    if (isNaN(amount) || isNaN(parseFloat(amount)) || !(typeof amount === 'number' || typeof amount === 'string')) return amount\n\n    try {\n        const minimumFractionDigits = Math.min(2, maximumFractionDigits || 0)\n        return ((typeof amount === 'number') ? amount : parseFloat(amount))\n            .toLocaleString(undefined,\n                {\n                    useGrouping,\n                    maximumFractionDigits: Math.max(minimumFractionDigits, maximumFractionDigits),\n                    minimumFractionDigits\n                })\n    } catch (err) {\n        console.error(err)\n        return amount\n    }\n}\n\n// Round a floating point number to a specific decimal places, i.e. 1.156 => 1.16\nexport function roundFloatingNumber(number, places = 2) {\n  const decimals = Math.pow(10, places)\n\n  return Math.round((number + Number.EPSILON) * decimals) / decimals\n}\n","export const GAS_SPEEDS: string[] = ['slow', 'medium', 'fast', 'ape']\n","// @ts-nocheck TODO: Fill in all missing types before enabling the TS check again\n// It costs around 19k to send a token, if that token was interacted with before in the same transaction,\n// because of SLOAD costs - they depend on whether a slot has been read\n// however, it costs 30k if the token has not been interacted with\n// we may decrease it a bit and lean on the relayer failsafe values (cfg.gasAddedOnEstimate) later on\nconst ADDED_GAS_TOKEN = 30000\nconst ADDED_GAS_NATIVE = 12000\n\nexport function getAddedGas(token) {\n  return !token?.address || token?.address === '0x0000000000000000000000000000000000000000'\n    ? ADDED_GAS_NATIVE\n    : ADDED_GAS_TOKEN\n}\n\n// can't think of a less funny name for that\nexport function getFeePaymentConsequences(token, estimation, isGasTankEnabled) {\n  // Relayerless mode\n  if (!estimation?.feeInUSD || !token) return { multiplier: 1, addedGas: 0 }\n  // Relayer mode\n  const addedGas = getAddedGas(token)\n  // If Gas Tank enabled\n  if (isGasTankEnabled) return { addedGas: 0, multiplier: 1 }\n\n  return {\n    // otherwise we get very long floating point numbers with trailing .999999\n    multiplier: parseFloat(((estimation.gasLimit + addedGas) / estimation.gasLimit).toFixed(4)),\n    addedGas\n  }\n}\n\n// Returns feeToken data with all multipliers applied\nexport function getFeesData(feeToken, estimation, speed, isGasTankEnabled, network) {\n  const { addedGas, multiplier } = getFeePaymentConsequences(feeToken, estimation, isGasTankEnabled)\n  const savedGas = getAddedGas(feeToken)\n  const discountMultiplier = 1 - (feeToken?.discount || 0)\n  const totalMultiplier = multiplier * discountMultiplier\n  const nativeRate = feeToken?.nativeRate || 1\n  const isCrossChainNativeSelected =\n    isGasTankEnabled &&\n    feeToken.address === '0x0000000000000000000000000000000000000000' &&\n    network.id !== feeToken.network\n  // eslint-disable-next-line no-nested-ternary\n  const feeInNative = estimation.customFee\n    ? (estimation.customFee * discountMultiplier) / nativeRate\n    : !isCrossChainNativeSelected\n    ? estimation.feeInNative[speed] * totalMultiplier\n    : (((estimation.feeInNative[speed] * totalMultiplier) / nativeRate) *\n        estimation.nativeAssetPriceInUSD) /\n      feeToken.price\n  // eslint-disable-next-line no-nested-ternary\n  const feeInUSD = !Number.isNaN(estimation.nativeAssetPriceInUSD)\n    ? !isCrossChainNativeSelected\n      ? feeInNative * estimation.nativeAssetPriceInUSD\n      : feeInNative * feeToken.price\n    : undefined\n  const feeInFeeToken = feeInNative * nativeRate\n\n  return {\n    feeInNative,\n    feeInUSD,\n    feeInFeeToken,\n    addedGas, // use it bundle data\n    savedGas\n  }\n}\nexport function isTokenEligible(token, speed, estimation, isGasTankEnabled, network) {\n  if (estimation?.relayerless && token?.address === '0x0000000000000000000000000000000000000000')\n    return true\n  if (!token) return false\n  const { feeInFeeToken } = getFeesData(token, estimation, speed, isGasTankEnabled, network)\n  const balanceInFeeToken = parseInt(token.balance) / 10 ** token.decimals\n  return balanceInFeeToken > feeInFeeToken\n}\n\nconst contractErrors = [\n  'caller is a contract',\n  'contract not allowed',\n  'contract not supported',\n  'No contractz allowed',\n  /* no */ 'contracts allowed',\n  /* c or C */ 'ontract is not allowed'\n]\n\nexport function mapTxnErrMsg(msg: any) {\n  if (!msg) return\n  if (msg.includes('Router: EXPIRED')) return 'Swap expired'\n  if (msg.includes('Router: INSUFFICIENT_OUTPUT_AMOUNT'))\n    return 'Swap will suffer slippage higher than your requirements'\n  if (msg.includes('INSUFFICIENT_PRIVILEGE')) return 'Your signer address is not authorized.'\n  if (contractErrors.find((contractMsg) => msg.includes(contractMsg)))\n    return 'This dApp does not support smart wallets.'\n  return msg\n}\n\nexport function getErrHint(msg: any) {\n  if (!msg) return\n  if (msg.includes('Router: EXPIRED')) return 'Try performing the swap again'\n  if (msg.includes('Router: INSUFFICIENT_OUTPUT_AMOUNT'))\n    return 'Try performing the swap again or increase your slippage requirements'\n  if (msg.includes('INSUFFICIENT_PRIVILEGE'))\n    return 'If you set a new signer for this account, try re-adding the account.'\n  if (contractErrors.find((contractMsg) => msg.includes(contractMsg)))\n    return 'Contact the dApp developers to tell them to implement smart wallet support by not blocking contract interactions and/or implementing EIP1271.'\n  return 'Sending this transaction batch would have resulted in an error, so we prevented it.'\n}\n\nexport function toHexAmount(amnt: any, decimals: any) {\n  return `0x${Math.round(amnt * 10 ** decimals).toString(16)}`\n}\n\nexport function getDiscountApplied(amnt: any, discount = 0) {\n  if (!discount) return 0\n  if (!amnt) return 0\n  if (discount === 1) return amnt\n  return (amnt / (1 - discount)) * discount\n}\n","// @ts-nocheck TODO: Fill in all missing types before enabling the TS check again\nimport ERC20ABI from 'adex-protocol-eth/abi/ERC20.json'\nimport { BigNumber } from 'ethers'\nimport { Interface } from 'ethers/lib/utils'\n\nimport accountPresets from '../../constants/accountPresets'\n\nconst ERC20AbiInterface = new Interface(ERC20ABI)\nconst TRANSFER_SIGHASH = ERC20AbiInterface.getSighash(\n  ERC20AbiInterface.getFunction('transfer').format()\n)\nconst feeCollector = accountPresets.feeCollector\nconst NATIVE_ADDRESS = '0x0000000000000000000000000000000000000000'\n\nfunction getTxnTransferInfo(txn) {\n  try {\n    const res = ERC20AbiInterface.decodeFunctionData('transfer', txn)\n\n    return {\n      value: BigNumber.from(res._value),\n      ...res\n    }\n  } catch (e) {\n    console.error(e)\n    return {}\n  }\n}\n\nfunction isFeeCollectorTxn(txn) {\n  // is first call is to relayer this is native\n  if (txn[0] === feeCollector) return true\n  // transfer token to relayer\n  if (txn[2].startsWith(TRANSFER_SIGHASH) && getTxnTransferInfo(txn[2])._to === feeCollector)\n    return true\n  return false\n}\n\nconst getGasTankFilledTxns = (transactions) => {\n  const depositTxns: any = []\n  transactions.forEach(({ txId, txns, submittedAt, gasTankFee, identity, ...rest }) => {\n    const filteredTxns = txns\n      .filter((txnCall, i) => isFeeCollectorTxn(txnCall) && (gasTankFee || i < txns.length - 1))\n      .map((fillTxn) => {\n        if (fillTxn[0] === feeCollector) {\n          return {\n            submittedAt,\n            address: NATIVE_ADDRESS,\n            value: BigNumber.from(fillTxn[1]),\n            identity,\n            txId,\n            ...rest\n          }\n        }\n        if (\n          fillTxn[2].startsWith(TRANSFER_SIGHASH) &&\n          ERC20AbiInterface.decodeFunctionData('transfer', fillTxn[2])._to === feeCollector\n        ) {\n          return {\n            submittedAt,\n            address: fillTxn[0],\n            value: BigNumber.from(\n              ERC20AbiInterface.decodeFunctionData('transfer', fillTxn[2])._value\n            ),\n            identity,\n            txId,\n            ...rest\n          }\n        }\n        return null\n      })\n\n    if (filteredTxns.length) depositTxns.push(filteredTxns[0])\n  })\n\n  return depositTxns\n}\n\nexport { getGasTankFilledTxns }\n","import useGasTankData from './useGasTankData'\n\nexport default useGasTankData\n","import { formatUnits } from 'ethers/lib/utils'\nimport { useMemo } from 'react'\n\nimport { getAddedGas } from '../../helpers/sendTxnHelpers'\nimport { getGasTankFilledTxns } from '../../services/isFeeCollectorTxn'\nimport useCacheBreak from '../useCacheBreak'\nimport { UseGasTankDataProps, UseGasTankDataReturnType } from './types'\n\nexport default function useGasTankData({\n  relayerURL,\n  selectedAcc,\n  network,\n  portfolio,\n  useRelayerData\n}: UseGasTankDataProps): UseGasTankDataReturnType {\n  const { cacheBreak } = useCacheBreak()\n  const { tokens } = portfolio\n\n  const urlGetBalance = relayerURL\n    ? `${relayerURL}/gas-tank/${selectedAcc}/getBalance?cacheBreak=${cacheBreak}`\n    : null\n  const urlGetFeeAssets = relayerURL\n    ? `${relayerURL}/gas-tank/assets?cacheBreak=${cacheBreak}`\n    : null\n  const urlGetTransactions = relayerURL\n    ? `${relayerURL}/identity/${selectedAcc}/${network?.id}/transactions`\n    : null\n\n  const { data: balancesRes, isLoading } = useRelayerData({ url: urlGetBalance })\n  const { data: feeAssetsRes } = useRelayerData({ url: urlGetFeeAssets })\n  const { data: executedTxnsRes } = useRelayerData({ url: urlGetTransactions })\n\n  const gasTankBalances = useMemo(\n    () =>\n      balancesRes &&\n      balancesRes.length &&\n      balancesRes.map(({ balanceInUSD }: any) => balanceInUSD).reduce((a: any, b: any) => a + b, 0),\n    [balancesRes]\n  )\n\n  const gasTankTxns = useMemo(\n    () =>\n      executedTxnsRes &&\n      executedTxnsRes.txns.length &&\n      executedTxnsRes.txns.filter((item: any) => !!item.gasTankFee),\n    [executedTxnsRes]\n  )\n\n  const feeAssetsPerNetwork = useMemo(\n    () =>\n      feeAssetsRes &&\n      feeAssetsRes.length &&\n      feeAssetsRes.filter((item: any) => item.network === network?.id),\n    [feeAssetsRes, network?.id]\n  )\n\n  const executedTxns = executedTxnsRes && executedTxnsRes.txns.length && executedTxnsRes.txns\n  const gasTankFilledTxns = useMemo(\n    () => executedTxns && executedTxns.length && getGasTankFilledTxns(executedTxns),\n    [executedTxns]\n  )\n\n  const availableFeeAssets = useMemo(\n    () =>\n      feeAssetsPerNetwork?.map((item: any) => {\n        const isFound = tokens?.find((x) => x.address.toLowerCase() === item.address.toLowerCase())\n        if (isFound)\n          return {\n            ...isFound,\n            tokenImageUrl: item.icon,\n            decimals: item.decimals,\n            symbol: item.symbol,\n            balance: isFound.balance,\n            disableGasTankDeposit: !!item.disableGasTankDeposit,\n            balanceUSD:\n              parseFloat(isFound.balance) *\n              parseFloat(\n                feeAssetsPerNetwork.find(\n                  (x: any) => x.address.toLowerCase() === isFound.address.toLowerCase()\n                ).price || 0\n              )\n          }\n\n        return {\n          ...item,\n          tokenImageUrl: item.icon,\n          balance: 0,\n          balanceUSD: 0,\n          decimals: 0,\n          address: item.address.toLowerCase(),\n          symbol: item.symbol.toUpperCase()\n        }\n      }),\n    [feeAssetsPerNetwork, tokens]\n  )\n\n  const totalSavedResult = useMemo(\n    () =>\n      gasTankTxns &&\n      gasTankTxns.length &&\n      gasTankTxns.map((item: any) => {\n        const feeTokenDetails = feeAssetsRes\n          ? feeAssetsRes.find((i: any) => i.symbol === item.feeToken)\n          : null\n        const savedGas = feeTokenDetails ? getAddedGas(feeTokenDetails) : null\n        return {\n          saved: savedGas ? item.feeInUSDPerGas * savedGas : 0.0,\n          cashback:\n            item.gasTankFee && item.gasTankFee.cashback\n              ? // @ts-ignore FIXME: Figure out why TypeScript complains\n                formatUnits(\n                  item.gasTankFee.cashback.toString(),\n                  feeTokenDetails?.decimals\n                ).toString() * feeTokenDetails?.price\n              : 0.0\n        }\n      }),\n    [feeAssetsRes, gasTankTxns]\n  )\n\n  return {\n    balancesRes,\n    gasTankBalances,\n    isLoading,\n    gasTankTxns,\n    feeAssetsRes,\n    gasTankFilledTxns,\n    totalSavedResult,\n    availableFeeAssets\n  }\n}\n"],"sourceRoot":""}