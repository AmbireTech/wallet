{"version":3,"sources":["components/Modals/AddAddressModal/AddAddressModal.js","components/Wallet/Transfer/Addresses/Addresses.js","components/Wallet/Transfer/Transfer.js","lib/icons.js","lib/formatters.js","lib/validations/formValidations.js"],"names":["AddAddressModal","title","inputs","selectedNetwork","onClose","hideModal","useModals","useState","isDisabled","setDisabled","uDAddress","setUDAddress","ensAddress","setEnsAddress","timer","useRef","inputsFields","useMemo","map","input","ref","createRef","getUDomain","value","a","resolveUDomain","unstoppableDomainsChain","onInput","current","clearTimeout","validateForm","isFound","find","item","inputType","domain","uDAddr","ensAddr","resolveENSDomain","isFormValid","validate","isUDField","every","v","setTimeout","catch","console","error","buttons","clear","small","icon","onClick","disabled","values","push","type","id","label","placeholder","className","Addresses","addresses","addAddress","removeAddress","onSelectAddress","showModal","modalInputs","isValidAddress","addAddressModal","name","address","AddressList","noAccounts","ERC20","Interface","require","unsupportedSWPlatforms","withRouter","history","portfolio","selectedAcc","addRequest","addressBook","isKnownAddress","tokenAddressOrSymbol","useParams","addToast","useToasts","state","useLocation","gasTankDetails","tokenAddress","tokens","symbol","asset","setAsset","amount","setAmount","bigNumberHexAmount","setBigNumberHexAmount","accountPresets","feeCollector","setAddress","addressConfirmed","setAddressConfirmed","sWAddressConfirmed","setSWAddressConfirmed","newAddress","setNewAddress","success","messages","validationFormMgs","setValidationFormMgs","feeBaseTokenWarning","setFeeBaseTokenWarning","assetsItems","feeAssetsPerNetwork","filter","some","i","toLowerCase","img","tokenImageUrl","network","fallbackIcon","getTokenIcon","selectedAsset","maxAmount","maxAmountFormatted","balanceRaw","decimals","balance","ethers","utils","formatUnits","formatFloatTokenAmount","showSWAddressWarning","Number","networks","includes","onAmountChange","bigNumberAmount","parseUnits","toHexString","useEffect","gasFeeToken","ft","baseToken","feeBaseToken","toUpperCase","replace","pathname","isValidSendTransferAmount","validateSendTransferAmount","startsWith","indexOf","isValidRecipientAddress","validateSendTransferAddress","message","UDAddress","bip44Item","getBip44Items","isUDAddress","selectedAddress","isEnsAddress","amountLabel","style","justifyContent","isCurrNetworkBalanceLoading","length","searchable","defaultValue","items","sort","b","onChange","precision","button","onButtonClick","size","gasTankMsg","info","x","onAddNewAddress","join","href","target","rel","checked","recipientAddress","txn","to","data","encodeFunctionData","req","Date","now","chainId","account","meta","addressLabel","e","customIcons","zapperStorageTokenIcons","networkId","addr","net","useGrouping","maximumFractionDigits","isNaN","parseFloat","minimumFractionDigits","Math","min","toLocaleString","undefined","max","err","validateAddress","validateAddAuthSignerAddress","isValidAddr","isKnownTokenOrContract","parsedAmount","slice","gt","validateSendNftAddress","metadata","owner"],"mappings":"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","file":"static/js/19.007ce3b9.chunk.js","sourcesContent":["import './AddAddressModal.scss'\n\nimport { createRef, useRef, useState, useMemo } from 'react'\nimport { MdCheck, MdClose } from 'react-icons/md'\nimport { useModals } from 'hooks'\nimport { Modal, TextInput, Button, ToolTip } from \"components/common\"\nimport { resolveUDomain } from 'lib/unstoppableDomains'\nimport { resolveENSDomain } from 'lib/ensDomains'\n\nconst AddAddressModal = ({ title, inputs, selectedNetwork, onClose }) => {\n    const { hideModal } = useModals()\n    const [isDisabled, setDisabled] = useState(true)\n    const [uDAddress, setUDAddress] = useState('')\n    const [ensAddress, setEnsAddress] = useState('')\n    const timer = useRef(null)\n\n    const inputsFields = useMemo(() => inputs.map(input => ({ ...input, ref: createRef() })), [inputs])\n    const getUDomain = async (value) => {\n        return await resolveUDomain(value, null, selectedNetwork.unstoppableDomainsChain)\n    }\n\n    const onInput = () => {\n        if (timer.current) {\n            clearTimeout(timer.current)\n        }\n\n        const validateForm = async () => {\n            const isFound = inputsFields.find(item => item.inputType === 'address')\n            const domain = isFound && isFound.ref && isFound.ref.current.value\n            if (!domain) return\n            \n            let uDAddr = null\n            let ensAddr = null\n            if (isFound) {\n                uDAddr = await getUDomain(domain)\n                ensAddr = await resolveENSDomain(domain)\n                timer.current = null\n                if (uDAddr) setUDAddress(uDAddr)\n                else if (ensAddr) setEnsAddress(ensAddr)\n            }\n\n            const isFormValid = inputsFields\n                .map(({ ref, validate, inputType }) => {\n                    const isUDField = inputType === 'address'\n                    const value = isUDField && uDAddr ? uDAddr : isUDField && ensAddr ? ensAddr : ref.current.value\n                    if (!validate) return !!value\n\n                    return validate(value)\n                })\n                .every(v => v === true)\n\n            setDisabled(!isFormValid)\n        }\n\n        timer.current = setTimeout(async () => {\n            return validateForm().catch(console.error)\n        }, 500)\n    }\n\n    const onConfirm = () => {\n        let values = inputsFields.map(({ ref }) => ref.current.value)\n        if (uDAddress) values.push({ type: 'ud' })\n        else if (ensAddress) values.push({ type: 'ens' })\n        else values.push({ type: 'pub' })\n        \n        onClose && onClose(values)\n        hideModal()\n    }\n\n    const buttons = <>\n        <Button clear small icon={<MdClose />} onClick={hideModal}>Cancel</Button>\n        <Button small icon={<MdCheck />} disabled={isDisabled} onClick={onConfirm}>Confirm</Button>\n    </>\n\n    return (\n        <Modal id=\"input-modal\" title={title} buttons={buttons}>\n            {\n                inputsFields.map(({ id, label, placeholder, ref, type }) => (\n                    <div key={id + label}>\n                        <TextInput label={label} placeholder={placeholder} onInput={onInput} ref={ref} />\n                        {(type === 'address') &&\n                            <>\n                                <ToolTip label={!uDAddress ? 'You can use Unstoppable domainsⓇ' : 'Valid Unstoppable domainsⓇ domain'}>\n                                    <span id=\"udomains-logo\" className={ uDAddress ? 'ud-logo-active ' : '' } />\n                                </ToolTip>\n                                <ToolTip label={!ensAddress ? 'You can use Ethereum Name ServiceⓇ' : 'Valid Ethereum Name ServicesⓇ domain'}>\n                                    <div id=\"ens-logo\" className={ensAddress ? 'ens-logo-active ' : ''} />\n                                </ToolTip>\n                            </>\n                        }\n                    </div>\n                ))\n            }\n        </Modal>\n    )\n}\n\nexport default AddAddressModal\n","import './Addresses.scss'\n\nimport { MdOutlineAdd } from 'react-icons/md'\nimport AddressList from 'components/common/AddressBook/AddressList/AddressList'\nimport { Button } from 'components/common'\nimport { isValidAddress } from 'ambire-common/src/services/address'\nimport AddAddressModal from 'components/Modals/AddAddressModal/AddAddressModal'\nimport { useModals } from 'hooks'\n\nconst Addresses = ({ addresses, addAddress, removeAddress, onSelectAddress, selectedNetwork }) => {\n    const { showModal } = useModals()\n\n    const modalInputs = [\n        { inputType: 'name', label: 'Name', placeholder: 'Address title' },\n        { inputType: 'address', label: 'Address / Unstoppable domainsⓇ / ENSⓇ', placeholder: 'Address / Unstoppable Domains / ENS', validate: value => isValidAddress(value) } \n    ]\n\n    const addAddressModal = <AddAddressModal \n            title=\"Add New Address\" \n            selectedNetwork={selectedNetwork} \n            inputs={modalInputs} \n            onClose={([name, address, type]) => addAddress(name, address, type)}\n        ></AddAddressModal>\n    const showInputModal = () => showModal(addAddressModal)\n\n    return (\n        <div id=\"addresses\" className='panel'>\n            <div className='title'>Address Book</div>\n            <div className=\"content\">\n                <AddressList\n                    noAccounts={true}\n                    addresses={addresses}\n                    removeAddress={removeAddress}\n                    onSelectAddress={onSelectAddress}\n                />\n            </div>\n            <div className=\"separator\"></div>\n            <Button icon={<MdOutlineAdd/>} onClick={showInputModal}>Add Address</Button>\n        </div>\n    )\n}\n\nexport default Addresses","import './Transfer.scss'\n\nimport { BsXLg } from 'react-icons/bs'\nimport { AiOutlineSend } from 'react-icons/ai'\nimport { MdWarning } from 'react-icons/md'\nimport { useParams, withRouter } from 'react-router'\nimport { useEffect, useMemo, useState, useRef } from 'react'\nimport { ethers } from 'ethers'\nimport { Interface } from 'ethers/lib/utils'\nimport { useToasts } from 'hooks/toasts'\nimport { TextInput, NumberInput, Button, Select, Loading, AddressBook, AddressWarning, NoFundsPlaceholder, Checkbox, ToolTip } from 'components/common'\nimport { validateSendTransferAddress, validateSendTransferAmount } from 'lib/validations/formValidations'\nimport { resolveUDomain } from 'lib/unstoppableDomains'\nimport { isValidAddress } from 'ambire-common/src/services/address'\nimport Addresses from './Addresses/Addresses'\nimport { MdInfo } from 'react-icons/md'\nimport networks from 'consts/networks'\nimport { getTokenIcon } from 'lib/icons'\nimport { formatFloatTokenAmount } from 'lib/formatters'\nimport { useLocation } from 'react-router-dom'\nimport accountPresets from 'ambire-common/src/constants/accountPresets'\nimport { resolveENSDomain, getBip44Items } from 'lib/ensDomains'\n\nconst ERC20 = new Interface(require('adex-protocol-eth/abi/ERC20'))\nconst unsupportedSWPlatforms = ['Binance', 'Huobi', 'KuCoin', 'Gate.io', 'FTX']\n\nconst Transfer = ({ history, portfolio, selectedAcc, selectedNetwork, addRequest, addressBook }) => {\n    const { addresses, addAddress, removeAddress, isKnownAddress } = addressBook\n\n    const { tokenAddressOrSymbol } = useParams()\n    const { addToast } = useToasts()\n    const { state } = useLocation()\n    const [gasTankDetails] = useState(state ? state : null)\n    const tokenAddress = isValidAddress(tokenAddressOrSymbol) ? tokenAddressOrSymbol : portfolio.tokens.find(({ symbol }) => symbol === tokenAddressOrSymbol)?.address || null\n\n    const [asset, setAsset] = useState(tokenAddress)\n    const [amount, setAmount] = useState(0)\n    const [bigNumberHexAmount, setBigNumberHexAmount] = useState('')\n    const [address, setAddress] = useState(gasTankDetails ? accountPresets.feeCollector : '')\n    const [uDAddress, setUDAddress] = useState('')\n    const [ensAddress, setEnsAddress] = useState('')\n    const [disabled, setDisabled] = useState(true)\n    const [addressConfirmed, setAddressConfirmed] = useState(false)\n    const [sWAddressConfirmed, setSWAddressConfirmed] = useState(false)\n    const [newAddress, setNewAddress] = useState('')\n    const [validationFormMgs, setValidationFormMgs] = useState({\n        success: {\n            amount: false,\n            address: false\n        },\n        messages: {\n            amount: '',\n            address: ''\n        }\n    })\n    const [feeBaseTokenWarning, setFeeBaseTokenWarning] = useState('')\n    const timer = useRef(null)\n    let eligibleFeeTokens = null\n    if (gasTankDetails?.feeAssetsPerNetwork) {\n        eligibleFeeTokens = portfolio.tokens.filter(item => gasTankDetails?.feeAssetsPerNetwork.some(i => i.address.toLowerCase() === item.address.toLowerCase()))\n    } else eligibleFeeTokens = portfolio.tokens\n    \n    const assetsItems = eligibleFeeTokens.map(({ label, symbol, address, img, tokenImageUrl, network }) => ({\n        label: label || symbol,\n        value: address,\n        icon: img || tokenImageUrl,\n        fallbackIcon: getTokenIcon(network, address)\n    }))\n\n    const selectedAsset = portfolio.tokens.find(({ address }) => address === asset)\n\n    const { maxAmount, maxAmountFormatted } = useMemo(() => {\n        if (!selectedAsset) return { maxAmount: '0', maxAmountFormatted: '0.00' };\n        const { balanceRaw, decimals, balance } = selectedAsset\n        return {\n            maxAmount: ethers.utils.formatUnits(balanceRaw, decimals),\n            maxAmountFormatted: formatFloatTokenAmount(balance, true, decimals)\n        }\n    }, [selectedAsset])\n\n    const showSWAddressWarning = useMemo(() =>\n        !gasTankDetails && Number(tokenAddress) === 0 && networks.map(({ id }) => id).filter(id => id !== 'ethereum').includes(selectedNetwork.id)\n        , [gasTankDetails, tokenAddress, selectedNetwork.id])\n\n    const setMaxAmount = () => onAmountChange(maxAmount)\n\n    const onAmountChange = value => {\n        if (value) {\n            const { decimals } = selectedAsset\n            const bigNumberAmount = ethers.utils.parseUnits(value, decimals).toHexString()\n            setBigNumberHexAmount(bigNumberAmount)\n        }\n\n        setAmount(value)\n    }\n\n    const sendTx = () => {\n        const recipientAddress = uDAddress ? uDAddress : ensAddress ? ensAddress :  address\n        if (!bigNumberHexAmount) return \n        \n        try {\n            const txn = {\n                to: selectedAsset.address,\n                value: '0',\n                data: ERC20.encodeFunctionData('transfer', [recipientAddress, bigNumberHexAmount])\n            }\n\n            if (Number(selectedAsset.address) === 0) {\n                txn.to = recipientAddress\n                txn.value = bigNumberHexAmount\n                txn.data = '0x'\n            }\n\n            let req = {\n                id: `transfer_${Date.now()}`,\n                type: 'eth_sendTransaction',\n                chainId: selectedNetwork.chainId,\n                account: selectedAcc,\n                txn,\n                meta: null\n            }\n\n            if (uDAddress) {\n                req.meta = {\n                    addressLabel: {\n                        addressLabel: address,\n                        address: uDAddress\n                    }\n                }\n            } else if (ensAddress) {\n                req.meta = {\n                    addressLabel: {\n                        addressLabel: address,\n                        address: ensAddress\n                    }\n                }\n            }\n\n            addRequest(req)\n\n            setAmount(0)\n        } catch (e) {\n            console.error(e)\n            addToast(`Error: ${e.message || e}`, { error: true })\n        }\n    }\n\n    useEffect(() => {\n        // check gasTank topUp with token for convertion\n        setFeeBaseTokenWarning('')\n        if (gasTankDetails?.feeAssetsPerNetwork){\n            const gasFeeToken = gasTankDetails.feeAssetsPerNetwork.find(ft => ft?.address?.toLowerCase() === selectedAsset?.address?.toLowerCase())\n            if (gasFeeToken?.baseToken) {\n                const feeBaseToken = gasTankDetails.feeAssetsPerNetwork.find(ft => ft.address.toLowerCase() === gasFeeToken.baseToken.toLowerCase())\n                setFeeBaseTokenWarning(`Token ${gasFeeToken.symbol.toUpperCase()} will be converted to ${feeBaseToken.symbol.toUpperCase()} without additional fees.`)\n            }\n        }\n    }, [gasTankDetails?.feeAssetsPerNetwork, selectedAsset])\n\n    useEffect(() => {\n        setAmount(0)\n        setBigNumberHexAmount('')\n        setSWAddressConfirmed(false)\n    }, [asset, selectedNetwork.id])\n\n    useEffect(() => {\n        if (!selectedAsset) return\n        history.replace({ pathname: `/wallet/transfer/${Number(asset) !== 0 ? asset : selectedAsset.symbol}` })\n    }, [asset, history, selectedAsset])\n\n    useEffect(() => {\n        const isValidSendTransferAmount = validateSendTransferAmount(amount, selectedAsset)\n\n        if (address.startsWith('0x') && (address.indexOf('.') === -1)) {\n            if (uDAddress !== '') setUDAddress('')\n            if (ensAddress !== '') setEnsAddress('')\n            const isValidRecipientAddress = validateSendTransferAddress(address, selectedAcc, addressConfirmed, isKnownAddress)\n\n            setValidationFormMgs({\n                success: {\n                    amount: isValidSendTransferAmount.success,\n                    address: isValidRecipientAddress.success\n                },\n                messages: {\n                    amount: isValidSendTransferAmount.message ? isValidSendTransferAmount.message : '',\n                    address: isValidRecipientAddress.message ? isValidRecipientAddress.message : ''\n                }\n            })\n\n            setDisabled(!isValidRecipientAddress.success || !isValidSendTransferAmount.success || (showSWAddressWarning && !sWAddressConfirmed))\n        } else {\n            if (timer.current) {\n                clearTimeout(timer.current)\n            }\n\n            const validateForm = async () => {\n                const UDAddress = await resolveUDomain(address, selectedAsset ? selectedAsset.symbol : null, selectedNetwork.unstoppableDomainsChain)\n                const bip44Item = getBip44Items(selectedAsset ? selectedAsset.symbol : null)\n                const ensAddr = await resolveENSDomain(address, bip44Item)\n                timer.current = null\n                const isUDAddress = UDAddress ? true : false\n                const isEnsAddress = ensAddr ? true : false\n                let selectedAddress = ''\n                if (isEnsAddress) selectedAddress = ensAddr\n                else if (isUDAddress) selectedAddress = UDAddress\n                else selectedAddress = address\n\n                const isValidRecipientAddress = validateSendTransferAddress(selectedAddress, selectedAcc, addressConfirmed, isKnownAddress, isUDAddress, isEnsAddress)\n\n                setUDAddress(UDAddress)\n                setEnsAddress(ensAddr)\n                setValidationFormMgs({\n                    success: {\n                        amount: isValidSendTransferAmount.success,\n                        address: isValidRecipientAddress.success\n                    },\n                    messages: {\n                        amount: isValidSendTransferAmount.message ? isValidSendTransferAmount.message : '',\n                        address: isValidRecipientAddress.message ? isValidRecipientAddress.message : ''\n                    }\n                })\n\n                setDisabled(!isValidRecipientAddress.success || !isValidSendTransferAmount.success || (showSWAddressWarning && !sWAddressConfirmed))\n            }\n\n            timer.current = setTimeout(async () => {\n                return validateForm().catch(console.error)\n            }, 300)\n        }\n        return () => clearTimeout(timer.current)\n    }, [address, amount, selectedAcc, selectedAsset, addressConfirmed, showSWAddressWarning, sWAddressConfirmed, isKnownAddress, addToast, selectedNetwork, addAddress, uDAddress, disabled, ensAddress])\n\n    const amountLabel = <div className=\"amount-label\">Available Amount: <span>{maxAmountFormatted} {selectedAsset?.symbol}</span></div>\n\n    return (\n        <div id=\"transfer\" style={{ justifyContent: gasTankDetails ? 'center' : '' }}>\n           <div className=\"panel\">\n               <div className=\"title\">\n                   Send\n               </div>\n               {\n                    portfolio.isCurrNetworkBalanceLoading ?\n                        <Loading />\n                        :\n                        assetsItems.length ?\n                            <div className=\"form\">\n                                <Select searchable defaultValue={asset} items={assetsItems.sort((a, b) => a.label.toLowerCase() > b.label.toLowerCase() ? 1 : -1)} onChange={({ value }) => setAsset(value)}/>\n                                { feeBaseTokenWarning ? <p className='gas-tank-convert-msg'><MdWarning /> {feeBaseTokenWarning}</p> : <></>}\n                                <NumberInput\n                                    label={amountLabel}\n                                    value={amount}\n                                    precision={selectedAsset?.decimals}\n                                    onInput={onAmountChange}\n                                    button=\"MAX\"\n                                    onButtonClick={() => setMaxAmount()}\n                                />\n                                \n                                { validationFormMgs.messages.amount && \n                                    (<div className='validation-error'><BsXLg size={12}/>&nbsp;{validationFormMgs.messages.amount}</div>)}\n                                { gasTankDetails ? <p className='gas-tank-msg'><MdWarning /> {gasTankDetails?.gasTankMsg}</p> : (<div id=\"recipient-field\">\n                                    <TextInput\n                                        placeholder=\"Recipient\"\n                                        info=\"Please double-check the recipient address, blockchain transactions are not reversible.\"\n                                        value={address}\n                                        onInput={setAddress}\n                                    />\n                                    <ToolTip label={!ensAddress ? 'You can use Ethereum Name ServiceⓇ' : 'Valid Ethereum Name ServicesⓇ domain'}>\n                                        <div id=\"ens-logo\" className={ensAddress ? 'ens-logo-active ' : ''} />\n                                    </ToolTip>\n                                    <ToolTip label={!uDAddress ? 'You can use Unstoppable domainsⓇ' : 'Valid Unstoppable domainsⓇ domain'}>\n                                        <div id=\"udomains-logo\" className={uDAddress ? 'ud-logo-active ' : ''} />\n                                    </ToolTip>\n                                    <AddressBook\n                                        addresses={addresses.filter(x => x.address !== selectedAcc)}\n                                        addAddress={addAddress}\n                                        removeAddress={removeAddress}\n                                        newAddress={newAddress}\n                                        onClose={() => setNewAddress(null)}\n                                        onSelectAddress={address => setAddress(address)}\n                                        selectedNetwork={selectedNetwork}\n                                    />\n                                </div>)}\n                                { validationFormMgs.messages.address && \n                                    (<div className='validation-error'><BsXLg size={12}/>&nbsp;{validationFormMgs.messages.address}</div>)}\n                                <div className=\"separator\"/>\n                                <AddressWarning\n                                    address={address}\n                                    onAddNewAddress={() => setNewAddress(address)}\n                                    onChange={(value) => setAddressConfirmed(value)}\n                                    isKnownAddress={isKnownAddress}\n                                    uDAddress={uDAddress}\n                                    ensAddress={ensAddress}\n                                />\n                                {\n                                    showSWAddressWarning ?\n                                        <Checkbox\n                                            id=\"binance-address-warning\"\n                                            label={<span id=\"binance-address-warning-label\">\n                                                I confirm this address is not a {unsupportedSWPlatforms.join(' / ')} address: <br />\n                                                These platforms do not support ${selectedAsset?.symbol} deposits from smart wallets\n                                                <a href='https://help.ambire.com/hc/en-us/articles/4415473743506-Statement-on-MATIC-BNB-deposits-to-Binance' target='_blank' rel='noreferrer'><MdInfo size={20} /></a>\n                                            </span>}\n                                            checked={sWAddressConfirmed}\n                                            onChange={({ target }) => setSWAddressConfirmed(target.checked)}\n                                        />\n                                        :\n                                        null\n                                }\n                                <Button icon={<AiOutlineSend />} disabled={disabled} onClick={sendTx}>Send</Button>\n                            </div>\n                            :\n                            <NoFundsPlaceholder/>\n               }\n           </div>\n           {!gasTankDetails && <Addresses\n                selectedAsset={selectedAsset}\n                selectedNetwork={selectedNetwork}\n                addresses={addresses}\n                addAddress={addAddress}\n                removeAddress={removeAddress}\n                onSelectAddress={address => setAddress(address)}\n            />}\n        </div>\n    )\n}\n\nexport default withRouter(Transfer)","const customIcons = {\n    '0xb468a1e5596cfbcdf561f21a10490d99b4bb7b68': 'https://upload.wikimedia.org/wikipedia/commons/thumb/5/5a/Jeff_Sessions_with_Elmo_and_Rosita_%28cropped%29.jpg/220px-Jeff_Sessions_with_Elmo_and_Rosita_%28cropped%29.jpg', // TEST Polygon ELMO token,\n    '0x88800092ff476844f74dc2fc427974bbee2794ae': 'https://raw.githubusercontent.com/AmbireTech/ambire-brand/main/logos/ambire_logo_white_bg_250x250.png', // Ambire Wallet Token\n    '0x47cd7e91c3cbaaf266369fe8518345fc4fc12935': 'https://raw.githubusercontent.com/AmbireTech/ambire-brand/main/logos/xwallet_250x250.png', //xWallet\n    '0xb6456b57f03352be48bf101b46c1752a0813491a': 'https://raw.githubusercontent.com/AmbireTech/adex-brand/master/logos/vaporwave-adex-2.png', // ADX-STAKING\n    '0xd9a4cb9dc9296e111c66dfacab8be034ee2e1c2c': 'https://raw.githubusercontent.com/AmbireTech/adex-brand/master/logos/ADX-loyalty%40256x256.png', // ADX-LOYALTY\n    '0xec3b10ce9cabab5dbf49f946a623e294963fbb4e': 'https://raw.githubusercontent.com/AmbireTech/ambire-brand/main/logos/xwallet_250x250.png', // Polygons test xWallet\n    '0xe9415e904143e42007865e6864f7f632bd054a08': 'https://raw.githubusercontent.com/AmbireTech/ambire-brand/main/logos/Ambire_logo_250x250.png', // Polygons test Wallet\n    '0xade00c28244d5ce17d72e40330b1c318cd12b7c3': 'https://raw.githubusercontent.com/AmbireTech/ambire-brand/main/official-logos/Ambire-AdEx/Ambire_AdEx_Symbol_color_white_bg.png' //ADX-TOKEN\n}\n\nconst zapperStorageTokenIcons = 'https://storage.googleapis.com/zapper-fi-assets/tokens'\n\nexport function getTokenIcon(networkId = '', address = '') {\n    const addr = address.toLowerCase()\n    const net = networkId.toLowerCase()\n    return customIcons[addr] || `${zapperStorageTokenIcons}/${net}/${addr}.png`\n}\n","export function formatFloatTokenAmount(amount, useGrouping = true, maximumFractionDigits = 18) {\n    if (isNaN(amount) || isNaN(parseFloat(amount)) || !(typeof amount === 'number' || typeof amount === 'string')) return amount\n\n    try {\n        const minimumFractionDigits = Math.min(2, maximumFractionDigits || 0)\n        return ((typeof amount === 'number') ? amount : parseFloat(amount))\n            .toLocaleString(undefined,\n                {\n                    useGrouping,\n                    maximumFractionDigits: Math.max(minimumFractionDigits, maximumFractionDigits),\n                    minimumFractionDigits\n                })\n    } catch (err) {\n        console.error(err)\n        return amount\n    }\n}\n\n// Round a floating point number to a specific decimal places, i.e. 1.156 => 1.16\nexport function roundFloatingNumber(number, places = 2) {\n  const decimals = Math.pow(10, places)\n\n  return Math.round((number + Number.EPSILON) * decimals) / decimals\n}\n","import { parseUnits } from 'ethers/lib/utils'\nimport { isValidAddress, isKnownTokenOrContract } from 'ambire-common/src/services/address'\nimport accountPresets from 'ambire-common/src/constants/accountPresets'\n\nconst validateAddress = address => {\n    if (!(address && address.length)) {\n        return {\n            success: false,\n            message: ''\n        }\n    }\n\n    if (!(address && isValidAddress(address))) {\n        return {\n            success: false,\n            message: 'Invalid address.'\n        }\n    }\n\n    return { success: true }\n}\n\nconst validateAddAuthSignerAddress = (address, selectedAcc) => {\n    const isValidAddr = validateAddress(address)\n    if (!isValidAddr.success) return isValidAddr\n\n    if (address && selectedAcc && (address === selectedAcc)) {\n        return {\n            success: false,\n            message: 'The entered address should be different than the your own account address.'\n        }\n    }\n    \n    return { success: true }\n}\n\nconst validateSendTransferAddress = (address, selectedAcc, addressConfirmed, isKnownAddress, isUDAddress, isEnsAddress) => {\n    const isValidAddr = validateAddress(address)\n    if (!isValidAddr.success) return isValidAddr\n\n    if (address && address === accountPresets.feeCollector) {\n        return {\n            success: true\n        }\n    }\n\n    if (address && selectedAcc && (address === selectedAcc)) {\n        return {\n            success: false,\n            message: 'The entered address should be different than the your own account address.'\n        }\n    }\n    \n    if (address && isKnownTokenOrContract(address)) {\n        return {\n            success: false,\n            message: 'You are trying to send tokens to a smart contract. Doing so would burn them.'\n        }\n    }\n\n    if (address && (!isKnownAddress(address) && !addressConfirmed && !isUDAddress && !isEnsAddress)) { \n        return {\n            success: false,\n            message: `You're trying to send to an unknown address. If you're really sure, confirm using the checkbox below.`\n        }\n    }\n\n    if (address && (!isKnownAddress(address) && !addressConfirmed && (isUDAddress || isEnsAddress))) { \n        const name = isUDAddress ? 'Unstoppable domain' : 'Ethereum Name Service'\n        return {\n            success: false,\n            message: `You're trying to send to an ${name}. If you really trust to the person who gave you, confirm using the checkbox below.`\n        }\n    }\n\n    return { success: true }\n}\n\nconst validateSendTransferAmount = (amount, selectedAsset) => {\n    if (!(amount && amount.length)) {\n        return {\n            success: false,\n            message: ''\n        }\n    }\n    \n    if (!(amount && (amount > 0))) {\n        return {\n            success: false,\n            message: 'The amount must be greater than 0.'\n        }\n    }\n\n    try {\n        if (amount && selectedAsset && selectedAsset.decimals) {\n            const parsedAmount = amount.slice(0, amount.indexOf('.') + selectedAsset.decimals + 1); // Fixed decimals in case amount is bigger than selectedAsset.decimals, otherwise would cause overflow error\n            const bigNumberAmount = parseUnits(parsedAmount, selectedAsset.decimals)\n            if (bigNumberAmount && selectedAsset.balanceRaw && bigNumberAmount.gt(selectedAsset.balanceRaw)) {\n                return {\n                    success: false,\n                    message: `The amount is greater than the asset's balance: ${selectedAsset?.balance} ${selectedAsset?.symbol}.`\n                }\n            }\n        }\n    } catch(e) {\n        console.error(e);\n    }\n\n    return { success: true }\n}\n\nconst validateSendNftAddress = (address, selectedAcc, addressConfirmed, isKnownAddress, metadata, selectedNetwork, network, isUDAddress, isEnsAddress) => {\n    const isValidAddr = validateSendTransferAddress(address, selectedAcc, addressConfirmed, isKnownAddress, isUDAddress, isEnsAddress)\n    if (!isValidAddr.success) return isValidAddr\n\n    if (metadata && selectedAcc && (metadata.owner?.address.toLowerCase() !== selectedAcc.toLowerCase())) {\n        return {\n            success: false,\n            message: `The NFT you're trying to send is not owned by you!`\n        }\n    }\n\n    if (selectedNetwork && network && (selectedNetwork.id !== network)) {\n        return {\n            success: false,\n            message: 'The selected network is not the correct one.'\n        }\n    }\n\n    return { success: true }\n}\n\nexport {\n    validateAddAuthSignerAddress,\n    validateSendNftAddress,\n    validateSendTransferAddress,\n    validateSendTransferAmount\n}\n"],"sourceRoot":""}