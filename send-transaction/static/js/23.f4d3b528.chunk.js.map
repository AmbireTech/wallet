{"version":3,"sources":["resources/aave.svg","components/Wallet/Earn/Card/Card.js","components/Wallet/Earn/Cards/AAVECard/v2Tokens.js","components/Wallet/Earn/Cards/AAVECard/defaultTokens.js","components/Wallet/Earn/Cards/AAVECard/AAVECard.js","resources/yearn.svg","components/Wallet/Earn/Cards/YearnTesseractCard/useYearn.js","resources/tesseract.svg","components/Wallet/Earn/Cards/YearnTesseractCard/useTesseract.js","components/Wallet/Earn/Cards/YearnTesseractCard/YearnTesseractCard.js","resources/logo.png","components/Wallet/Earn/Cards/AmbireTokensCard/AmbireTokensCard.js","components/Wallet/Earn/Earn.js","lib/icons.js","components/Modals/EarnDetailsModal/EarnDetailsModal.js","hooks/useAmbireEarnDetails.js","components/Modals/AmbireEarnDetailsModal/AmbireEarnDetailsModal.js"],"names":["segments","value","Card","loading","unavailable","tokensItems","icon","details","customInfo","onTokenSelect","onValidate","moreDetails","isDepositsDisabled","useState","segment","setSegment","tokens","setTokens","token","setToken","amount","setAmount","disabled","setDisabled","showModal","useModals","currentToken","find","isAmountTooBig","parseFloat","utils","formatUnits","balanceRaw","decimals","buttonDisabled","getEquToken","useCallback","address","type","sortedTokenItems","useMemo","sort","a","b","balance","getMaxAmount","useEffect","filter","length","availableAmount","symbol","amountLabel","className","title","src","alt","searchable","label","defaultValue","items","onChange","map","small","onInput","button","onButtonClick","onClick","clear","v2Tokens","ethereum","baseTokenSymbol","baseTokenAddress","polygon","avalanche","AAVELendingPool","Interface","AAVELendingPoolAbi","RAY","lendingPoolAddress","AAVECard","networkId","tokensData","account","addRequest","addToast","useToasts","currentNetwork","useRef","isLoading","setLoading","setUnavailable","setTokensItems","setDetails","apr","networkDetails","networks","id","defaultTokens","network","t","name","img","getTokenIcon","getToken","addRequestTxn","txn","extraGas","chainId","tokenAddress","validate","functionData","bigNumberHexAmount","ethers","parseUnits","toString","toHexString","approveToken","Date","now","to","data","encodeFunctionData","e","console","error","message","loadTokensAPR","uniqueTokenAddresses","lendingPoolContract","Promise","all","getReserveData","catch","Error","aprs","Object","fromEntries","addr","i","liquidityRate","toFixed","loadPool","providerAddress","AAVELendingPoolProviders","provider","getProvider","lendingPoolProviderContract","Contract","getLendingPool","getReservesList","reserves","reservesAddresses","reserve","toLowerCase","supportedATokens","supportedTokens","withdrawTokens","includes","depositTokens","allTokens","Set","tokensAPR","arp","tokenImageUrl","current","invokeLoadPool","AAVE_ICON","EarnDetailsModal","description","v2VaultsAddresses","fantom","customVaultMetadata","displayName","displayIcon","useYearn","vaults","setVaults","getTokenFromPortfolio","toTokensItems","vault","yToken","apy","loadVaults","yearn","Yearn","get","v2Vaults","metadata","vaultAddress","net_apy","selectedToken","depositTokenItems","withdrawTokenItems","YEARN_ICON","POLYGON_SCAN_IMAGES","VAULTS","useTesseract","tToken","portfolioToken","fetchVaultAPY","ticker","fetch","response","json","status","result","tesseractVaultContract","TesseractVaultABI","tokenContract","ERC20ABI","v","href","target","rel","TESSERACT_ICON","BATCHER_ADDRESS","BATCHER_INTERFACE","AmbireBatcherABI","ERC20_INTERFACE","VaultInterface","YEARN_TESSERACT_VAULT_ABI","TESSERACT_DETAILS","YEARN_DETAILS","YearnTesseractCard","accountId","tesseract","item","parsedAmount","slice","indexOf","Number","bigNumberAmount","transferTx","batchCallTxn","allowance","lt","constants","MaxUint256","push","load","ADX_TOKEN_ADDRESS","ADX_STAKING_TOKEN_ADDRESS","ADX_STAKING_POOL_INTERFACE","AdexStakingPool","ADDR_ADX_SUPPLY_CONTROLLER","WALLET_TOKEN_ADDRESS","WALLET_STAKING_ADDRESS","ADX_LABEL","WALLET_LABEL","WALLET_STAKING_POOL_INTERFACE","WalletStakingPoolABI","ZERO","BigNumber","from","secondsInYear","PRECISION","msToDaysHours","ms","day","days","Math","floor","hours","attachMetaIfNeeded","req","shareValue","rewardsData","meta","rewards","walletTokenUsdPrice","walletUsdPrice","xWallet","APY","xWALLETAPY","AmbireTokensCard","setCustomInfo","stakingTokenContract","setStakingTokenContract","setShareValue","stakingTokenBalanceRaw","SetStakingTokenBalanceRaw","leaveLog","setLeaveLog","lockedRemainingTime","setLockedRemainingTime","stakingTokenAddress","stakingPoolInterface","stakingPoolAbi","tokenAbi","addresses","setAddresses","setSelectedToken","adxCurrentAPY","setAdxCurrentAPY","isUnbondModalVisible","setIsUnbondModalVisible","isUnstakeConfirmed","setIsUnstakeConfirmed","validateData","setValidateData","getLockDays","request","xWALLETAPYPercentage","walletToken","xWalletToken","adexToken","adexStakingToken","mul","div","x","y","onWithdraw","shares","unlocksAt","isAdxTokenSelected","walletValue","unbondToolTipLabelMdg","apyTooltipMsg","_tokenAddress","isMaxAmount","handleUnstake","balanceOf","xWalletAmount","walletABI","supplyController","supplyControllerABI","totalSupply","sharesTotalSupply","incentivePerSecond","poolTotalStaked","currentAPY","toNumber","getLogs","fromBlock","filters","LogLeave","LogWithdraw","leaveLogs","withdrawLogs","userWithdraws","log","interface","parseLog","args","maxTokens","receivedTokens","transactionHash","blockNumber","parsedLog","withdrawTx","event","isZero","unbondingCommitmentWorth","userLeaves","leavesPendingToUnlock","leavesReadyToWithdraw","leavePendingToUnlockOrReadyToWithdraw","remainingTime","init","UnbondModal","isVisible","hideModal","text","AMBIRE_ICON","AmbireEarnDetailsModal","tokenLabel","Earn","portfolio","selectedNetwork","selectedAcc","isCurrNetworkBalanceLoading","customIcons","zapperStorageTokenIcons","net","buttons","ZERO_ADDR","POOL_SHARES_TOKEN_DECIMALS_MUL","STAKING_POOL_EVENT_TYPES","ethProvider","useAmbireEarnDetails","getAdexToStakingTransfersLogs","useConstants","WALLET_ADDR","setIsLoading","getStats","xWalletContract","walletContract","fromBlockHardcoded","lockedShares","Transfer","LogRageLeave","balanceShares","allEnterWalletTransferLogs","rageLeaveLogs","sharesTokensTransfersInLogs","sharesTokensTransfersOutLogs","userShare","adexToStakingTransfersLogs","enterWalletTokensByTxHash","concat","reduce","byHash","sharesTokensTransfersIn","sharesTokensTransfersOut","txns","shareTokensEnterMintByHash","shareTokensTransfersInByTxHash","sharesTokensTransfersInFromExternal","values","userEnters","sharesMintEvent","adexTokenTransfersLog","parsedWalletLog","walletAmount","userRageLeaves","canWithdraw","leavesPendingToUnlockTotalMax","add","leavesPendingToUnlockTotalWallet","leavesReadyToWithdrawTotalMax","leavesReadyToWithdrawTotalWallet","latestLog","min","MAX_SAFE_INTEGER","allLeaveLogs","allWithdrawLogs","allRageLeaveLogs","allEnterSharesTokensTransfersInLogs","allEnters","walletTokenTransfersLog","allWithdraws","allRageLeaves","allLeaves","allLogs","withWalletAmount","events","forEach","transferLog","bestShareValue","totalSharesOutTransfers","totalSharesOutTransfersWalletValue","totalSharesInTransfers","totalSharesInTransfersWalletValue","depositsWalletTotal","rageLeavesWithdrawnWalletTotal","rageLeavesReceivedWalletTotal","withdrawsWalletTotal","totalLockedSharesCheck","eq","balanceSharesAvailable","sub","currentBalanceWalletAvailable","currentBalanceWallet","currentBalanceSharesWalletValue","hasInsufficentBalanceForUnbondCommitments","insufficientSharesAmoutForCurrentUnbonds","currentBalanceWalletAtCurrentShareValue","totalInTokenValue","totalOutTokenValue","totalRewards","hasActiveUnbondCommitments","stakings","stakingEvent","getBlock","timestamp","withTimestamp","stats","loaded","userDataLoaded","poolShare","allTimeRewards","totalDeposit","totalWithdraws","pendingToUnlock","readyToWithdraw","getData"],"mappings":"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","file":"static/js/23.f4d3b528.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/aave.58aec338.svg\";","import './Card.scss'\n\nimport { Select, Segments, NumberInput, Button, Loading } from 'components/common'\nimport { useEffect, useState, useMemo, useCallback } from 'react'\nimport { BsArrowDownSquare, BsArrowUpSquare } from 'react-icons/bs'\nimport { utils } from 'ethers'\nimport { useModals } from 'hooks'\nimport { MdOutlineInfo } from 'react-icons/md'\n\nconst segments = [{ value: 'Deposit' }, { value: 'Withdraw' }]\n\nconst Card = ({ loading, unavailable, tokensItems, icon, details, customInfo, onTokenSelect, onValidate, moreDetails, isDepositsDisabled = false }) => {\n    const [segment, setSegment] = useState(segments[0].value)\n    const [tokens, setTokens] = useState([])\n    const [token, setToken] = useState()\n    const [amount, setAmount] = useState(0)\n    const [disabled, setDisabled] = useState(true)\n    const { showModal } = useModals()\n    \n    const currentToken = tokens.find(({ value }) => value === token)\n    const isAmountTooBig = parseFloat(amount) > (currentToken && 'balanceRaw' in currentToken ? parseFloat(utils.formatUnits(currentToken.balanceRaw, currentToken.decimals)) : 0)\n\n    const buttonDisabled = disabled || amount === '' || parseFloat(amount) <= 0 || isAmountTooBig || (segment === segments[0].value && isDepositsDisabled) \n\n    // Sort tokens items by balance\n    const getEquToken = useCallback(token => tokensItems.find((({ address, type }) => address === token.address && (token.type === 'deposit' ? type === 'withdraw' : type === 'deposit'))), [tokensItems])\n    const sortedTokenItems = useMemo(() => [...tokensItems].sort((a, b) => (b?.balance + getEquToken(b)?.balance) - (a?.balance + getEquToken(a)?.balance)), [tokensItems, getEquToken])\n\n    const getMaxAmount = () => {\n        if (!currentToken) return 0;\n        const { balanceRaw, decimals } = currentToken\n        return utils.formatUnits(balanceRaw, decimals)\n    }\n\n    const setMaxAmount = () => setAmount(getMaxAmount(amount))\n\n    const isMaxAmount = () => {\n        return amount === getMaxAmount()\n    }\n\n    useEffect(() => {\n        if (segment === segments[0].value) setTokens(sortedTokenItems.filter(({ type }) => type === 'deposit'))\n        if (segment === segments[1].value) setTokens(sortedTokenItems.filter(({ type }) => type === 'withdraw'))\n    }, [segment, sortedTokenItems])\n\n    useEffect(() => setAmount(0), [token, segment])\n\n    useEffect(() => {\n        onTokenSelect(token)\n        setDisabled(!token || !tokens.length)\n    }, [token, onTokenSelect, tokens.length])\n\n    const availableAmount = !disabled ? `${getMaxAmount()} ${currentToken?.symbol}` : '0'\n\n    const amountLabel = <div className=\"amount-label\">Available Amount: <span title={availableAmount}>{availableAmount}</span></div>\n\n    const showMoreDetails = () => {\n        if (!!moreDetails) showModal(moreDetails)\n    }\n\n    return (\n        <div className=\"card\">\n            <div className=\"title\">\n                <img src={icon} alt=\"Icon\" />\n            </div>\n            {\n                loading ?\n                    <Loading/>\n                    :\n                    unavailable ?\n                        <div className=\"unavailable\">\n                            Unavailable on this Network\n                        </div>\n                        :\n                        <div className=\"content\">\n                            <Select\n                                searchable\n                                disabled={disabled}\n                                label=\"Choose Token\"\n                                defaultValue={token}\n                                items={tokens}\n                                onChange={({ value }) => setToken(value)}\n                            />\n                            {\n                                !disabled ?\n                                   (details.length > 1) ? \n                                        (<ul className=\"details\">\n                                            {\n                                                details.map(([type, value]) => (\n                                                    <li key={type}><b>{type}</b> {value}</li>\n                                                ))\n                                            }\n                                        </ul>) \n                                        :\n                                        <>{details[0]}</>\n                                :\n                                <div className=\"details-placeholder\">\n                                    <div/>\n                                    <div/>\n                                    <div/>\n                                </div>\n                            }\n                            <Segments small defaultValue={segment} segments={segments} onChange={(value) => setSegment(value)} />\n                            {\n                                customInfo ? \n                                    <div className=\"info\">\n                                        { customInfo }\n                                    </div>\n                                    :\n                                    <>\n                                        <NumberInput\n                                            disabled={!currentToken?.balance}\n                                            // The component does not take these props\n                                            // min=\"0\" \n                                            // max={currentToken?.balance}\n                                            value={amount}\n                                            label={amountLabel}\n                                            onInput={(value) => setAmount(value)}\n                                            button=\"MAX\"\n                                            onButtonClick={setMaxAmount}\n                                        />\n                                        <div className=\"separator\"></div>\n                                        <Button \n                                            disabled={buttonDisabled}\n                                            icon={segment === segments[0].value ? <BsArrowDownSquare/> : <BsArrowUpSquare/>}\n                                            onClick={() => onValidate(segment, token, amount, isMaxAmount())}\n                                        >\n                                                { segment }\n                                        </Button>\n                                    </>\n                            }\n                            <div className=\"separator\"></div>\n                            {!!moreDetails && \n                                <Button \n                                    clear\n                                    icon={ <MdOutlineInfo/> }\n                                    onClick={() => showMoreDetails()}\n                                >\n                                    See more details\n                                </Button>\n                            }\n                        </div>\n            }\n        </div>\n    )\n}\n\nexport default Card\n","const v2Tokens = {\n  ethereum: [\n    {\n      address:\"0x3Ed3B47Dd13EC9a98b44e6204A523E766B225811\",\n      symbol:\"aUSDT\",\n      baseTokenSymbol:\"USDT\",\n      baseTokenAddress:\"0xdAC17F958D2ee523a2206206994597C13D831ec7\"\n    },\n    {\n      address:\"0x9ff58f4fFB29fA2266Ab25e75e2A8b3503311656\",\n      symbol:\"aWBTC\",\n      baseTokenSymbol:\"WBTC\",\n      baseTokenAddress:\"0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599\"\n    },\n    {\n      address:\"0x030bA81f1c18d280636F32af80b9AAd02Cf0854e\",\n      symbol:\"aWETH\",\n      baseTokenSymbol:\"WETH\",\n      baseTokenAddress:\"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\"\n    },\n    {\n      address:\"0x5165d24277cD063F5ac44Efd447B27025e888f37\",\n      symbol:\"aYFI\",\n      baseTokenSymbol:\"YFI\",\n      baseTokenAddress:\"0x0bc529c00C6401aEF6D220BE8C6Ea1667F6Ad93e\"\n    },\n    {\n      address:\"0xDf7FF54aAcAcbFf42dfe29DD6144A69b629f8C9e\",\n      symbol:\"aZRX\",\n      baseTokenSymbol:\"ZRX\",\n      baseTokenAddress:\"0xE41d2489571d322189246DaFA5ebDe1F4699F498\"\n    },\n    {\n      address:\"0xB9D7CB55f463405CDfBe4E90a6D2Df01C2B92BF1\",\n      symbol:\"aUNI\",\n      baseTokenSymbol:\"UNI\",\n      baseTokenAddress:\"0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984\"\n    },\n    {\n      address:\"0xFFC97d72E13E01096502Cb8Eb52dEe56f74DAD7B\",\n      symbol:\"aAAVE\",\n      baseTokenSymbol:\"AAVE\",\n      baseTokenAddress:\"0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9\"\n    },\n    {\n      address:\"0x05Ec93c0365baAeAbF7AefFb0972ea7ECdD39CF1\",\n      symbol:\"aBAT\",\n      baseTokenSymbol:\"BAT\",\n      baseTokenAddress:\"0x0D8775F648430679A709E98d2b0Cb6250d2887EF\"\n    },\n    {\n      address:\"0xA361718326c15715591c299427c62086F69923D9\",\n      symbol:\"aBUSD\",\n      baseTokenSymbol:\"BUSD\",\n      baseTokenAddress:\"0x4Fabb145d64652a948d72533023f6E7A623C7C53\"\n    },\n    {\n      address:\"0x028171bCA77440897B824Ca71D1c56caC55b68A3\",\n      symbol:\"aDAI\",\n      baseTokenSymbol:\"DAI\",\n      baseTokenAddress:\"0x6B175474E89094C44Da98b954EedeAC495271d0F\"\n    },\n    {\n      address:\"0xaC6Df26a590F08dcC95D5a4705ae8abbc88509Ef\",\n      symbol:\"aENJ\",\n      baseTokenSymbol:\"ENJ\",\n      baseTokenAddress:\"0xF629cBd94d3791C9250152BD8dfBDF380E2a3B9c\"\n    },\n    {\n      address:\"0x39C6b3e42d6A679d7D776778Fe880BC9487C2EDA\",\n      symbol:\"aKNC\",\n      baseTokenSymbol:\"KNC\",\n      baseTokenAddress:\"0xdd974D5C2e2928deA5F71b9825b8b646686BD200\"\n    },\n    {\n      address:\"0xa06bC25B5805d5F8d82847D191Cb4Af5A3e873E0\",\n      symbol:\"aLINK\",\n      baseTokenSymbol:\"LINK\",\n      baseTokenAddress:\"0x514910771AF9Ca656af840dff83E8264EcF986CA\"\n    },\n    {\n      address:\"0xa685a61171bb30d4072B338c80Cb7b2c865c873E\",\n      symbol:\"aMANA\",\n      baseTokenSymbol:\"MANA\",\n      baseTokenAddress:\"0x0F5D2fB29fb7d3CFeE444a200298f468908cC942\"\n    },\n    {\n      address:\"0xc713e5E149D5D0715DcD1c156a020976e7E56B88\",\n      symbol:\"aMKR\",\n      baseTokenSymbol:\"MKR\",\n      baseTokenAddress:\"0x9f8F72aA9304c8B593d555F12eF6589cC3A579A2\"\n    },\n    {\n      address:\"0xCC12AbE4ff81c9378D670De1b57F8e0Dd228D77a\",\n      symbol:\"aREN\",\n      baseTokenSymbol:\"REN\",\n      baseTokenAddress:\"0x408e41876cCCDC0F92210600ef50372656052a38\"\n    },\n    {\n      address:\"0x35f6B052C598d933D69A4EEC4D04c73A191fE6c2\",\n      symbol:\"aSNX\",\n      baseTokenSymbol:\"SNX\",\n      baseTokenAddress:\"0xC011a73ee8576Fb46F5E1c5751cA3B9Fe0af2a6F\"\n    },\n    {\n      address:\"0x6C5024Cd4F8A59110119C56f8933403A539555EB\",\n      symbol:\"aSUSD\",\n      baseTokenSymbol:\"sUSD\",\n      baseTokenAddress:\"0x57Ab1ec28D129707052df4dF418D58a2D46d5f51\"\n    },\n    {\n      address:\"0x101cc05f4A51C0319f570d5E146a8C625198e636\",\n      symbol:\"aTUSD\",\n      baseTokenSymbol:\"TUSD\",\n      baseTokenAddress:\"0x0000000000085d4780B73119b644AE5ecd22b376\"\n    },\n    {\n      address:\"0xBcca60bB61934080951369a648Fb03DF4F96263C\",\n      symbol:\"aUSDC\",\n      baseTokenSymbol:\"USDC\",\n      baseTokenAddress:\"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\"\n    },\n    {\n      address:\"0x8dAE6Cb04688C62d939ed9B68d32Bc62e49970b1\",\n      symbol:\"aCRV\",\n      baseTokenSymbol:\"CRV\",\n      baseTokenAddress:\"0xD533a949740bb3306d119CC777fa900bA034cd52\"\n    },\n    {\n      address:\"0xD37EE7e4f452C6638c96536e68090De8cBcdb583\",\n      symbol:\"aGUSD\",\n      baseTokenSymbol:\"GUSD\",\n      baseTokenAddress:\"0x056Fd409E1d7A124BD7017459dFEa2F387b6d5Cd\"\n    },\n    {\n      address:\"0x272F97b7a56a387aE942350bBC7Df5700f8a4576\",\n      symbol:\"aBAL\",\n      baseTokenSymbol:\"BAL\",\n      baseTokenAddress:\"0xba100000625a3754423978a60c9317c58a424e3D\"\n    },\n    {\n      address:\"0xF256CC7847E919FAc9B808cC216cAc87CCF2f47a\",\n      symbol:\"aXSUSHI\",\n      baseTokenSymbol:\"xSUSHI\",\n      baseTokenAddress:\"0x8798249c2E607446EfB7Ad49eC89dD1865Ff4272\"\n    },\n    {\n      address:\"0x514cd6756CCBe28772d4Cb81bC3156BA9d1744aa\",\n      symbol:\"aRENFIL\",\n      baseTokenSymbol:\"renFIL\",\n      baseTokenAddress:\"0xD5147bc8e386d91Cc5DBE72099DAC6C9b99276F5\"\n    },\n    {\n      address:\"0xc9BC48c72154ef3e5425641a3c747242112a46AF\",\n      symbol:\"aRAI\",\n      baseTokenSymbol:\"RAI\",\n      baseTokenAddress:\"0x03ab458634910AaD20eF5f1C8ee96F1D6ac54919\"\n    },\n    {\n      address:\"0x1E6bb68Acec8fefBD87D192bE09bb274170a0548\",\n      symbol:\"aAMPL\",\n      baseTokenSymbol:\"AMPL\",\n      baseTokenAddress:\"0xD46bA6D942050d489DBd938a2C909A5d5039A161\"\n    },\n    {\n      address:\"0x2e8F4bdbE3d47d7d7DE490437AeA9915D930F1A3\",\n      symbol:\"aUSDP\",\n      baseTokenSymbol:\"USDP\",\n      baseTokenAddress:\"0x8E870D67F660D95d5be530380D0eC0bd388289E1\"\n    },\n    {\n      address:\"0x6F634c6135D2EBD550000ac92F494F9CB8183dAe\",\n      symbol:\"aDPI\",\n      baseTokenSymbol:\"DPI\",\n      baseTokenAddress:\"0x1494CA1F11D487c2bBe4543E90080AeBa4BA3C2b\"\n    },\n    {\n      address:\"0xd4937682df3C8aEF4FE912A96A74121C0829E664\",\n      symbol:\"aFRAX\",\n      baseTokenSymbol:\"FRAX\",\n      baseTokenAddress:\"0x853d955aCEf822Db058eb8505911ED77F175b99e\"\n    },\n    {\n      address:\"0x683923dB55Fead99A79Fa01A27EeC3cB19679cC3\",\n      symbol:\"aFEI\",\n      baseTokenSymbol:\"FEI\",\n      baseTokenAddress:\"0x956F47F50A910163D8BF957Cf5846D573E7f87CA\"\n    }\n  ],\n  polygon: [\n    {\n      address:\"0x27F8D03b3a2196956ED754baDc28D73be8830A6e\",\n      symbol:\"amDAI\",\n      baseTokenSymbol:\"DAI\",\n      baseTokenAddress:\"0x8f3Cf7ad23Cd3CaDbD9735AFf958023239c6A063\"\n    },\n    {\n      address:\"0x1a13F4Ca1d028320A707D99520AbFefca3998b7F\",\n      symbol:\"amUSDC\",\n      baseTokenSymbol:\"USDC\",\n      baseTokenAddress:\"0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174\"\n    },\n    {\n      address:\"0x60D55F02A771d515e077c9C2403a1ef324885CeC\",\n      symbol:\"amUSDT\",\n      baseTokenSymbol:\"USDT\",\n      baseTokenAddress:\"0xc2132D05D31c914a87C6611C10748AEb04B58e8F\"\n    },\n    {\n      address:\"0x5c2ed810328349100A66B82b78a1791B101C9D61\",\n      symbol:\"amWBTC\",\n      baseTokenSymbol:\"WBTC\",\n      baseTokenAddress:\"0x1BFD67037B42Cf73acF2047067bd4F2C47D9BfD6\"\n    },\n    {\n      address:\"0x28424507fefb6f7f8E9D3860F56504E4e5f5f390\",\n      symbol:\"amWETH\",\n      baseTokenSymbol:\"WETH\",\n      baseTokenAddress:\"0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619\"\n    },\n    {\n      address:\"0x8dF3aad3a84da6b69A4DA8aeC3eA40d9091B2Ac4\",\n      symbol:\"amWMATIC\",\n      baseTokenSymbol:\"WMATIC\",\n      baseTokenAddress:\"0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270\"\n    },\n    {\n      address:\"0x1d2a0E5EC8E5bBDCA5CB219e649B565d8e5c3360\",\n      symbol:\"amAAVE\",\n      baseTokenSymbol:\"AAVE\",\n      baseTokenAddress:\"0xD6DF932A45C0f255f85145f286eA0b292B21C90B\"\n    }\n  ],\n  avalanche: [\n    {\n      address: '0x53f7c5869a859F0AeC3D334ee8B4Cf01E3492f21',\n      symbol: 'avWETH',\n      baseTokenAddress: '0x49D5c2BdFfac6CE2BFdB6640F4F80f226bc10bAB',\n      baseTokenSymbol: 'WETH.e'\n    },\n    {\n      address: '0x47AFa96Cdc9fAb46904A55a6ad4bf6660B53c38a',\n      symbol: 'avDAI',\n      baseTokenAddress: '0xd586E7F844cEa2F87f50152665BCbc2C279D8d70',\n      baseTokenSymbol: 'DAI.e'\n    },\n    {\n      address: '0xc7198437980c041c805A1EDcbA50c1Ce5db95118',\n      symbol: 'avUSDT',\n      baseTokenAddress: '0x532E6537FEA298397212F09A61e03311686f548e',\n      baseTokenSymbol: 'USDT.e'\n    },\n    {\n      address: '0x46A51127C3ce23fb7AB1DE06226147F446e4a857',\n      symbol: 'avUSDC',\n      baseTokenAddress: '0xA7D7079b0FEaD91F3e65f86E8915Cb59c1a4C664',\n      baseTokenSymbol: 'USDC.e'\n    },\n    {\n      address: '0xD45B7c061016102f9FA220502908f2c0f1add1D7',\n      symbol: 'avAAVE',\n      baseTokenAddress: '0x63a72806098Bd3D9520cC43356dD78afe5D386D9',\n      baseTokenSymbol: 'AAVE.e'\n    },\n    {\n      address: '0x686bEF2417b6Dc32C50a3cBfbCC3bb60E1e9a15D',\n      symbol: 'avWBTC',\n      baseTokenAddress: '0x50b7545627a5162F82A992c33b87aDc75187B218',\n      baseTokenSymbol: 'WBTC.e'\n    },\n    {\n      address: '0xDFE521292EcE2A4f44242efBcD66Bc594CA9714B',\n      symbol: 'avWAVAX',\n      baseTokenAddress: '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7',\n      baseTokenSymbol: 'WAVAX.e'\n    }\n    \n  ]\n}\n\nexport default v2Tokens","import { getTokenIcon } from 'lib/icons'\nimport v2Tokens from './v2Tokens'\n\nlet tokens = {\n    ethereum: v2Tokens.ethereum,\n    polygon: v2Tokens.polygon,\n    avalanche: v2Tokens.avalanche,\n    'binance-smart-chain': []\n}\n\nconst getDefaultTokensItems = network => {\n    if (!tokens[network]) return []\n    return [\n        ...tokens[network].map(t => ({\n            address: t.baseTokenAddress,\n            baseTokenAddress: t.baseTokenAddress,\n            symbol: t.baseTokenSymbol,\n            name: t.baseTokenSymbol,\n            img: getTokenIcon(network, t.baseTokenAddress),\n            balance: 0,\n            balanceRaw: '0',\n            type: 'deposit'\n        })) || [],\n        ...tokens[network].map(t => ({\n            address: t.address,\n            baseTokenAddress: t.baseTokenAddress,\n            symbol: t.symbol,\n            name: t.symbol,\n            img: getTokenIcon(network, t.baseTokenAddress),\n            balance: 0,\n            balanceRaw: '0',\n            type: 'withdraw'\n        })) || []\n    ]\n}\n\nexport { getDefaultTokensItems }\n","import { ethers } from 'ethers'\nimport { Interface } from 'ethers/lib/utils'\nimport { useCallback, useEffect, useMemo, useRef, useState } from 'react'\nimport { useToasts } from 'hooks/toasts'\nimport AAVELendingPoolAbi from 'ambire-common/src/constants/abis/AAVELendingPoolAbi'\nimport AAVELendingPoolProviders from 'ambire-common/src/constants/AAVELendingPoolProviders'\nimport networks from 'consts/networks'\nimport { getProvider } from 'lib/provider'\nimport { ToolTip } from \"components/common\"\nimport AAVE_ICON from 'resources/aave.svg'\nimport Card from 'components/Wallet/Earn/Card/Card'\nimport { getDefaultTokensItems } from './defaultTokens'\nimport approveToken from 'ambire-common/src/services/approveToken'\nimport EarnDetailsModal from 'components/Modals/EarnDetailsModal/EarnDetailsModal'\nimport { MdInfo } from \"react-icons/md\"\n\nconst AAVELendingPool = new Interface(AAVELendingPoolAbi)\nconst RAY = 10**27\nlet lendingPoolAddress = null\n\nconst AAVECard = ({ networkId, tokens: tokensData, account, addRequest }) => {\n    const [tokens] = useState(tokensData)\n    const { addToast } = useToasts()\n\n    const currentNetwork = useRef()\n    const [isLoading, setLoading] = useState(true)\n    const [unavailable, setUnavailable] = useState(false)\n    const [tokensItems, setTokensItems] = useState([])\n    const [details, setDetails] = useState([])\n\n    const onTokenSelect = useCallback(async (value) => {\n        const token = tokensItems.find(({ address }) => address === value)\n        if (token) {\n            setDetails([\n                [\n                    <>\n                        <ToolTip label=\"Annual Percentage Rate\">\n                            <div>APR&nbsp;<MdInfo/></div>\n                        </ToolTip>\n                    </>,\n                    `${token.apr}%`\n                ],\n                ['Lock', 'No Lock'],\n                ['Type', 'Variable Rate'],\n            ])\n        }\n    }, [tokensItems])\n\n    const networkDetails = networks.find(({ id }) => id === networkId)\n    const defaultTokens = useMemo(() => getDefaultTokensItems(networkDetails.id), [networkDetails.id])\n    const getToken = (type, address) => tokensItems.filter(token => token.type === type).find(token => token.address === address)\n    const addRequestTxn = (id, txn, extraGas = 0) => addRequest({ id, type: 'eth_sendTransaction', chainId: networkDetails.chainId, account, txn, extraGas })\n\n    const onValidate = async (type, tokenAddress, amount) => {\n        const validate = async (type, functionData) => {\n            const token = getToken(type, tokenAddress)\n            const bigNumberHexAmount = ethers.utils.parseUnits(amount.toString(), token.decimals).toHexString()\n            if (type === 'deposit') await approveToken('Aave Pool', networkDetails.id, account, lendingPoolAddress, tokenAddress, addRequestTxn, addToast)\n\n            try {\n                addRequestTxn(`aave_pool_${type}_${Date.now()}`, {\n                    to: lendingPoolAddress,\n                    value: '0x0',\n                    data: AAVELendingPool.encodeFunctionData(type, [tokenAddress, bigNumberHexAmount, ...functionData])\n                }, 60000)\n            } catch(e) {\n                console.error(e)\n                addToast(`Aave ${type} Error: ${e.message || e}`, { error: true })\n            }\n        }\n        if (type === 'Deposit') {\n            validate('deposit', [account, 0])\n        }\n        else if (type === 'Withdraw') {\n            validate('withdraw', [account])\n        }\n    }\n\n    const loadTokensAPR = useCallback(async(uniqueTokenAddresses, lendingPoolContract) => {\n        const aprs = await Promise.all(uniqueTokenAddresses.map(address => lendingPoolContract.getReserveData(address).catch(e => { throw Error(e) })))\n        return Object.fromEntries(uniqueTokenAddresses.map((addr, i) => {\n            const { liquidityRate } = aprs[i]\n            const apr = ((liquidityRate / RAY) * 100).toFixed(2)\n            return ([addr, apr])\n        }))\n    }, [])\n \n    const loadPool = useCallback(async () => {\n        const providerAddress = AAVELendingPoolProviders[networkDetails.id]\n        if (!providerAddress) {\n            setLoading(false)\n            setUnavailable(true)\n            return\n        }\n\n        try {\n            const provider = getProvider(networkDetails.id)\n            const lendingPoolProviderContract = new ethers.Contract(providerAddress, AAVELendingPool, provider)\n            lendingPoolAddress = await lendingPoolProviderContract.getLendingPool()\n\n            const lendingPoolContract = new ethers.Contract(lendingPoolAddress, AAVELendingPool, provider)\n            const reserves = await lendingPoolContract.getReservesList()\n            const reservesAddresses = reserves.map(reserve => reserve.toLowerCase())\n\n            const supportedATokens = defaultTokens.filter(t => t.type === 'withdraw').map(t => t.address.toLowerCase())\n\n            const supportedTokens = defaultTokens.filter(t => t.type === 'deposit').map(t => t.address.toLowerCase())\n\n            const withdrawTokens = tokens.filter(({ address }) => supportedATokens.includes(address.toLowerCase())).map(token => ({\n                ...token,\n                address: defaultTokens.find(t => t.type === 'withdraw' && t.address.toLowerCase() === token.address.toLowerCase())?.baseTokenAddress,\n                type: 'withdraw'\n            })).filter(token => token).sort((a, b) => b.balance - a.balance)\n\n            const depositTokens = tokens.filter(({ address }) => supportedTokens.includes(address.toLowerCase())).filter(t => reservesAddresses.includes(t.address)).map(token => ({\n                ...token,\n                type: 'deposit'\n            })).filter(token => token).sort((a, b) => b.balance - a.balance)\n\n            const allTokens = [\n                ...withdrawTokens,\n                ...depositTokens,\n                ...defaultTokens.filter(({ type, address }) => type === 'deposit' && !depositTokens.map(({ address }) => address.toLowerCase()).includes(address.toLowerCase())),\n                ...defaultTokens.filter(({ type, baseTokenAddress }) => type === 'withdraw' && !withdrawTokens.map(({ address }) => address.toLowerCase()).includes(baseTokenAddress.toLowerCase()))\n            ]\n\n            const uniqueTokenAddresses = [...new Set(allTokens.map(({ address }) => address))]\n\n\n            const tokensAPR = await loadTokensAPR(uniqueTokenAddresses, lendingPoolContract)\n            const tokensItems = allTokens.map(token => {\n                const arp = tokensAPR[token.address] === '0.00' && tokensAPR[token.baseTokenAddress]\n                ? tokensAPR[token.baseTokenAddress]\n                : tokensAPR[token.address]\n                return {\n                    ...token,\n                    apr: arp,\n                    icon: token.img || token.tokenImageUrl,\n                    label: `${token.symbol} (${arp}% APR)`,\n                    value: token.address\n                }\n            })\n            // Prevent race conditions\n            if (currentNetwork.current !== networkDetails.id) return\n\n            setTokensItems(tokensItems)\n            setLoading(false)\n            setUnavailable(false)\n        } catch(e) {\n            console.error(e);\n            addToast(`Aave load pool error: ${e.message || e}`, { error: true })\n        }\n    }, [networkDetails.id, defaultTokens, tokens, loadTokensAPR, addToast])\n\n    useEffect(() => {\n        const invokeLoadPool = async() => await loadPool()\n        invokeLoadPool()\n\n        return () => {\n            setTokensItems([])\n            setLoading(false)\n            setUnavailable(false)\n        }\n    }, [loadPool, unavailable])\n    useEffect(() => {\n        currentNetwork.current = networkId\n        setLoading(true)\n    }, [networkId])\n\n    return (\n        <Card\n            loading={isLoading}\n            unavailable={unavailable}\n            icon={AAVE_ICON} details={details}\n            tokensItems={tokensItems}\n            onTokenSelect={onTokenSelect}\n            onValidate={onValidate}\n            moreDetails={<EarnDetailsModal\n                title={'What is Aave'}\n                description={'Aave is an open source and non-custodial DeFi protocol for earning interest on deposits and borrowing assets. Depositors provide liquidity to the market to earn a passive income, while borrowers are able to borrow in an overcollateralized (perpetually) or undercollateralized (one-block liquidity) fashion.'}/>}\n            />\n    )\n}\n\nexport default AAVECard","export default __webpack_public_path__ + \"static/media/yearn.ac5ab573.svg\";","import { useCallback, useEffect, useState } from 'react'\nimport { Yearn } from '@yfi/sdk'\nimport { MdInfo } from \"react-icons/md\"\nimport { ToolTip } from \"components/common\"\n\nimport YEARN_ICON from 'resources/yearn.svg'\n\nconst v2VaultsAddresses = { ethereum: [\n    '0xdA816459F1AB5631232FE5e97a05BBBb94970c95',\n    '0xa354F35829Ae975e850e23e9615b11Da1B3dC4DE',\n    '0xdb25cA703181E7484a155DD612b06f57E12Be5F0',\n    '0xA696a63cc78DfFa1a63E9E50587C197387FF6C7E',\n    '0x7Da96a3891Add058AdA2E826306D812C638D87a7',\n    '0xB8C3B7A2A618C552C23B1E4701109a9E756Bab67',\n    '0xe11ba472F74869176652C35D30dB89854b5ae84D',\n    '0xa258C4606Ca8206D8aA700cE2143D7db854D168c',\n    '0xFBEB78a723b8087fD2ea7Ef1afEc93d35E8Bed42',\n    '0x6d765CbE5bC922694afE112C140b8878b9FB0390',\n    '0xFD0877d9095789cAF24c98F7CCe092fa8E120775',\n    '0xd9788f3931Ede4D5018184E198699dC6d66C1915',\n], fantom: [\n    '0x0DEC85e74A92c52b7F708c4B10207D9560CEFaf0',\n    '0x695A4a6e5888934828Cb97A3a7ADbfc71A70922D',\n    '0x935601c5694f23491921c14aA235c65c2ea2c4DE',\n    '0x28F2fB6730d5dbeFc4FF9eB375Bbf33BcB36e774',\n    '0x8b8b4018F1d1e28217A1c7432E729e58e1828D59',\n    '0x2C850cceD00ce2b14AA9D658b7Cad5dF659493Db',\n    '0xDf262B43bea0ACd0dD5832cf2422e0c9b2C539dc',\n    '0x637eC617c86D24E421328e6CAEa1d92114892439',\n    '0xdC9D3bB76Df8bE1e9Ca68C7BF32293a86C829D81',\n    '0xd025b85db175EF1b175Af223BD37f330dB277786',\n    '0xEF0210eB96c7EB36AF8ed1c20306462764935607',\n    '0x27a5ce447f4E581aE69061E90521da4B5b298818',\n    '0x42639b59cf9db5339C1C5cfB5738D0ba4F828F94',\n    '0x148c05caf1Bb09B5670f00D511718f733C54bC4c',\n    '0x3B9bc1f596844Ca8a30A7710Aac7155968Db7d13',\n    '0x83a5Af7540E919dE74cf2D6d5F40e47f11D3E8d1',\n    '0x0A0b23D9786963DE69CB2447dC125c49929419d8',\n    '0x8A807b5742587024783Df3Ed2F149725C197b5eE',\n    '0xD0D1f041F93c0fF1091457618E529610C67A76de',\n    '0x24BC86a808D45f0AAd8008bd3ac2D9356007e833',\n    '0x357ca46da26E1EefC195287ce9D838A6D5023ef3',\n    '0xfF8bb7261E4D51678cB403092Ae219bbEC52aa51',\n    '0xF137D22d7B23eeB1950B3e19d1f578c053ed9715',\n    '0x7ff6fe5bDa1b26fa46880dF8AF844326DAd50d13',\n    '0x0446acaB3e0242fCf33Aa526f1c95a88068d5042',\n    '0x6EEb47BBcDf0059E5F1D6Ee844Ba793D5401bF18',\n    '0xCe2Fc0bDc18BD6a4d9A725791A3DEe33F3a23BB7',\n    '0x9DF9418837281faC4C4c1166f55D35F2799A9107',\n    '0xd817A100AB8A29fE3DBd925c2EB489D67F758DA9',\n    '0x0ed5C4effED69B39C86a8D806462d709Fb96A9E4',\n    '0xD3c19eB022CAC706c898D60d756bf1535d605e1d',\n    '0x35B51a621d78609dE7Cf25BC4e0682c7DEA38799',\n    '0x1b48641D8251c3E84ecbe3f2bD76B3701401906D',\n    '0x36A1E9dF5EfdAB9694de5bFe25A9ACc23F66BCB7',\n    '0xf2d323621785A066E64282d2B407eAc79cC04966',\n    '0x1e0F7D116ffB998EeC879B96698222D1Ee8d87CB',\n    '0xde39F0148496D42cd4e16563463fA5C6504CaA00',\n    '0x0fBbf9848D969776a5Eb842EdAfAf29ef4467698',\n    '0xA36c91E38bf24E9F2df358E47D4134a8894C6a4c',\n    '0xCbCaF8cB8cbeAFA927ECEE0c5C56560F83E9B7D9',\n    '0xcF3b91D83cD5FE15269E6461098fDa7d69138570'\t\n] }\n\nconst customVaultMetadata = {\n    '0xa258C4606Ca8206D8aA700cE2143D7db854D168c': {\n        displayName: 'WETH',\n        displayIcon: 'https://etherscan.io/token/images/weth_28.png'\n    }\n}\n\nconst useYearn = ({ tokens, networkDetails, provider, currentNetwork }) => {\n    const [tokensItems, setTokensItems] = useState([])\n    const [details, setDetails] = useState([])\n    const [vaults, setVaults] = useState([])\n\n    const getTokenFromPortfolio = useCallback(tokenAddress => tokens.find(({ address }) => address.toLowerCase() === tokenAddress.toLowerCase()) || {}, [tokens])\n\n    const toTokensItems = useCallback((type, vaults) => {\n        return vaults.map(vault => {\n            let token \n            if (type === 'deposit') {\n               token = vault.token\n            } else {\n                token = vault.yToken\n            }\n            const { apy } = vault\n            const { address, symbol, decimals } = token\n            const { balance, balanceRaw } = getTokenFromPortfolio(address)\n            return {\n                ...vault,\n                type,\n                label: `${symbol} (${apy}% APY)`,\n                symbol,\n                decimals,\n                tokenAddress: address,\n                balance: balance || 0,\n                balanceRaw: balanceRaw || '0',\n            }\n        })\n    }, [getTokenFromPortfolio])\n\n    const loadVaults = useCallback(async () => {\n        const yearn = new Yearn(networkDetails.chainId, { provider })\n\n        const v2Vaults = await yearn.vaults.get(v2VaultsAddresses[networkDetails.id])\n        const vaults = v2Vaults.map(({ address, metadata, symbol, token, decimals }) => {\n            const { apy, displayName, displayIcon} = {\n                ...metadata,\n                ...customVaultMetadata[address] || {}\n            }\n            const formattedAPY = (apy?.net_apy * 100).toFixed(2) || 0\n\n            return {\n                vaultAddress: address,\n                apy: formattedAPY,\n                icon: displayIcon,\n                value: address,\n                token: {\n                    address: token,\n                    symbol: displayName,\n                    decimals\n                },\n                yToken: {\n                    address,\n                    symbol,\n                    decimals\n                }\n            }\n        })\n\n\n\n        // Prevent race conditions\n        if (currentNetwork.current !== networkDetails.id) return\n        setVaults(vaults)\n    }, [provider, networkDetails, currentNetwork])\n\n    const onTokenSelect = useCallback(address => {\n        const selectedToken = tokensItems.find(t => t.tokenAddress === address)\n        if (selectedToken) setDetails([\n            [\n                <>\n                    <ToolTip label=\"Annual Percentage Yield\">\n                        <div>APY&nbsp;<MdInfo/></div>\n                    </ToolTip>\n                </>,\n             `${selectedToken.apy}%`],\n            ['Lock', 'No Lock'],\n            ['Type', 'Variable Rate'],\n        ])\n    }, [tokensItems])\n\n    useEffect(() => {\n        const depositTokenItems = toTokensItems('deposit', vaults)\n        const withdrawTokenItems = toTokensItems('withdraw', vaults)\n        \n        setTokensItems([\n            ...depositTokenItems,\n            ...withdrawTokenItems\n        ])\n        \n        return () => setTokensItems([])\n    }, [vaults, toTokensItems])\n\n    return {\n        icon: YEARN_ICON,\n        loadVaults,\n        tokensItems,\n        details,\n        onTokenSelect\n    }\n}\n\nexport default useYearn\n","export default __webpack_public_path__ + \"static/media/tesseract.3da02a6d.svg\";","import { useCallback, useEffect, useState } from 'react'\nimport { Contract } from 'ethers'\nimport ERC20ABI from 'adex-protocol-eth/abi/ERC20.json'\nimport TesseractVaultABI from 'ambire-common/src/constants/abis/YearnTesseractVaultABI'\nimport { useToasts } from 'hooks/toasts'\n// import { MdInfo } from \"react-icons/md\"\n// import { ToolTip } from \"components/common\"\n\nimport TESSERACT_ICON from 'resources/tesseract.svg'\n\nconst POLYGON_SCAN_IMAGES = 'https://polygonscan.com/token/images'\nconst VAULTS = [\n    ['tvUSDC', '0x57bDbb788d0F39aEAbe66774436c19196653C3F2', `${POLYGON_SCAN_IMAGES}/centre-usdc_32.png`],\n    ['tvDAI', '0x4c8C6379b7cd039C892ab179846CD30a1A52b125', `${POLYGON_SCAN_IMAGES}/mcdDai_32.png`],\n    ['tvWBTC', '0x6962785c731e812073948a1f5E181cf83274D7c6', `${POLYGON_SCAN_IMAGES}/wBTC_32.png`],\n    ['tvWETH', '0x3d44F03a04b08863cc8825384f834dfb97466b9B', `${POLYGON_SCAN_IMAGES}/wETH_32.png`],\n    ['tvWMATIC', '0xE11678341625cD88Bb25544e39B2c62CeDcC83f1', `${POLYGON_SCAN_IMAGES}/wMatic_32.png`],\n]\n\nconst TESR_API_ENDPOINT = 'https://prom.tesr.finance/api/v1'\n\nconst useTesseract = ({ tokens, provider, networkId, currentNetwork }) => {\n    const { addToast } = useToasts()\n\n    const [vaults, setVaults] = useState([])\n    const [tokensItems, setTokensItems] = useState([])\n    const [details, setDetails] = useState([])\n\n    const toTokensItems = useCallback((type, vaults) => {\n        return vaults.map(({ vaultAddress, token, tToken, icon, apy }) => {\n            const { address, symbol, decimals } = type === 'deposit' ? token : tToken\n            const portfolioToken = tokens.find(t => t.address.toLowerCase() === address.toLowerCase())\n            return {\n                type,\n                vaultAddress,\n                tokenAddress: address,\n                symbol,\n                decimals,\n                icon,\n                apy,\n                label: `${symbol} (${apy}% APY)`,\n                value: vaultAddress,\n                balance: portfolioToken ? portfolioToken.balance : 0,\n                balanceRaw: portfolioToken ? portfolioToken.balanceRaw : '0',\n            }\n        })\n    }, [tokens])\n\n    const fetchVaultAPY = useCallback(async ticker => {\n        try {\n            const response = await fetch(`${TESR_API_ENDPOINT}/query?query=deriv(price{network=\"matic\",ticker=\"${ticker}\",version=\"0.4.3.1\"}[10d])*60*60*24*365`)\n            const { data, status } = await response.json()\n            if (!data || status !== 'success' || !data.result.length) return 0\n            return (data.result[0]?.value[1] * 100).toFixed(2)\n        } catch(e) {\n            console.error(e)\n            addToast(`Failed to fetch ${ticker} Vault APY`, { error: true })\n        }\n    }, [addToast])\n\n    const loadVaults = useCallback(async () => {\n        const vaults = (await Promise.all(VAULTS.map(async ([ticker, address, icon]) => {\n            try {\n                const tesseractVaultContract = new Contract(address, TesseractVaultABI, provider)\n                const tokenAddress = await tesseractVaultContract.token()\n                \n                const tokenContract = new Contract(tokenAddress, ERC20ABI, provider)\n                const [symbol, decimals] = await Promise.all([\n                    await tokenContract.symbol(),\n                    await tokenContract.decimals()\n                ])\n\n                const apy = await fetchVaultAPY(ticker)\n\n                return {\n                    vaultAddress: address,\n                    token: {\n                        address: tokenAddress,\n                        decimals,\n                        symbol,\n                    },\n                    tToken: {\n                        address,\n                        decimals,\n                        symbol: `tv${symbol}`,\n                    },\n                    icon,\n                    apy\n                }\n            } catch(e) {\n                console.error(e);\n                addToast('Fetch Tesseract Vaults: ' + e.message || e, { error: true })\n                return null\n            }\n        }))).filter(v => v)\n\n        if (networkId !== currentNetwork.current) return\n        setVaults(vaults);\n    }, [networkId, currentNetwork, fetchVaultAPY, provider, addToast])\n\n    const onTokenSelect = useCallback(address => {\n        const selectedToken = tokensItems.find(t => t.tokenAddress === address)\n        if (selectedToken) setDetails([\n            <div className='warning-msg'>\n                Tesseract is closing. You will still be able to withdraw your funds indefinitely, but there will be no more earning strategies.&nbsp;\n                <a \n                    href='https://medium.com/@tesseract_fi/the-omega-of-tesseract-finance-36d6a75d7310' \n                    target=\"_blank\"\n                    rel=\"noreferrer noopener\">\n                    Learn more.\n               </a>\n            </div>\n        ])\n    }, [tokensItems])\n\n    useEffect(() => {\n        const depositTokenItems = toTokensItems('deposit', vaults)\n        const withdrawTokenItems = toTokensItems('withdraw', vaults)\n\n        setTokensItems([\n            ...depositTokenItems,\n            ...withdrawTokenItems\n        ])\n        \n        return () => setTokensItems([])\n    }, [vaults, toTokensItems])\n\n    return {\n        icon: TESSERACT_ICON,\n        loadVaults,\n        tokensItems,\n        details,\n        onTokenSelect\n    }\n}\n\nexport default useTesseract","import Card from 'components/Wallet/Earn/Card/Card'\n\nimport { useEffect, useState, useMemo, useRef } from 'react'\nimport { Interface, parseUnits } from 'ethers/lib/utils'\nimport networks from 'consts/networks'\nimport YEARN_TESSERACT_VAULT_ABI from 'ambire-common/src/constants/abis/YearnTesseractVaultABI'\nimport useYearn from './useYearn'\nimport useTesseract from './useTesseract'\nimport { useToasts } from 'hooks/toasts'\nimport { getProvider } from 'lib/provider'\nimport AmbireBatcherABI from 'ambire-common/src/constants/abis/AmbireBatcherABI.json'\nimport ERC20ABI from 'adex-protocol-eth/abi/ERC20.json'\nimport { constants, Contract } from 'ethers'\nimport EarnDetailsModal from 'components/Modals/EarnDetailsModal/EarnDetailsModal'\n\nconst BATCHER_ADDRESS = '0x460fad03099f67391d84c9cc0ea7aa2457969cea'\nconst BATCHER_INTERFACE = new Interface(AmbireBatcherABI)\nconst ERC20_INTERFACE = new Interface(ERC20ABI)\nconst VaultInterface = new Interface(YEARN_TESSERACT_VAULT_ABI)\nconst TESSERACT_DETAILS = {\n    title: 'What is Tesseract Finance',\n    description: 'Tesseract Finance is a DeFi yield farming protocol that brings yearn.finance to selected EVM compatible chains. Tesseract Finance enables lending and borrowing opportunities on the Polygon network.'\n}\n\nconst YEARN_DETAILS = {\n    title: 'What is Yearn.finance',\n    description: 'Yearn.finance is a suite of products in DeFi that provides yield generation, lending aggregation, and more on the blockchain. The protocol is maintained by various independent developers and is governed by YFI holders.'\n}\n\nconst YearnTesseractCard = ({ networkId, accountId, tokens, addRequest }) => {\n    const { addToast } = useToasts()\n\n    const currentNetwork = useRef()\n    const [loading, setLoading] = useState([])\n\n    const unavailable = !(networkId === 'ethereum' || networkId === 'polygon' || networkId === 'fantom')\n    const name = networkId === 'ethereum' ? 'Yearn' : 'Tesseract'\n    const networkDetails = networks.find(({ id }) => id === networkId)\n    const addRequestTxn = (id, txn, extraGas = 0) => addRequest({ id, type: 'eth_sendTransaction', chainId: networkDetails.chainId, account: accountId, txn, extraGas })\n    const provider = useMemo(() => getProvider(networkDetails.id), [networkDetails.id])\n    const isDepositsDisabled = (networkId === 'polygon') ? true : false\n\n    const yearn = useYearn({\n        tokens,\n        provider,\n        networkDetails,\n        currentNetwork\n    })\n\n    const tesseract = useTesseract({\n        tokens,\n        provider,\n        networkId,\n        currentNetwork\n    })\n\n    const {\n        icon,\n        loadVaults,\n        tokensItems,\n        details,\n        onTokenSelect\n    } = useMemo(() => networkId === 'polygon' ? tesseract : yearn, [networkId, yearn, tesseract])\n\n    const moreDetails = {\n        title: networkId === 'polygon' ? TESSERACT_DETAILS.title : YEARN_DETAILS.title,\n        description: networkId === 'polygon' ? TESSERACT_DETAILS.description : YEARN_DETAILS.description\n    }\n\n    const onValidate = async (type, value, amount) => {\n        const item = tokensItems.find(t => t.type === type.toLowerCase() && t.value === value)\n        if (!item) return\n\n        const { tokenAddress, vaultAddress, decimals } = item\n        const parsedAmount = amount.slice(0, amount.indexOf('.') + Number(decimals) + 1);\n        const bigNumberAmount = parseUnits(parsedAmount, decimals)\n\n        // Transfer funds to batcher\n        let transferTx = {\n            to: tokenAddress,\n            value: '0x0',\n            data: ERC20_INTERFACE.encodeFunctionData('transfer', [BATCHER_ADDRESS, bigNumberAmount.toHexString()]),\n        }\n\n        if (Number(tokenAddress) === 0) {\n            transferTx = {\n                to: BATCHER_ADDRESS,\n                value: bigNumberAmount.toHexString(),\n                data: '0x'\n            }\n        }\n\n        addRequestTxn(`batcher_call_transfer_funds_${Date.now()}`, transferTx)\n\n        if (type === 'Deposit') {\n            try {\n                // Build approve and deposit tx for batcher\n                let batchCallTxn = []\n\n                const provider = getProvider(networkId)\n                const tokenContract = new Contract(tokenAddress, ERC20_INTERFACE, provider)\n                const allowance = await tokenContract.allowance(BATCHER_ADDRESS, vaultAddress)\n\n                if (allowance.lt(constants.MaxUint256)) {\n                    batchCallTxn.push({\n                        to: tokenAddress,\n                        value: '0x0',\n                        data: ERC20_INTERFACE.encodeFunctionData('approve', [vaultAddress, constants.MaxUint256])\n                    })\n                }\n\n                batchCallTxn.push({\n                    to: vaultAddress,\n                    value: '0x0',\n                    data: VaultInterface.encodeFunctionData('deposit', [bigNumberAmount.toHexString(), accountId])\n                })\n            \n                addRequestTxn(`batcher_call_vault_deposit_${Date.now()}`, {\n                    to: BATCHER_ADDRESS,\n                    value: '0x0',\n                    data: BATCHER_INTERFACE.encodeFunctionData('batchCall', [batchCallTxn])\n                })\n            } catch(e) {\n                console.error(e)\n                addToast(`${name} Deposit Error: ${e.message || e}`, { error: true })\n            }\n        } else if (type === 'Withdraw') {\n            try {\n                const batchCallTxn = [{\n                    to: vaultAddress,\n                    value: '0x0',\n                    data: VaultInterface.encodeFunctionData('withdraw', [bigNumberAmount.toHexString(), accountId])\n                }]\n\n                addRequestTxn(`batcher_call_vault_withdraw_${Date.now()}`, {\n                    to: BATCHER_ADDRESS,\n                    value: '0x0',\n                    data: BATCHER_INTERFACE.encodeFunctionData('batchCall', [batchCallTxn])\n                })\n            } catch(e) {\n                console.error(e)\n                addToast(`${name} Withdraw Error: ${e.message || e}`, { error: true })\n            }\n        }\n    }\n\n    useEffect(() => {\n        if (unavailable) {\n\t\tsetLoading(false)\n\t\treturn\n\t}\n        async function load() {\n            await loadVaults()\n            setLoading(false)\n        }\n        load()\n    }, [unavailable, loadVaults])\n\n    useEffect(() => {\n        currentNetwork.current = networkId\n        if (!unavailable) setLoading(true)\n    }, [networkId, unavailable])\n\n    return (\n        <Card\n            isDepositsDisabled={isDepositsDisabled}\n            loading={loading}\n            icon={icon}\n            unavailable={unavailable}\n            tokensItems={tokensItems}\n            details={details}\n            onTokenSelect={onTokenSelect}\n            onValidate={onValidate}\n            moreDetails={<EarnDetailsModal \n                title={moreDetails.title}\n                description={moreDetails.description}\n            />}\n        />\n    )\n}\n\nexport default YearnTesseractCard\n","export default __webpack_public_path__ + \"static/media/logo.ab51d124.png\";","import { useState, useCallback, useMemo, useEffect } from \"react\"\nimport Card from 'components/Wallet/Earn/Card/Card'\n\nimport AMBIRE_ICON from 'resources/logo.png'\nimport { MdInfo } from \"react-icons/md\"\nimport { ToolTip, Button } from \"components/common\"\nimport { BigNumber, constants, Contract, utils } from \"ethers\"\nimport WalletStakingPoolABI from 'ambire-common/src/constants/abis/WalletStakingPoolABI.json'\nimport AdexStakingPool from 'ambire-common/src/constants/AdexStakingPool.json'\nimport supplyControllerABI from 'ambire-common/src/constants/ADXSupplyController.json'\nimport { Interface, parseUnits, formatUnits } from \"ethers/lib/utils\"\nimport { getProvider } from 'lib/provider'\nimport ERC20ABI from 'adex-protocol-eth/abi/ERC20.json'\nimport networks from 'consts/networks'\nimport AmbireEarnDetailsModal from 'components/Modals/AmbireEarnDetailsModal/AmbireEarnDetailsModal'\nimport { getTokenIcon } from 'lib/icons'\nimport { BsArrowUpSquare } from \"react-icons/bs\"\nimport walletABI from 'ambire-common/src/constants/abis/walletTokenABI.json'\nimport UnbondModal from \"components/Modals/WalletTokenModal/UnbondModal/UnbondModal\"\n\nconst ADX_TOKEN_ADDRESS = '0xade00c28244d5ce17d72e40330b1c318cd12b7c3'\nconst ADX_STAKING_TOKEN_ADDRESS = '0xb6456b57f03352be48bf101b46c1752a0813491a'\nconst ADX_STAKING_POOL_INTERFACE = new Interface(AdexStakingPool)\nconst ADDR_ADX_SUPPLY_CONTROLLER = '0x515629338229dd5f8cea3f4f3cc8185ba21fa30b'\n\nconst WALLET_TOKEN_ADDRESS = '0x88800092ff476844f74dc2fc427974bbee2794ae'\nconst WALLET_STAKING_ADDRESS = '0x47cd7e91c3cbaaf266369fe8518345fc4fc12935'\nconst ADX_LABEL = 'ADX'\nconst WALLET_LABEL = 'WALLET'\n\nconst WALLET_LOCK_PERIOD_IN_DAYS = 30\nconst ADEX_LOCK_PERIOD_IN_DAYS = 20\n\n// polygon tests\n// const WALLET_TOKEN_ADDRESS = '0xe9415e904143e42007865e6864f7f632bd054a08'\n// const WALLET_STAKING_ADDRESS = '0xec3b10ce9cabab5dbf49f946a623e294963fbb4e'\n\nconst WALLET_STAKING_POOL_INTERFACE = new Interface(WalletStakingPoolABI)\nconst ERC20_INTERFACE = new Interface(ERC20ABI)\nconst ZERO = BigNumber.from(0)\n\nconst secondsInYear = 60 * 60 * 24 * 365\nconst PRECISION = 1_000_000_000_000\n\nconst msToDaysHours = ms => {\n    const day = 24 * 60 * 60 * 1000\n    const days = Math.floor(ms / day)\n    const hours = Math.floor((ms % day) / (60 * 60 * 1000))\n    return days < 1 ? `${hours} hours` : `${days} days`\n}\n\nconst attachMetaIfNeeded = (req, shareValue, rewardsData) => {\n    let meta\n    const shouldAttachMeta = [WALLET_TOKEN_ADDRESS, WALLET_STAKING_ADDRESS].includes(req.txn.to.toLowerCase())\n    if (shouldAttachMeta) {\n        const { walletUsdPrice: walletTokenUsdPrice, xWALLETAPY: APY } = rewardsData.rewards\n        meta = { xWallet: { APY, shareValue, walletTokenUsdPrice } }\n    }\n    return !meta ? req : { ...req, meta: { ...req.meta && req.meta, ...meta }}\n}\n\nconst AmbireTokensCard = ({ networkId, accountId, tokens, rewardsData, addRequest }) => {\n    const [loading, setLoading] = useState(true)\n    const [details, setDetails] = useState([])\n    const [customInfo, setCustomInfo] = useState(null)\n    const [stakingTokenContract, setStakingTokenContract] = useState(null)\n    const [shareValue, setShareValue] = useState(ZERO)\n    const [stakingTokenBalanceRaw, SetStakingTokenBalanceRaw] = useState(null)\n    const [leaveLog, setLeaveLog] = useState(null)\n    const [lockedRemainingTime, setLockedRemainingTime] = useState(0)\n    const [addresses, setAddresses] = useState({\n        tokenAddress: '',\n        stakingTokenAddress: '',\n        stakingPoolInterface: '',\n        stakingPoolAbi: '',\n        tokenAbi: ''\n    })\n    const [selectedToken, setSelectedToken] = useState({ label: ''})\n    const [adxCurrentAPY, setAdxCurrentAPY] = useState(null)\n    const [isUnbondModalVisible, setIsUnbondModalVisible] = useState(false)\n    const [isUnstakeConfirmed, setIsUnstakeConfirmed] = useState(false)\n    const [validateData, setValidateData] = useState(null)\n\n    const getLockDays = useCallback(() => {\n        if (selectedToken.label === 'WALLET') return WALLET_LOCK_PERIOD_IN_DAYS\n        else return ADEX_LOCK_PERIOD_IN_DAYS\n    }, [selectedToken.label])\n    \n    const unavailable = networkId !== 'ethereum'\n    const networkDetails = networks.find(({ id }) => id === networkId)\n    const addRequestTxn = useCallback((id, txn, extraGas = 0) => { \n        const request = attachMetaIfNeeded(\n                { id, type: 'eth_sendTransaction', chainId: networkDetails.chainId, account: accountId, txn, extraGas },\n                shareValue,\n                rewardsData\n            )\n\n        addRequest(request)\n    }, [networkDetails.chainId, accountId, shareValue, rewardsData, addRequest])\n\n    const { xWALLETAPYPercentage } = rewardsData.rewards;\n\n    const walletToken = useMemo(() => tokens.find(({ address }) => address === WALLET_TOKEN_ADDRESS), [tokens])\n    const xWalletToken = useMemo(() => tokens.find(({ address }) => address === WALLET_STAKING_ADDRESS), [tokens])\n    const adexToken = useMemo(() => tokens.find(({address}) => address === ADX_TOKEN_ADDRESS), [tokens])\n    const adexStakingToken = useMemo(() => tokens.find(({address}) => address === ADX_STAKING_TOKEN_ADDRESS), [tokens])\n\n    const balanceRaw = useMemo(() => stakingTokenBalanceRaw ? (BigNumber.from(stakingTokenBalanceRaw).mul(shareValue)).div(BigNumber.from((1e18).toString())).toString() : 0,\n    [stakingTokenBalanceRaw, shareValue])\n\n    const depositTokenItems = useMemo(() => [\n        {\n            type: 'deposit',\n            icon: getTokenIcon(networkId, WALLET_TOKEN_ADDRESS),\n            label: WALLET_LABEL,\n            value: WALLET_TOKEN_ADDRESS,\n            symbol: WALLET_LABEL,\n            balance: (walletToken?.balanceRaw && walletToken?.decimals) ? formatUnits(walletToken?.balanceRaw, walletToken?.decimals) : 0,\n            balanceRaw: walletToken?.balanceRaw || 0,\n        },\n        {\n            type: 'deposit',\n            icon: getTokenIcon(networkId, ADX_TOKEN_ADDRESS),\n            label: ADX_LABEL,\n            value: ADX_TOKEN_ADDRESS,\n            symbol: ADX_LABEL,\n            balance: (adexToken?.balanceRaw && adexToken?.decimals) ? formatUnits(adexToken?.balanceRaw, adexToken?.decimals) : 0,\n            balanceRaw: adexToken?.balanceRaw || 0,\n        },\n    ], [adexToken?.balanceRaw, adexToken?.decimals, networkId, walletToken?.balanceRaw, walletToken?.decimals])\n\n    const withdrawTokenItems = useMemo(() => [   \n        {\n            type: 'withdraw',\n            icon: getTokenIcon(networkId, WALLET_TOKEN_ADDRESS),\n            label: WALLET_LABEL,\n            value: WALLET_STAKING_ADDRESS,\n            symbol: WALLET_LABEL,\n            balance: formatUnits(balanceRaw, xWalletToken?.decimals),\n            balanceRaw,\n        },\n        {\n            type: 'withdraw',\n            icon: getTokenIcon(networkId, ADX_TOKEN_ADDRESS),\n            label: ADX_LABEL,\n            value: ADX_STAKING_TOKEN_ADDRESS,\n            symbol: ADX_LABEL,\n            balance: formatUnits(balanceRaw, adexStakingToken?.decimals),\n            balanceRaw,\n        },\n    ], [adexStakingToken?.decimals, balanceRaw, networkId, xWalletToken?.decimals])\n    \n    const tokensItems = useMemo(() => [\n        ...depositTokenItems.sort((x,y) => x.value === addresses.tokenAddress ? -1 : y.value === addresses.tokenAddress ? 1 : 0),\n        ...withdrawTokenItems.sort((x,y) => x.value === addresses.stakingTokenAddress ? -1 : y.value === addresses.stakingTokenAddress ? 1 : 0)\n    ], [addresses.stakingTokenAddress, addresses.tokenAddress, depositTokenItems, withdrawTokenItems])\n\n    const onWithdraw = useCallback(() => {\n        const { shares, unlocksAt } = leaveLog\n        addRequestTxn(`withdraw_staking_pool_${Date.now()}`, {\n            to: addresses.stakingTokenAddress,\n            value: '0x0',\n            data: addresses.stakingPoolInterface.encodeFunctionData('withdraw', [shares.toHexString(), unlocksAt.toHexString(), false])\n        })\n    }, [addresses, leaveLog, addRequestTxn])\n\n    const isAdxTokenSelected = useCallback(() => {\n        return selectedToken.label === ADX_LABEL\n    }, [selectedToken.label])\n\n    const onTokenSelect = useCallback(tokenAddress => {\n        setCustomInfo(null)\n\n        const token = tokensItems.find(({ value }) => value === tokenAddress)\n\n        setSelectedToken({label: token?.label}) \n        if (token && token.type === 'withdraw' && leaveLog && (parseFloat(leaveLog.walletValue) > 0)) {\n            const unbondToolTipLabelMdg = `* Because of funds that are pending withdrawal, you are not able to unstake more ${selectedToken.label} tokens until the unbond period is over.`\n            \n            setCustomInfo(\n                <>\n                    <div className=\"info-message\">\n                        <ToolTip label={unbondToolTipLabelMdg}>\n                            <span><b>{ msToDaysHours(lockedRemainingTime) }</b> until { parseFloat(leaveLog.walletValue).toFixed(4) } {selectedToken.label} becomes available for withdraw.&nbsp;<MdInfo/></span>\n                        </ToolTip>\n                    </div>\n                    <Button \n                        disabled={lockedRemainingTime > 0}\n                        icon={<BsArrowUpSquare/>}\n                        onClick={() => onWithdraw()}\n                    >\n                        Withdraw    \n                    </Button>\n                </>\n            )\n        }\n        const apyTooltipMsg = `Annual Percentage Yield${selectedToken.label === 'WALLET' ? `: IN ADDITION to what you earn in ${selectedToken.label}s` : ''}`\n        setDetails([\n            [\n                <>\n                    <ToolTip label={apyTooltipMsg}>\n                        <div>APY&nbsp;<MdInfo/></div>\n                    </ToolTip>\n                </>,\n                isAdxTokenSelected() ? adxCurrentAPY ? `${adxCurrentAPY.toFixed(2)}%` : '...' : rewardsData.isLoading ? `...` : xWALLETAPYPercentage\n            ],\n            ['Lock', `${getLockDays()} day unbond period`],\n            ['Type', 'Variable Rate'],\n        ])\n    }, [getLockDays, adxCurrentAPY, isAdxTokenSelected, leaveLog, lockedRemainingTime, onWithdraw, rewardsData.isLoading, selectedToken.label, tokensItems, xWALLETAPYPercentage])\n\n    // NOTE: tokenAddress is unused because we have two tokens in this card, and we set everything in addresses\n    const onValidate = async (type, _tokenAddress, amount, isMaxAmount) => {\n        const bigNumberAmount = parseUnits(amount, 18)\n\n        if (type === 'Deposit') {\n            const allowance = await stakingTokenContract.allowance(accountId, addresses.stakingTokenAddress)\n\n            if (allowance.lt(constants.MaxUint256)) {\n                addRequestTxn(`approve_staking_pool_${Date.now()}`, {\n                    to: addresses.tokenAddress,\n                    value: '0x0',\n                    data: ERC20_INTERFACE.encodeFunctionData('approve', [addresses.stakingTokenAddress, constants.MaxUint256])\n                })\n            }\n\n            addRequestTxn(`enter_staking_pool_${Date.now()}`, {\n                to: addresses.stakingTokenAddress,\n                value: '0x0',\n                data: addresses.stakingPoolInterface.encodeFunctionData('enter', [bigNumberAmount.toHexString()])\n            })\n        }\n\n        if (type === 'Withdraw') {\n            setIsUnbondModalVisible(true)\n            setValidateData({bigNumberAmount, type, _tokenAddress, amount, isMaxAmount})\n        }\n    }\n\n    const handleUnstake = useCallback(async ({bigNumberAmount, isMaxAmount}) => {\n        let xWalletAmount\n        // In case of withdrawing the max amount of xWallet tokens, get the latest balance of xWallet.\n        // Otherwise, `stakingTokenBalanceRaw` may be outdated.\n        if (isMaxAmount) {\n            xWalletAmount = await stakingTokenContract.balanceOf(accountId)\n        } else {\n            xWalletAmount = bigNumberAmount.mul(BigNumber.from((1e18).toString())).div(shareValue)\n        }\n\n        addRequestTxn(`leave_staking_pool_${Date.now()}`, {\n            to: addresses.stakingTokenAddress,\n            value: '0x0',\n            data: addresses.stakingPoolInterface.encodeFunctionData('leave', [xWalletAmount.toHexString(), false])\n        })\n    }, [accountId, addRequestTxn, addresses, shareValue, stakingTokenContract])\n\n    useEffect(() => {\n        if (isUnstakeConfirmed && validateData != null) {\n            handleUnstake(validateData)\n            setIsUnbondModalVisible(false)\n            setIsUnstakeConfirmed(false)\n            setValidateData(null)\n        }\n    }, [isUnstakeConfirmed, handleUnstake, validateData])\n\n    useEffect(() => {\n        async function init() {\n            try {\n                // Prevent init if the card is unavailable for current network\n                if (networkId !== 'ethereum') return\n\n                const provider = getProvider(networkId)\n                \n                const tokenAddress = isAdxTokenSelected() ? ADX_TOKEN_ADDRESS : WALLET_TOKEN_ADDRESS\n                const stakingTokenAddress = isAdxTokenSelected() ? ADX_STAKING_TOKEN_ADDRESS : WALLET_STAKING_ADDRESS\n                const stakingPoolInterface = isAdxTokenSelected() ? ADX_STAKING_POOL_INTERFACE : WALLET_STAKING_POOL_INTERFACE\n                const stakingPoolAbi = isAdxTokenSelected() ? AdexStakingPool : WalletStakingPoolABI\n                const tokenAbi = isAdxTokenSelected() ? ERC20ABI : walletABI\n                const stakingTokenContract = new Contract(stakingTokenAddress, stakingPoolInterface, provider)\n                const tokenContract = new Contract(tokenAddress, tokenAbi, provider)\n                const supplyController = new Contract(\n                    ADDR_ADX_SUPPLY_CONTROLLER,\n                    supplyControllerABI,\n                    provider\n                )\n                setStakingTokenContract(stakingTokenContract)\n                \n                setAddresses({\n                    tokenAddress,\n                    stakingTokenAddress,\n                    stakingPoolInterface,\n                    stakingPoolAbi,\n                    tokenAbi\n                })\n                \n                const [shareValue, sharesTotalSupply, stakingTokenBalanceRaw] = await Promise.all([\n                    stakingTokenContract.shareValue(),\n                    stakingTokenContract.totalSupply(),\n                    stakingTokenContract.balanceOf(accountId),\n                ])\n\n                if (isAdxTokenSelected()) {\n                    const [incentivePerSecond, poolTotalStaked] = await Promise.all([\n                        supplyController.incentivePerSecond(ADX_STAKING_TOKEN_ADDRESS),\n                        tokenContract.balanceOf(stakingTokenAddress),\n                    ])\n                    \n                    const currentAPY = incentivePerSecond\n                        .mul(PRECISION)\n                        .mul(secondsInYear)\n                        .div(poolTotalStaked)\n                        .toNumber() / PRECISION\n                    \n                    setAdxCurrentAPY(currentAPY * 100)\n                }\n\n                setShareValue(shareValue)\n                SetStakingTokenBalanceRaw(stakingTokenBalanceRaw)\n\n                const [leaveLogs, withdrawLogs] = await Promise.all([\n                    provider.getLogs({\n                        fromBlock: 0,\n                        ...stakingTokenContract.filters.LogLeave(accountId, null, null, null)\n                    }),\n                    provider.getLogs({\n                        fromBlock: 0,\n                        ...stakingTokenContract.filters.LogWithdraw(\n                            accountId,\n                            null,\n                            null,\n                            null,\n                            null\n                        ),\n                    })\n                ])\n\n                const userWithdraws = withdrawLogs.map(log => {\n                    const parsedWithdrawLog = stakingTokenContract.interface.parseLog(log)\n                    const { shares, unlocksAt, maxTokens, receivedTokens } =\n                        parsedWithdrawLog.args\n        \n                    return {\n                        transactionHash: log.transactionHash,\n                        type: 'withdraw',\n                        shares,\n                        unlocksAt, \n                        maxTokens, \n                        receivedTokens,\n                        blockNumber: log.blockNumber,\n                    }\n                })\n                \n                const now = new Date() / 1000\n                const userLeaves = await Promise.all(\n                    leaveLogs.map(async log => {\n                        const parsedLog = stakingTokenContract.interface.parseLog(log)\n                        const { maxTokens, shares, unlocksAt } = parsedLog.args\n\n                        const withdrawTx = userWithdraws.find(\n                            event =>\n                                event.unlocksAt.toString() === unlocksAt.toString() &&\n                                event.shares.toString() === shares.toString() &&\n                                event.maxTokens.toString() === maxTokens.toString()\n                        )\n\n                        const walletValue = sharesTotalSupply.isZero()\n                        ? ZERO\n                        : await stakingTokenContract.unbondingCommitmentWorth(\n                            accountId,\n                            shares,\n                            unlocksAt\n                        )\n\n                        return {\n                            transactionHash: log.transactionHash,\n                            type: 'leave',\n                            maxTokens,\n                            shares,\n                            unlocksAt,\n                            blockNumber: log.blockNumber,\n                            walletValue,\n                            withdrawTx\n                        }\n                    })\n                )\n                const leavesPendingToUnlock = [...userLeaves].filter(\n                    event => event.unlocksAt > now\n                )\n        \n                const leavesReadyToWithdraw = [...userLeaves].filter(\n                    event => event.unlocksAt < now && !event.withdrawTx\n                )\n\n                let leavePendingToUnlockOrReadyToWithdraw = null \n                if (leavesReadyToWithdraw.length) leavePendingToUnlockOrReadyToWithdraw = leavesReadyToWithdraw[0]\n                else if (leavesPendingToUnlock.length) leavePendingToUnlockOrReadyToWithdraw = leavesPendingToUnlock[0]\n                \n                if (leavePendingToUnlockOrReadyToWithdraw) {\n                    const {\n                        maxTokens, \n                        shares, \n                        unlocksAt, \n                        walletValue } = leavePendingToUnlockOrReadyToWithdraw\n                \n                    setLeaveLog({\n                        tokens: maxTokens,\n                        shares,\n                        unlocksAt,\n                        walletValue: utils.formatUnits(walletValue.toString(), 18)\n                    })\n                \n                    let remainingTime = leaveLog ? ((leaveLog.unlocksAt.toString() * 1000) - Date.now()) : null\n                    if (remainingTime <= 0) remainingTime = 0\n                    setLockedRemainingTime(remainingTime)    \n                } else {\n                    setLeaveLog(null)\n                }\n            } catch(e) {\n                console.error(e)\n            }\n        }\n        init()\n        return () => {\n            setShareValue(ZERO)\n        }\n    }, [networkId, accountId, selectedToken.label, isAdxTokenSelected, leaveLog])\n\n    useEffect(() => setLoading(false), [])\n\n    return (\n        <>\n            <UnbondModal \n                isVisible={isUnbondModalVisible} \n                hideModal={() => setIsUnbondModalVisible(false)} \n                text={`There is a ${getLockDays()}-day lockup period for the tokens you are requesting to unbond. You will not be earning staking rewards on these tokens during these ${getLockDays()} days!`}\n                onClick={() => setIsUnstakeConfirmed(true)}\n            />\n            <Card\n                loading={loading || (!stakingTokenBalanceRaw && !unavailable)}\n                icon={AMBIRE_ICON}\n                unavailable={unavailable}\n                tokensItems={tokensItems}\n                details={details}\n                customInfo={customInfo}\n                onTokenSelect={onTokenSelect}\n                onValidate={onValidate}\n                moreDetails={!unavailable && <AmbireEarnDetailsModal \n                    apy={isAdxTokenSelected()? adxCurrentAPY ? `${adxCurrentAPY.toFixed(2)}%` : '...' : xWALLETAPYPercentage}\n                    accountId={accountId}\n                    msToDaysHours={msToDaysHours}\n                    addresses={addresses}\n                    tokenLabel={selectedToken.label}\n                />}\n            />\n        </>\n    )\n}\n\nexport default AmbireTokensCard\n","import './Earn.scss'\nimport AAVECard from './Cards/AAVECard/AAVECard'\nimport YearnTesseractCard from './Cards/YearnTesseractCard/YearnTesseractCard'\nimport { Loading } from 'components/common'\nimport AmbireTokensCard from './Cards/AmbireTokensCard/AmbireTokensCard'\n\nconst Earn = ({ portfolio, selectedNetwork, rewardsData, selectedAcc, addRequest }) => {\n    return (\n        <div id=\"earn\">\n            {\n                portfolio.isCurrNetworkBalanceLoading ?\n                    <Loading/>\n                    :\n                    <div className=\"cards\">\n                        <AmbireTokensCard\n                            networkId={selectedNetwork.id}\n                            accountId={selectedAcc}\n                            tokens={portfolio.tokens}\n                            rewardsData={rewardsData}\n                            addRequest={addRequest}\n                        />\n                        <AAVECard networkId={selectedNetwork.id} tokens={portfolio.tokens} account={selectedAcc} addRequest={addRequest}/>\n                        <YearnTesseractCard\n                            networkId={selectedNetwork.id}\n                            accountId={selectedAcc}\n                            tokens={portfolio.tokens}\n                            addRequest={addRequest}\n                        />\n                    </div>\n            }\n        </div>\n    )\n}\n\nexport default Earn","const customIcons = {\n    '0xb468a1e5596cfbcdf561f21a10490d99b4bb7b68': 'https://upload.wikimedia.org/wikipedia/commons/thumb/5/5a/Jeff_Sessions_with_Elmo_and_Rosita_%28cropped%29.jpg/220px-Jeff_Sessions_with_Elmo_and_Rosita_%28cropped%29.jpg', // TEST Polygon ELMO token,\n    '0x88800092ff476844f74dc2fc427974bbee2794ae': 'https://raw.githubusercontent.com/AmbireTech/ambire-brand/main/logos/ambire_logo_white_bg_250x250.png', // Ambire Wallet Token\n    '0x47cd7e91c3cbaaf266369fe8518345fc4fc12935': 'https://raw.githubusercontent.com/AmbireTech/ambire-brand/main/logos/xwallet_250x250.png', //xWallet\n    '0xb6456b57f03352be48bf101b46c1752a0813491a': 'https://raw.githubusercontent.com/AmbireTech/adex-brand/master/logos/vaporwave-adex-2.png', // ADX-STAKING\n    '0xd9a4cb9dc9296e111c66dfacab8be034ee2e1c2c': 'https://raw.githubusercontent.com/AmbireTech/adex-brand/master/logos/ADX-loyalty%40256x256.png', // ADX-LOYALTY\n    '0xec3b10ce9cabab5dbf49f946a623e294963fbb4e': 'https://raw.githubusercontent.com/AmbireTech/ambire-brand/main/logos/xwallet_250x250.png', // Polygons test xWallet\n    '0xe9415e904143e42007865e6864f7f632bd054a08': 'https://raw.githubusercontent.com/AmbireTech/ambire-brand/main/logos/Ambire_logo_250x250.png', // Polygons test Wallet\n    '0xade00c28244d5ce17d72e40330b1c318cd12b7c3': 'https://raw.githubusercontent.com/AmbireTech/ambire-brand/main/official-logos/Ambire-AdEx/Ambire_AdEx_Symbol_color_white_bg.png' //ADX-TOKEN\n}\n\nconst zapperStorageTokenIcons = 'https://storage.googleapis.com/zapper-fi-assets/tokens'\n\nexport function getTokenIcon(networkId = '', address = '') {\n    const addr = address.toLowerCase()\n    const net = networkId.toLowerCase()\n    return customIcons[addr] || `${zapperStorageTokenIcons}/${net}/${addr}.png`\n}\n","import './EarnDetailsModal.scss'\n\nimport { MdClose } from 'react-icons/md'\nimport { useModals } from 'hooks'\nimport { Modal, Button } from 'components/common'\n\nconst EarnDetailsModal = ({ title = 'Details', description = '' }) => {\n    const { hideModal } = useModals()\n    const buttons = (<Button clear small icon={<MdClose />} onClick={hideModal}>Close</Button>)\n   \n    return (\n        <Modal id=\"wallet-more-details-modal\" title={title} buttons={buttons}>\n            <p>{description}</p>\n        </Modal>\n    )\n}\n\nexport default EarnDetailsModal\n","import { getProvider } from 'lib/provider'\nimport { BigNumber, utils, Contract } from 'ethers'\nimport { useEffect, useState, useCallback } from 'react'\nimport useConstants from './useConstants'\n\nconst ZERO = BigNumber.from(0)\nconst ZERO_ADDR = '0x0000000000000000000000000000000000000000'\nconst PRECISION = 1_000_000_000_000\nconst POOL_SHARES_TOKEN_DECIMALS_MUL = '1000000000000000000'\nconst STAKING_POOL_EVENT_TYPES = {\n    enter: 'enter',\n    leave: 'leave',\n    burn: 'burn',\n    withdraw: 'withdraw',\n    rageLeave: 'rageLeave',\n    shareTokensTransferIn: 'shareTokensTransferIn',\n    shareTokensTransferOut: 'shareTokensTransferOut',\n}\n\nconst ethProvider = getProvider('ethereum')\n\nconst useAmbireEarnDetails = ({accountId, addresses, tokenLabel}) => {\n    const { getAdexToStakingTransfersLogs } = useConstants()\n    const WALLET_ADDR = addresses.stakingTokenAddress\n    const [details, setDetails] = useState({})\n    const [isLoading, setIsLoading] = useState(true)\n\n    const getStats = useCallback(async (addresses, tokenLabel) => {\n        const xWalletContract = new Contract(addresses.stakingTokenAddress, addresses.stakingPoolAbi, ethProvider)\n        const walletContract = new Contract(addresses.tokenAddress, addresses.tokenAbi, ethProvider)\n        const fromBlock = 0\n        const fromBlockHardcoded = (tokenLabel === 'ADX') ? 0xe64fe2 : 0\n        const [\n            shareValue,\n            sharesTotalSupply,\n            balanceShares,\n            lockedShares,\n            allEnterWalletTransferLogs, // If ADX selected, 0xe64fe2 last block from prefetched data\n            leaveLogs,\n            withdrawLogs,\n            rageLeaveLogs,\n            sharesTokensTransfersInLogs,\n            sharesTokensTransfersOutLogs,\n        ] = await Promise.all([\n            xWalletContract.shareValue(),\n            xWalletContract.totalSupply(),\n            xWalletContract.balanceOf(accountId),\n            xWalletContract.lockedShares(accountId),\n            ethProvider.getLogs({\n                fromBlock: fromBlockHardcoded,\n                ...walletContract.filters.Transfer(null, WALLET_ADDR, null),\n            }),\n            ethProvider.getLogs({\n                fromBlock,\n                ...xWalletContract.filters.LogLeave(accountId, null, null, null),\n            }),\n            ethProvider.getLogs({\n                fromBlock,\n                ...xWalletContract.filters.LogWithdraw(\n                    accountId,\n                    null,\n                    null,\n                    null,\n                    null\n                ),\n            }),\n            ethProvider.getLogs({\n                fromBlock,\n                ...xWalletContract.filters.LogRageLeave(\n                    accountId,\n                    null,\n                    null,\n                    null\n                ),\n            }),\n            ethProvider.getLogs({\n                fromBlock,\n                ...xWalletContract.filters.Transfer(null, accountId, null),\n            }),\n            ethProvider.getLogs({\n                fromBlock,\n                ...xWalletContract.filters.Transfer(accountId, null, null),\n            }),\n        ])\n       \n        const userShare = sharesTotalSupply.isZero()\n            ? ZERO\n            : balanceShares.mul(PRECISION).div(sharesTotalSupply).toNumber() /\n              PRECISION\n\n        const adexToStakingTransfersLogs = await getAdexToStakingTransfersLogs();\n        const enterWalletTokensByTxHash = ((tokenLabel === 'ADX' && adexToStakingTransfersLogs) ? adexToStakingTransfersLogs.result : [])\n            .concat(allEnterWalletTransferLogs)\n            .reduce((byHash, log) => {\n                    byHash[log.transactionHash] = log\n                    return byHash\n                }, {}\n            )\n\n        const sharesTokensTransfersIn = sharesTokensTransfersInLogs.map(log => {\n            const parsedLog = xWalletContract.interface.parseLog(log)\n\n            const {\n                from, // [0]\n                amount, // [2]\n            } = parsedLog.args\n\n            return {\n                transactionHash: log.transactionHash,\n                blockNumber: log.blockNumber,\n                shares: amount,\n                type:\n                    from === ZERO_ADDR\n                        ? STAKING_POOL_EVENT_TYPES.enter\n                        : STAKING_POOL_EVENT_TYPES.shareTokensTransferIn,\n                from,\n            }\n        })\n\n        // Only out txns as we have logs for RageLEave and Withdraw and they only burns shares\n        // TODO: detect innerBurn transactions to ZERO_ADDR (burned by the user itself)\n        const sharesTokensTransfersOut = sharesTokensTransfersOutLogs\n            .map(log => {\n                const parsedLog = xWalletContract.interface.parseLog(log)\n\n                const {\n                    to, // [1]\n                    amount, // [2]\n                } = parsedLog.args\n\n                return {\n                    transactionHash: log.transactionHash,\n                    blockNumber: log.blockNumber,\n                    shares: amount,\n                    type: STAKING_POOL_EVENT_TYPES.shareTokensTransferOut,\n                    to,\n                }\n            })\n            .filter(x => x.to !== ZERO_ADDR)\n\n        const { shareTokensEnterMintByHash, shareTokensTransfersInByTxHash } =\n            sharesTokensTransfersIn.reduce(\n                (txns, event) => {\n                    if (event.type === STAKING_POOL_EVENT_TYPES.enter) {\n                        txns.shareTokensEnterMintByHash[event.transactionHash] =\n                            event\n                    }\n\n                    if (\n                        event.type ===\n                        STAKING_POOL_EVENT_TYPES.shareTokensTransferIn\n                    ) {\n                        txns.shareTokensTransfersInByTxHash[\n                            event.transactionHash\n                        ] = event\n                    }\n\n                    return txns\n                },\n                {\n                    shareTokensEnterMintByHash: {},\n                    shareTokensTransfersInByTxHash: {},\n                }\n            )\n\n        const sharesTokensTransfersInFromExternal = Object.values(\n            shareTokensTransfersInByTxHash\n        )\n\n        const userEnters = Object.values(shareTokensEnterMintByHash)\n            .map(sharesMintEvent => {\n                const adexTokenTransfersLog =\n                    enterWalletTokensByTxHash[sharesMintEvent.transactionHash]\n\n                if (adexTokenTransfersLog) {\n                    const parsedWalletLog = walletContract.interface.parseLog(\n                        adexTokenTransfersLog\n                    )\n\n                    return {\n                        transactionHash: sharesMintEvent.transactionHash,\n                        type: STAKING_POOL_EVENT_TYPES.enter,\n                        shares: sharesMintEvent.shares,\n                        walletAmount: tokenLabel === 'ADX' ? parsedWalletLog.args.value : parsedWalletLog.args.amount, // [2]\n                        from: parsedWalletLog.args.from,\n                        blockNumber: sharesMintEvent.blockNumber,\n                    }\n                } else {\n                    return null\n                }\n            })\n            .filter(x => !!x)\n\n        const userWithdraws = withdrawLogs.map(log => {\n            const parsedWithdrawLog = xWalletContract.interface.parseLog(log)\n            const { shares, unlocksAt, maxTokens, receivedTokens } =\n                parsedWithdrawLog.args\n\n            return {\n                transactionHash: log.transactionHash,\n                type: STAKING_POOL_EVENT_TYPES.withdraw,\n                shares, //[1]\n                unlocksAt, //[2]\n                maxTokens, //[3]\n                receivedTokens, //[4]\n                blockNumber: log.blockNumber,\n            }\n        })\n\n        const userRageLeaves = rageLeaveLogs.map(log => {\n            const parsedRageLeaveLog = xWalletContract.interface.parseLog(log)\n\n            const { shares, maxTokens, receivedTokens } =\n                parsedRageLeaveLog.args\n\n            return {\n                transactionHash: log.transactionHash,\n                type: STAKING_POOL_EVENT_TYPES.rageLeave,\n                shares, //[1]\n                maxTokens, //[2]\n                receivedTokens,\n                walletAmount: receivedTokens, //[3]\n                blockNumber: log.blockNumber,\n            }\n        })\n\n        const now = new Date() / 1000\n\n        const userLeaves = await Promise.all(\n            leaveLogs.map(async log => {\n                const parsedLog = xWalletContract.interface.parseLog(log)\n\n                const { shares, unlocksAt, maxTokens } = parsedLog.args\n\n                const withdrawTx = userWithdraws.find(\n                    event =>\n                        event.unlocksAt.toString() === unlocksAt.toString() &&\n                        event.shares.toString() === shares.toString() &&\n                        event.maxTokens.toString() === maxTokens.toString()\n                )\n\n                const walletValue = sharesTotalSupply.isZero()\n                    ? ZERO // maxTokens\n                    : await xWalletContract.unbondingCommitmentWorth(\n                          accountId,\n                          shares,\n                          unlocksAt\n                      )\n\n                return {\n                    transactionHash: log.transactionHash,\n                    type: STAKING_POOL_EVENT_TYPES.leave,\n                    shares, // [1]\n                    unlocksAt, //[2]\n                    maxTokens, // [3]\n                    walletValue,\n                    canWithdraw: unlocksAt < now && !withdrawTx,\n                    blockNumber: log.blockNumber,\n                    withdrawTx,\n                }\n            })\n        )\n        \n        const leavesPendingToUnlock = [...userLeaves].filter(\n            event => event.unlocksAt > now\n        )\n\n        const leavesReadyToWithdraw = [...userLeaves].filter(\n            event => event.unlocksAt < now && !event.withdrawTx\n        )\n\n        const leavesPendingToUnlockTotalMax = leavesPendingToUnlock.reduce(\n            (a, b) => a.add(b.maxTokens),\n            ZERO\n        )\n\n        const leavesPendingToUnlockTotalWallet = leavesPendingToUnlock.reduce(\n            (a, b) => a.add(b.walletValue),\n            ZERO\n        )\n\n        const leavesReadyToWithdrawTotalMax = leavesReadyToWithdraw.reduce(\n            (a, b) => a.add(b.maxTokens),\n            ZERO\n        )\n\n        const leavesReadyToWithdrawTotalWallet = leavesReadyToWithdraw.reduce(\n            (a, b) => a.add(b.walletValue),\n            ZERO\n        )\n\n        let leavePendingToUnlockOrReadyToWithdraw = null \n        if (leavesReadyToWithdraw.length) leavePendingToUnlockOrReadyToWithdraw = leavesReadyToWithdraw[0]\n        else if (leavesPendingToUnlock.length) leavePendingToUnlockOrReadyToWithdraw = leavesPendingToUnlock[0]\n        const [latestLog] = leaveLogs.sort((a, b) => b.blockNumber - a.blockNumber)\n        let remainingTime\n        if (leavePendingToUnlockOrReadyToWithdraw && latestLog) {\n            const { unlocksAt } = leavePendingToUnlockOrReadyToWithdraw\n            remainingTime = (unlocksAt.toString() * 1000) - Date.now()\n            if (remainingTime <= 0) remainingTime = 0\n        } else {\n            remainingTime = null\n        }\n\n        if (\n            sharesTokensTransfersOut.length ||\n            sharesTokensTransfersInFromExternal.length\n        ) {\n            const fromBlock = Math.min(\n                sharesTokensTransfersOut[0]\n                    ? sharesTokensTransfersOut[0].blockNumber\n                    : Number.MAX_SAFE_INTEGER,\n                sharesTokensTransfersInFromExternal[0]\n                    ? sharesTokensTransfersInFromExternal[0].blockNumber\n                    : Number.MAX_SAFE_INTEGER\n            )\n\n            const [\n                allLeaveLogs,\n                allWithdrawLogs,\n                allRageLeaveLogs,\n                allEnterSharesTokensTransfersInLogs,\n            ] = await Promise.all([\n                ethProvider.getLogs({\n                    fromBlock,\n                    ...xWalletContract.filters.LogLeave(null, null, null, null),\n                }),\n                ethProvider.getLogs({\n                    fromBlock,\n                    ...xWalletContract.filters.LogWithdraw(\n                        null,\n                        null,\n                        null,\n                        null,\n                        null\n                    ),\n                }),\n                ethProvider.getLogs({\n                    fromBlock,\n                    ...xWalletContract.filters.LogRageLeave(\n                        null,\n                        null,\n                        null,\n                        null\n                    ),\n                }),\n                ethProvider.getLogs({\n                    fromBlock,\n                    ...xWalletContract.filters.Transfer(ZERO_ADDR, null, null),\n                }),\n            ])\n\n            const allEnters = allEnterSharesTokensTransfersInLogs\n                .map(sharesMintEvent => {\n                    const walletTokenTransfersLog =\n                        enterWalletTokensByTxHash[\n                            sharesMintEvent.transactionHash\n                        ]\n\n                    if (walletTokenTransfersLog) {\n                        const parsedLog = walletContract.interface.parseLog(\n                            walletTokenTransfersLog\n                        )\n                        const amount = tokenLabel === 'ADX' ? parsedLog.args.value : parsedLog.args.amount \n                        const { amount: shares } =\n                            xWalletContract.interface.parseLog(\n                                sharesMintEvent\n                            ).args\n\n                        return {\n                            blockNumber: sharesMintEvent.blockNumber,\n                            shareValue: shares.isZero()\n                                ? ZERO\n                                : amount\n                                      .mul(POOL_SHARES_TOKEN_DECIMALS_MUL)\n                                      .div(shares),\n                        }\n                    } else {\n                        return null\n                    }\n                })\n                .filter(x => !!x)\n\n            const allWithdraws = allWithdrawLogs.map(log => {\n                const parsedWithdrawLog =\n                    xWalletContract.interface.parseLog(log)\n                const { shares, maxTokens } = parsedWithdrawLog.args\n\n                return {\n                    blockNumber: log.blockNumber,\n                    shareValue: maxTokens\n                        .mul(POOL_SHARES_TOKEN_DECIMALS_MUL)\n                        .div(shares),\n                }\n            })\n\n            const allRageLeaves = allRageLeaveLogs.map(log => {\n                const parsedRageLeaveLog =\n                    xWalletContract.interface.parseLog(log)\n\n                const { shares, maxTokens } = parsedRageLeaveLog.args\n\n                return {\n                    shareValue: maxTokens\n                        .mul(POOL_SHARES_TOKEN_DECIMALS_MUL)\n                        .div(shares),\n                    blockNumber: log.blockNumber,\n                }\n            })\n\n            const allLeaves = allLeaveLogs.map(log => {\n                const parsedLog = xWalletContract.interface.parseLog(log)\n                const { shares, maxTokens } = parsedLog.args\n                return {\n                    blockNumber: log.blockNumber,\n                    shareValue: maxTokens\n                        .mul(POOL_SHARES_TOKEN_DECIMALS_MUL)\n                        .div(shares),\n                }\n            })\n\n            const allLogs = allEnters\n                .concat(allWithdraws)\n                .concat(allLeaves)\n                .concat(allRageLeaves)\n                .sort((a, b) => a.blockNumber - b.blockNumber)\n\n            const withWalletAmount = events =>\n                events.forEach((transferLog, i) => {\n                    const nextLog =\n                        allLogs.find(\n                            log => log.blockNumber >= transferLog.blockNumber\n                        ) || {}\n\n                    const bestShareValue = nextLog.shareValue || shareValue\n\n                    // approximate share value\n                    events[i].shareValue = bestShareValue\n                    events[i].walletAmount = transferLog.shares\n                        .mul(bestShareValue)\n                        .div(POOL_SHARES_TOKEN_DECIMALS_MUL)\n                })\n\n            withWalletAmount(sharesTokensTransfersOut)\n            withWalletAmount(sharesTokensTransfersInFromExternal)\n        }\n\n        const totalSharesOutTransfers = sharesTokensTransfersOut.reduce(\n            (a, b) => a.add(b.shares),\n            ZERO\n        )\n\n        const totalSharesOutTransfersWalletValue =\n            sharesTokensTransfersOut.reduce(\n                (a, b) => a.add(b.walletAmount),\n                ZERO\n            )\n\n        const totalSharesInTransfers = sharesTokensTransfersInFromExternal.reduce(\n            (a, b) => a.add(b.shares),\n            ZERO\n        )\n\n        const totalSharesInTransfersWalletValue =\n            sharesTokensTransfersInFromExternal.reduce(\n                (a, b) => a.add(b.walletAmount),\n                ZERO\n            )\n\n        const depositsWalletTotal = userEnters.reduce(\n            (a, b) => a.add(b.walletAmount),\n            ZERO\n        )\n\n        // Incl received + distributed to other staker. Used for calc reward because the were actually earned\n        const rageLeavesWithdrawnWalletTotal = userRageLeaves.reduce(\n            (a, b) => a.add(b.maxTokens),\n            ZERO\n        )\n\n        const rageLeavesReceivedWalletTotal = userRageLeaves.reduce(\n            (a, b) => a.add(b.receivedTokens),\n            ZERO\n        )\n\n        const withdrawsWalletTotal = userWithdraws.reduce(\n            (a, b) => a.add(b.receivedTokens),\n            ZERO\n        )\n\n        const totalLockedSharesCheck = [...userLeaves]\n            .filter(x => !x.withdrawTx)\n            .reduce((a, b) => a.add(b.shares), ZERO)\n\n        if (!totalLockedSharesCheck.eq(lockedShares)) {\n            console.error(\n                'locked shares different than check sum, user balance can be incorrect',\n                'lockedShares:',\n                lockedShares.toString(),\n                'totalLockedSharesCheck:',\n                totalLockedSharesCheck.toString()\n            )\n        }\n\n        const balanceSharesAvailable = balanceShares.sub(lockedShares).lt(ZERO)\n            ? ZERO \n            : balanceShares.sub(lockedShares)\n\n        const currentBalanceWalletAvailable = balanceSharesAvailable\n            .mul(shareValue)\n            .div(POOL_SHARES_TOKEN_DECIMALS_MUL)\n\n        // NOTE: used to calc actual balance in Wallet + rewards\n        const currentBalanceWallet = balanceShares\n            .mul(shareValue)\n            .div(POOL_SHARES_TOKEN_DECIMALS_MUL)\n\n        const currentBalanceSharesWalletValue = balanceShares\n            .mul(shareValue)\n            .div(POOL_SHARES_TOKEN_DECIMALS_MUL)\n\n        const hasInsufficentBalanceForUnbondCommitments = balanceShares.lt(\n            lockedShares\n        ) \n        const insufficientSharesAmoutForCurrentUnbonds =\n            hasInsufficentBalanceForUnbondCommitments\n                ? lockedShares.sub(balanceShares)\n                : ZERO\n\n        // NOTE: Used for rage leave because shareValue is can be different than in unbondCommitments\n        const currentBalanceWalletAtCurrentShareValue =\n            currentBalanceWalletAvailable\n        \n        // Enter, transfers in\n\t    const totalInTokenValue = depositsWalletTotal.add(totalSharesInTransfersWalletValue)\n        \n        // Withdraws, Transfers out, rage leaves\n        const totalOutTokenValue = withdrawsWalletTotal\n            .add(totalSharesOutTransfersWalletValue)\n            .add(rageLeavesWithdrawnWalletTotal)\n\n        const totalRewards = currentBalanceWallet\n            .add(totalOutTokenValue)\n            .sub(totalInTokenValue)\n\n\n        const hasActiveUnbondCommitments = !![...userLeaves].filter(\n            x => !x.withdrawTx\n        ).length\n\n        const stakings = userEnters\n            .concat(userLeaves)\n            .concat(userWithdraws)\n            .concat(userRageLeaves)\n            .concat(sharesTokensTransfersInFromExternal)\n            .concat(sharesTokensTransfersOut)\n            .sort((a, b) => a.blockNumber - b.blockNumber)\n\n        const withTimestamp = await Promise.all(\n            stakings.map(async stakingEvent => {\n                const { timestamp } = await ethProvider.getBlock(\n                    stakingEvent.blockNumber\n                )\n                return {\n                    ...stakingEvent,\n                    timestamp: timestamp * 1000,\n                }\n            })\n        )\n\n        const stats = {\n            // ...poolData,\n            balanceShares,\n            balanceSharesAvailable,\n            currentBalanceWallet,\n            currentBalanceWalletAvailable,\n            currentBalanceWalletAtCurrentShareValue,\n            currentBalanceSharesWalletValue,\n            hasInsufficentBalanceForUnbondCommitments,\n            insufficientSharesAmoutForCurrentUnbonds,\n            totalRewards,\n            totalSharesOutTransfersWalletValue,\n            totalSharesInTransfersWalletValue,\n            stakings: withTimestamp,\n            userLeaves,\n            depositsWalletTotal,\n            withdrawsWalletTotal,\n            leavesPendingToUnlockTotalMax,\n            leavesReadyToWithdrawTotalMax,\n            leavesPendingToUnlockTotalWallet,\n            leavesReadyToWithdrawTotalWallet,\n            hasActiveUnbondCommitments,\n            loaded: true,\n            userDataLoaded: true,\n            userShare,\n            remainingTime,\n            totalSharesOutTransfers,\n            totalSharesInTransfers,\n            rageLeavesReceivedWalletTotal,\n            rageLeavesWithdrawnWalletTotal,\n            totalInTokenValue,\n            totalOutTokenValue\n        }\n\n        return {\n            currentBalanceWalletAtCurrentShareValue: utils.formatUnits(\n                stats.currentBalanceWalletAtCurrentShareValue.toString(),\n                18\n            ),\n            balance: utils.formatUnits(\n                stats.currentBalanceWallet.toString(),\n                18\n            ),\n            poolShare: stats.userShare,\n            allTimeRewards: utils.formatUnits(\n                stats.totalRewards.toString(),\n                18\n            ),\n            totalDeposit: utils.formatUnits(\n                stats.depositsWalletTotal.toString(),\n                18\n            ),\n            totalWithdraws: utils.formatUnits(\n                stats.withdrawsWalletTotal.toString(),\n                18\n            ),\n            pendingToUnlock: utils.formatUnits(\n                stats.leavesPendingToUnlockTotalWallet.toString(),\n                18\n            ),\n            readyToWithdraw: utils.formatUnits(\n                stats.leavesReadyToWithdrawTotalWallet.toString(),\n                18\n            ),\n            totalInTokenValue: utils.formatUnits(\n                stats.totalInTokenValue.toString(),\n                18\n            ),\n            totalOutTokenValue: utils.formatUnits(\n                stats.totalOutTokenValue.toString(),\n                18\n            ),\n            rageLeavesReceivedWalletTotal: utils.formatUnits(\n                stats.rageLeavesReceivedWalletTotal.toString(),\n                18\n            ),\n            rageLeavesWithdrawnWalletTotal: utils.formatUnits(\n                stats.rageLeavesWithdrawnWalletTotal.toString(),\n                18\n            ),\n            totalSharesInTransfersWalletValue: utils.formatUnits(\n                stats.totalSharesInTransfersWalletValue.toString(),\n                18\n            ),\n            totalSharesOutTransfersWalletValue: utils.formatUnits(\n                stats.totalSharesOutTransfersWalletValue.toString(),\n                18\n            ),\n            remainingTime: stats.remainingTime,\n        }\n    }, [WALLET_ADDR, accountId, getAdexToStakingTransfersLogs])\n\n    useEffect(() => {\n        const getData = async (addresses, tokenLabel) => {\n            setIsLoading(true)\n            try {\n                const data = await getStats(addresses, tokenLabel)\n                setDetails(data)\n                setIsLoading(false)\n            } catch(e) {\n                console.error(e)\n                setIsLoading(false)\n            }\n        }\n        if (!accountId) return\n        getData(addresses, tokenLabel)\n    }, [accountId, addresses, getStats, setDetails, setIsLoading, tokenLabel])\n\n    return { details, isLoading } || {}\n}\n\nexport default useAmbireEarnDetails\n","import './AmbireEarnDetailsModal.scss'\n\nimport { MdClose } from 'react-icons/md'\nimport { useModals } from 'hooks'\nimport { Modal, Button } from 'components/common'\nimport { ToolTip } from 'components/common' \nimport useAmbireEarnDetails from 'hooks/useAmbireEarnDetails'\nimport { Loading } from 'components/common'\n\nconst AmbireEarnDetailsModal = ({ title = 'Details', apy, accountId, msToDaysHours, addresses, tokenLabel }) => {\n    const { hideModal } = useModals()\n    const { details, isLoading } = useAmbireEarnDetails({ accountId, addresses, tokenLabel })\n\n    const { \n        poolShare, \n        allTimeRewards, \n        totalDeposit, \n        totalWithdraws, \n        pendingToUnlock, \n        readyToWithdraw, \n        totalOutTokenValue,\n        totalInTokenValue,\n        rageLeavesReceivedWalletTotal,\n        rageLeavesWithdrawnWalletTotal,\n        totalSharesInTransfersWalletValue,\n        totalSharesOutTransfersWalletValue,\n        remainingTime, \n        currentBalanceWalletAtCurrentShareValue\n    } = details\n    const buttons = (<Button clear small icon={<MdClose />} onClick={hideModal}>Close</Button>)\n   \n    return (\n        <Modal id=\"wallet-more-details-modal\" title={title} buttons={buttons}>\n           {!isLoading ? (\n                <div className=\"table\">\n                    <div className=\"wrapper\">\n                        <div>Annual Percentage Yield (APY)</div><div>{apy}</div>\n                    </div>\n                    <div className=\"wrapper odd-rows-bg\">\n                        <div>Current Available Balance</div>\n                        <ToolTip label=\"* Warning: The pool share value may include your pending to unlock tokens.\">\n                            <div>{parseFloat(currentBalanceWalletAtCurrentShareValue).toFixed(4)} {tokenLabel} (Pool share*: {(poolShare * 100).toFixed(2)}%)</div>\n                        </ToolTip>\n                    </div>\n                    <div className=\"wrapper\">\n                        <div>All time rewards</div><div>{parseFloat(allTimeRewards).toFixed(4)} {tokenLabel}</div>\n                    </div>\n                    <div className=\"wrapper odd-rows-bg\">\n                        <div>Total deposit</div>\n                        <ToolTip label={`Deposits: ${parseFloat(totalDeposit).toFixed(4)} ${tokenLabel} \n                                        \\nTransfers in: ${parseFloat(totalSharesInTransfersWalletValue).toFixed(4)} ${tokenLabel}`}>\n                            <div>{parseFloat(totalInTokenValue).toFixed(4)} {tokenLabel}</div>\n                        </ToolTip>\n                    </div>\n                    <div className=\"wrapper\">\n                        <div>Total withdraws</div>\n                        <ToolTip label={`Withdrawals: ${parseFloat(totalWithdraws).toFixed(4)} ${tokenLabel}\n                                    \\nTransfers out: ${parseFloat(totalSharesOutTransfersWalletValue).toFixed(4)} ${tokenLabel} \n                                    \\nRage leaves: \n                                    \\nReceived ${parseFloat(rageLeavesReceivedWalletTotal).toFixed(4)} ${tokenLabel} \n                                    \\nWithdrawn ${parseFloat(rageLeavesWithdrawnWalletTotal).toFixed(4)} ${tokenLabel}`}>\n                            <div>{parseFloat(totalOutTokenValue).toFixed(4)} {tokenLabel}</div>\n                        </ToolTip>\n                    </div>\n                    <div className=\"wrapper odd-rows-bg\">\n                        <div>Total pending to unlock</div>\n                        <div>\n                            {remainingTime > 0 \n                                ? `${msToDaysHours(remainingTime)} until ${parseFloat(pendingToUnlock).toFixed(4)} ${tokenLabel} becomes available for withdraw.` \n                                : 'No pending unlocks'}\n                        </div>\n                    </div>\n                    <div className=\"wrapper\">\n                        <div>Ready to withdraw</div>\n                        <div>\n                            {parseFloat(readyToWithdraw) > 0 \n                            ? `${parseFloat(readyToWithdraw).toFixed(4)} ${tokenLabel}`\n                            : 'No amount for withdrawing'}\n                        </div>\n                    </div>\n                </div>\n            ) : <div className='loading-wrapper'><Loading/></div>}\n        </Modal>\n    )\n}\n\nexport default AmbireEarnDetailsModal\n"],"sourceRoot":""}