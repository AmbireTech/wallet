{"version":3,"sources":["components/Wallet/Transfer/Send/Send.module.scss","components/Wallet/Transfer/Sell/Sell.module.scss","components/Wallet/Transfer/Addresses/Addresses.module.scss","components/Wallet/Transfer/Transfer.module.scss","components/common/Tabs/Tabs.module.scss","components/Wallet/Transfer/Send/Send.js","components/Wallet/Transfer/Sell/Sell.js","components/Wallet/Transfer/Addresses/Addresses.js","components/common/Tabs/Tabs.js","components/Wallet/Transfer/Transfer.js","lib/icons.js","lib/formatters.js","../node_modules/@babel/runtime/helpers/defineProperty.js","../node_modules/@babel/runtime/helpers/objectSpread2.js","lib/validations/formValidations.js","components/Modals/AddAddressModal/AddAddressModal.js","../node_modules/ambire-common/src/helpers/sendTxnHelpers/sendTxnHelpers.ts","../node_modules/ambire-common/src/services/isFeeCollectorTxn/isFeeCollectorTxn.ts","../node_modules/ambire-common/src/hooks/useGasTankData/index.ts","../node_modules/ambire-common/src/hooks/useGasTankData/useGasTankData.ts"],"names":["module","exports","ERC20","Interface","require","unsupportedSWPlatforms","Send","history","portfolio","selectedAcc","selectedNetwork","addRequest","addressBook","relayerURL","address","setAddress","gasTankDetails","asset","setAsset","tokenAddress","selectedAsset","addresses","addAddress","removeAddress","isKnownAddress","feeAssetsRes","useGasTankData","network","useRelayerData","feeAssetsPerNetwork","length","filter","item","id","disableGasTankDeposit","addToast","useToasts","useState","amount","setAmount","bigNumberHexAmount","setBigNumberHexAmount","uDAddress","setUDAddress","ensAddress","setEnsAddress","disabled","setDisabled","addressConfirmed","setAddressConfirmed","sWAddressConfirmed","setSWAddressConfirmed","newAddress","setNewAddress","success","messages","validationFormMgs","setValidationFormMgs","feeBaseTokenWarning","setFeeBaseTokenWarning","timer","useRef","assetsItems","isTopUp","tokens","some","i","toLowerCase","map","label","symbol","img","tokenImageUrl","value","icon","fallbackIcon","getTokenIcon","useMemo","maxAmount","maxAmountFormatted","balanceRaw","decimals","balance","ethers","utils","formatUnits","formatFloatTokenAmount","showSWAddressWarning","Number","networks","includes","onAmountChange","bigNumberAmount","parseUnits","toHexString","useEffect","gasFeeToken","find","ft","baseToken","feeBaseToken","toUpperCase","replace","pathname","isValidSendTransferAmount","validateSendTransferAmount","startsWith","indexOf","isValidRecipientAddress","validateSendTransferAddress","message","current","clearTimeout","validateForm","a","resolveUDomain","unstoppableDomainsChain","UDAddress","bip44Item","getBip44Items","resolveENSDomain","ensAddr","isUDAddress","selectedAddress","isEnsAddress","setTimeout","catch","console","error","amountLabel","className","styles","sortedAssetsItems","sort","b","isCurrNetworkBalanceLoading","wrapper","content","searchable","defaultValue","items","onChange","gasTankConvertMsg","precision","onInput","button","onButtonClick","validationError","size","gasTankMsg","recipientField","placeholder","info","recipientInput","inputContainerClass","textInputContainer","cn","ensLogo","ensLogoActive","udomainsLogo","udomainsLogoActive","x","onClose","onSelectAddress","dropdown","confirmations","onAddNewAddress","binanceAddressWarning","join","href","target","rel","labelClassName","checkBoxLabel","checked","primaryGradient","onClick","recipientAddress","txn","to","data","encodeFunctionData","req","Date","now","type","chainId","account","meta","addressLabel","e","transferButton","Sell","walletAddress","networkDetails","useProviders","openGuardarian","isLoading","provider","shouldBeDisabled","logo","src","GUARDARIAN_LOGO","alt","details","fees","limits","currencies","Addresses","showModal","useModals","modalInputs","inputType","validate","isValidAddress","addAddressModal","AddAddressModal","title","inputs","name","titleClassName","AddressList","noAccounts","addressList","addressesButton","Tabs","firstTabLabel","secondTabLabel","firstTab","secondTab","panelClassName","currentTab","setCurrentTab","Panel","tabs","active","withRouter","props","state","useLocation","tokenAddressOrSymbol","useParams","accountPresets","feeCollector","style","justifyContent","panel","customIcons","zapperStorageTokenIcons","networkId","addr","net","useGrouping","maximumFractionDigits","isNaN","parseFloat","minimumFractionDigits","Math","min","toLocaleString","undefined","max","err","obj","key","Object","defineProperty","enumerable","configurable","writable","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","sym","getOwnPropertyDescriptor","push","apply","arguments","source","forEach","getOwnPropertyDescriptors","defineProperties","validateAddress","validateAddAuthSignerAddress","isValidAddr","isKnownTokenOrContract","parsedAmount","slice","gt","validateSendNftAddress","metadata","owner","hideModal","isDisabled","inputsFields","input","ref","createRef","getUDomain","isFound","domain","uDAddr","isFormValid","isUDField","every","v","buttons","clear","small","values","getAddedGas","token","ERC20AbiInterface","ERC20ABI","TRANSFER_SIGHASH","getSighash","getFunction","format","isFeeCollectorTxn","res","decodeFunctionData","BigNumber","from","_value","getTxnTransferInfo","_to","cacheBreak","useCacheBreak","urlGetBalance","urlGetFeeAssets","urlGetTransactions","url","balancesRes","executedTxnsRes","gasTankBalances","balanceInUSD","reduce","gasTankTxns","txns","gasTankFee","executedTxns","gasTankFilledTxns","transactions","depositTxns","txId","submittedAt","identity","rest","filteredTxns","txnCall","fillTxn","getGasTankFilledTxns","availableFeeAssets","balanceUSD","price","totalSavedResult","feeTokenDetails","feeToken","savedGas","saved","feeInUSDPerGas","cashback","toString"],"mappings":"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","file":"static/js/19.dc9302ab.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"transferButton\":\"Send_transferButton__11xeZ\",\"wrapper\":\"Send_wrapper__22j17\",\"confirmations\":\"Send_confirmations__3pBT1\",\"validationError\":\"Send_validationError__f9914\",\"content\":\"Send_content__2WlaZ\",\"amountLabel\":\"Send_amountLabel__Oa2V0\",\"separator\":\"Send_separator__27pbS\",\"gasTankMsg\":\"Send_gasTankMsg__1bNA-\",\"gasTankConvertMsg\":\"Send_gasTankConvertMsg__2hTnp\",\"recipientField\":\"Send_recipientField__1ejHB\",\"recipientInput\":\"Send_recipientInput__3iQR1\",\"dropdown\":\"Send_dropdown__1D7Lq\",\"udomainsLogo\":\"Send_udomainsLogo__359bF\",\"udomainsLogoActive\":\"Send_udomainsLogoActive__3_M1J\",\"ensLogo\":\"Send_ensLogo__9dZju\",\"ensLogoActive\":\"Send_ensLogoActive__2loey\",\"binanceAddressWarning\":\"Send_binanceAddressWarning__X8yPH\",\"checkBoxLabel\":\"Send_checkBoxLabel__2m7tQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Sell_wrapper__1yYqN\",\"provider\":\"Sell_provider__2chW1\",\"logo\":\"Sell_logo__z0Q48\",\"details\":\"Sell_details__2bFOP\",\"type\":\"Sell_type__1jzeb\",\"fees\":\"Sell_fees__2D6NA\",\"limits\":\"Sell_limits__mjYuK\",\"currencies\":\"Sell_currencies__1F86P\",\"disabled\":\"Sell_disabled__1zZ4u\",\"networkWarning\":\"Sell_networkWarning__15hzn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"addressesButton\":\"Addresses_addressesButton__2gw1d\",\"wrapper\":\"Addresses_wrapper__2fkD9\",\"addressList\":\"Addresses_addressList__1oXX6\",\"title\":\"Addresses_title__dwjZC\",\"separator\":\"Addresses_separator__1OSZH\",\"item\":\"Addresses_item__2G0-3\",\"details\":\"Addresses_details__3NAv3\",\"address\":\"Addresses_address__1RlKw\",\"button\":\"Addresses_button__235kc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"panel\":\"Transfer_panel__3xc_N\",\"wrapper\":\"Transfer_wrapper__1zpDw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tabs\":\"Tabs_tabs__1TQob\",\"button\":\"Tabs_button__2_ceT\",\"active\":\"Tabs_active__1xX0X\"};","import { BsXLg } from 'react-icons/bs'\nimport { MdWarning } from 'react-icons/md'\nimport { useEffect, useMemo, useState, useRef } from 'react'\nimport { ethers } from 'ethers'\nimport { Interface } from 'ethers/lib/utils'\nimport { useToasts } from 'hooks/toasts'\nimport { TextInput, NumberInput, Button, Select, Loading, AddressBook, AddressWarning, NoFundsPlaceholder, Checkbox, ToolTip } from 'components/common'\nimport { validateSendTransferAddress, validateSendTransferAmount } from 'lib/validations/formValidations'\nimport { resolveUDomain } from 'lib/unstoppableDomains'\nimport { MdInfo } from 'react-icons/md'\nimport networks from 'consts/networks'\nimport { getTokenIcon } from 'lib/icons'\nimport { formatFloatTokenAmount } from 'lib/formatters'\nimport { resolveENSDomain, getBip44Items } from 'lib/ensDomains'\nimport useGasTankData from 'ambire-common/src/hooks/useGasTankData'\nimport { useRelayerData } from 'hooks'\nimport cn from 'classnames'\n\nimport styles from './Send.module.scss'\n\nconst ERC20 = new Interface(require('adex-protocol-eth/abi/ERC20'))\nconst unsupportedSWPlatforms = ['Binance', 'Huobi', 'KuCoin', 'Gate.io', 'FTX']\n\nconst Send = ({ \n  history, \n  portfolio, \n  selectedAcc, \n  selectedNetwork, \n  addRequest, \n  addressBook, \n  relayerURL, \n  address, \n  setAddress, \n  gasTankDetails, \n  asset, \n  setAsset, \n  tokenAddress, \n  selectedAsset\n}) => {\n  const { addresses, addAddress, removeAddress, isKnownAddress } = addressBook\n  const {\n      feeAssetsRes\n    } = useGasTankData({\n      relayerURL,\n      selectedAcc,\n      network: selectedNetwork,\n      portfolio,\n      useRelayerData\n    })\n  const feeAssetsPerNetwork = feeAssetsRes && feeAssetsRes.length && feeAssetsRes.filter(item => (item.network === selectedNetwork.id) && !item.disableGasTankDeposit)\n  const { addToast } = useToasts()\n\n  const [amount, setAmount] = useState(0)\n  const [bigNumberHexAmount, setBigNumberHexAmount] = useState('')\n  const [uDAddress, setUDAddress] = useState('')\n  const [ensAddress, setEnsAddress] = useState('')\n  const [disabled, setDisabled] = useState(true)\n  const [addressConfirmed, setAddressConfirmed] = useState(false)\n  const [sWAddressConfirmed, setSWAddressConfirmed] = useState(false)\n  const [newAddress, setNewAddress] = useState('')\n  const [validationFormMgs, setValidationFormMgs] = useState({\n      success: {\n          amount: false,\n          address: false\n      },\n      messages: {\n          amount: '',\n          address: ''\n      }\n  })\n  const [feeBaseTokenWarning, setFeeBaseTokenWarning] = useState('')\n  const timer = useRef(null)\n  let eligibleFeeTokens = null\n  if (gasTankDetails?.isTopUp) {\n      eligibleFeeTokens = portfolio.tokens.filter(item => feeAssetsPerNetwork && feeAssetsPerNetwork?.some(i => i.address.toLowerCase() === item.address.toLowerCase()))\n  } else eligibleFeeTokens = portfolio.tokens\n  \n  const assetsItems = eligibleFeeTokens.map(({ label, symbol, address, img, tokenImageUrl, network }) => ({\n      label: label || symbol,\n      value: address,\n      icon: img || tokenImageUrl,\n      fallbackIcon: getTokenIcon(network, address)\n  }))\n\n  const { maxAmount, maxAmountFormatted } = useMemo(() => {\n      if (!selectedAsset) return { maxAmount: '0', maxAmountFormatted: '0.00' };\n      const { balanceRaw, decimals, balance } = selectedAsset\n      return {\n          maxAmount: ethers.utils.formatUnits(balanceRaw, decimals),\n          maxAmountFormatted: formatFloatTokenAmount(balance, true, decimals)\n      }\n  }, [selectedAsset])\n\n  const showSWAddressWarning = useMemo(() =>\n      !gasTankDetails && Number(tokenAddress) === 0 && networks.map(({ id }) => id).filter(id => id !== 'ethereum').includes(selectedNetwork.id)\n      , [gasTankDetails, tokenAddress, selectedNetwork.id])\n\n  const setMaxAmount = () => onAmountChange(maxAmount)\n\n  const onAmountChange = value => {\n      if (value) {\n          const { decimals } = selectedAsset\n          const bigNumberAmount = ethers.utils.parseUnits(value, decimals).toHexString()\n          setBigNumberHexAmount(bigNumberAmount)\n      }\n\n      setAmount(value)\n  }\n\n  const sendTx = () => {\n      const recipientAddress = uDAddress ? uDAddress : ensAddress ? ensAddress :  address\n      if (!bigNumberHexAmount) return \n      \n      try {\n          const txn = {\n              to: selectedAsset.address,\n              value: '0',\n              data: ERC20.encodeFunctionData('transfer', [recipientAddress, bigNumberHexAmount])\n          }\n\n          if (Number(selectedAsset.address) === 0) {\n              txn.to = recipientAddress\n              txn.value = bigNumberHexAmount\n              txn.data = '0x'\n          }\n\n          let req = {\n              id: `transfer_${Date.now()}`,\n              type: 'eth_sendTransaction',\n              chainId: selectedNetwork.chainId,\n              account: selectedAcc,\n              txn,\n              meta: null\n          }\n\n          if (uDAddress) {\n              req.meta = {\n                  addressLabel: {\n                      addressLabel: address,\n                      address: uDAddress\n                  }\n              }\n          } else if (ensAddress) {\n              req.meta = {\n                  addressLabel: {\n                      addressLabel: address,\n                      address: ensAddress\n                  }\n              }\n          }\n\n          addRequest(req)\n\n          setAmount(0)\n      } catch (e) {\n          console.error(e)\n          addToast(`Error: ${e.message || e}`, { error: true })\n      }\n  }\n\n  useEffect(() => {\n      // check gasTank topUp with token for convertion\n      setFeeBaseTokenWarning('')\n      if (gasTankDetails?.isTopUp){\n          const gasFeeToken = feeAssetsPerNetwork && feeAssetsPerNetwork.find(ft => ft?.address?.toLowerCase() === selectedAsset?.address?.toLowerCase())\n          if (gasFeeToken?.baseToken) {\n              const feeBaseToken = feeAssetsPerNetwork && feeAssetsPerNetwork.find(ft => ft.address.toLowerCase() === gasFeeToken.baseToken.toLowerCase())\n              setFeeBaseTokenWarning(`Token ${gasFeeToken.symbol.toUpperCase()} will be converted to ${feeBaseToken.symbol.toUpperCase()} without additional fees.`)\n          }\n      }\n  }, [feeAssetsPerNetwork, gasTankDetails?.isTopUp, selectedAsset])\n\n  useEffect(() => {\n      setAmount(0)\n      setBigNumberHexAmount('')\n      setSWAddressConfirmed(false)\n  }, [asset, selectedNetwork.id])\n\n  useEffect(() => {\n      if (!selectedAsset) return\n      history.replace({ pathname: `/wallet/transfer/${Number(asset) !== 0 ? asset : selectedAsset.symbol}` })\n  }, [asset, history, selectedAsset])\n\n  useEffect(() => {\n      const isValidSendTransferAmount = validateSendTransferAmount(amount, selectedAsset)\n\n      if (address.startsWith('0x') && (address.indexOf('.') === -1)) {\n          if (uDAddress !== '') setUDAddress('')\n          if (ensAddress !== '') setEnsAddress('')\n          const isValidRecipientAddress = validateSendTransferAddress(address, selectedAcc, addressConfirmed, isKnownAddress)\n\n          setValidationFormMgs({\n              success: {\n                  amount: isValidSendTransferAmount.success,\n                  address: isValidRecipientAddress.success\n              },\n              messages: {\n                  amount: isValidSendTransferAmount.message ? isValidSendTransferAmount.message : '',\n                  address: isValidRecipientAddress.message ? isValidRecipientAddress.message : ''\n              }\n          })\n\n          setDisabled(!isValidRecipientAddress.success || !isValidSendTransferAmount.success || (showSWAddressWarning && !sWAddressConfirmed))\n      } else {\n          if (timer.current) {\n              clearTimeout(timer.current)\n          }\n\n          const validateForm = async () => {\n              const UDAddress = await resolveUDomain(address, selectedAsset ? selectedAsset.symbol : null, selectedNetwork.unstoppableDomainsChain)\n              const bip44Item = getBip44Items(selectedAsset ? selectedAsset.symbol : null)\n              const ensAddr = await resolveENSDomain(address, bip44Item)\n              timer.current = null\n              const isUDAddress = UDAddress ? true : false\n              const isEnsAddress = ensAddr ? true : false\n              let selectedAddress = ''\n              if (isEnsAddress) selectedAddress = ensAddr\n              else if (isUDAddress) selectedAddress = UDAddress\n              else selectedAddress = address\n\n              const isValidRecipientAddress = validateSendTransferAddress(selectedAddress, selectedAcc, addressConfirmed, isKnownAddress, isUDAddress, isEnsAddress)\n\n              setUDAddress(UDAddress)\n              setEnsAddress(ensAddr)\n              setValidationFormMgs({\n                  success: {\n                      amount: isValidSendTransferAmount.success,\n                      address: isValidRecipientAddress.success\n                  },\n                  messages: {\n                      amount: isValidSendTransferAmount.message ? isValidSendTransferAmount.message : '',\n                      address: isValidRecipientAddress.message ? isValidRecipientAddress.message : ''\n                  }\n              })\n\n              setDisabled(!isValidRecipientAddress.success || !isValidSendTransferAmount.success || (showSWAddressWarning && !sWAddressConfirmed))\n          }\n\n          timer.current = setTimeout(async () => {\n              return validateForm().catch(console.error)\n          }, 300)\n      }\n      return () => clearTimeout(timer.current)\n  }, [address, amount, selectedAcc, selectedAsset, addressConfirmed, showSWAddressWarning, sWAddressConfirmed, isKnownAddress, addToast, selectedNetwork, addAddress, uDAddress, disabled, ensAddress])\n\n    const amountLabel = <div className={styles.amountLabel}>Available Amount: <span>{maxAmountFormatted} {selectedAsset?.symbol}</span></div>\n\n    const sortedAssetsItems = [\n        ...assetsItems.filter(i => i.label.toLowerCase() === 'wallet'),\n        ...assetsItems.filter(i => i.label.toLowerCase() !== 'wallet').sort((a, b) => a.label.toLowerCase() > b.label.toLowerCase() ? 1 : -1),\n    ]\n\n    if (portfolio.isCurrNetworkBalanceLoading) {\n        return <Loading />\n    }\n\n\n    return sortedAssetsItems.length ? (<div className={styles.wrapper}>\n            <div className={styles.content}>\n                <Select searchable defaultValue={asset} items={sortedAssetsItems} onChange={({ value }) => setAsset(value)}/>\n                { feeBaseTokenWarning ? <p className={styles.gasTankConvertMsg}><MdWarning /> {feeBaseTokenWarning}</p> : <></>}\n                <NumberInput\n                    label={amountLabel}\n                    value={amount}\n                    precision={selectedAsset?.decimals}\n                    onInput={onAmountChange}\n                    button=\"MAX\"\n                    onButtonClick={() => setMaxAmount()}\n                />\n                \n                { validationFormMgs.messages.amount && \n                    (<div className={styles.validationError}><BsXLg size={12}/>&nbsp;{validationFormMgs.messages.amount}</div>)}\n                { gasTankDetails ? <p className={styles.gasTankMsg}><MdWarning /> {gasTankDetails?.gasTankMsg}</p> : (<div className={styles.recipientField}>\n                    <TextInput\n                        placeholder=\"Recipient\"\n                        info=\"Please double-check the recipient address, blockchain transactions are not reversible.\"\n                        value={address}\n                        onInput={setAddress}\n                        className={styles.recipientInput}\n                        inputContainerClass={styles.textInputContainer}\n                    />\n                    <ToolTip label={!ensAddress ? 'You can use Ethereum Name ServiceⓇ' : 'Valid Ethereum Name ServicesⓇ domain'}>\n                        <div className={cn(styles.ensLogo, {[styles.ensLogoActive]: ensAddress})} />\n                    </ToolTip>\n                    <ToolTip label={!uDAddress ? 'You can use Unstoppable domainsⓇ' : 'Valid Unstoppable domainsⓇ domain'}>\n                        <div className={cn(styles.udomainsLogo, { [styles.udomainsLogoActive]: uDAddress })} />\n                    </ToolTip>\n                    <AddressBook\n                        addresses={addresses.filter(x => x.address !== selectedAcc)}\n                        addAddress={addAddress}\n                        removeAddress={removeAddress}\n                        newAddress={newAddress}\n                        onClose={() => setNewAddress(null)}\n                        onSelectAddress={address => setAddress(address)}\n                        selectedNetwork={selectedNetwork}\n                        className={styles.dropdown}\n                    />\n                </div>)}\n                <div className={styles.confirmations}>\n                    { validationFormMgs.messages.address && \n                        (<div className={styles.validationError}><BsXLg size={12}/>&nbsp;{validationFormMgs.messages.address}</div>)}\n                    <AddressWarning\n                        address={address}\n                        onAddNewAddress={() => setNewAddress(address)}\n                        onChange={(value) => setAddressConfirmed(value)}\n                        isKnownAddress={isKnownAddress}\n                        uDAddress={uDAddress}\n                        ensAddress={ensAddress}\n                    />\n                    {\n                        showSWAddressWarning ?\n                            <div\n                                className={styles.binanceAddressWarning}\n                            >\n                                <Checkbox\n                                    label={<span>\n                                        I confirm this address is not a {unsupportedSWPlatforms.join(' / ')} address: <br />\n                                        These platforms do not support ${selectedAsset?.symbol} deposits from smart wallets\n                                        <a href='https://help.ambire.com/hc/en-us/articles/4415473743506-Statement-on-MATIC-BNB-deposits-to-Binance' target='_blank' rel='noreferrer'><MdInfo size={20} /></a>\n                                    </span>}\n                                    labelClassName={styles.checkBoxLabel}\n                                    checked={sWAddressConfirmed}\n                                    onChange={({ target }) => setSWAddressConfirmed(target.checked)}\n                                />\n                            </div>\n                            :\n                            null\n                    }    \n                </div>\n            </div>\n            <Button primaryGradient disabled={disabled} onClick={sendTx} className={styles.transferButton}>Send</Button>\n        </div>) : <NoFundsPlaceholder/>\n}\n\nexport default Send","import cn from 'classnames'\nimport useProviders from 'components/Wallet/Deposit/Providers/useProviders'\nimport { Loading } from 'components/common'\nimport GUARDARIAN_LOGO from 'resources/payment-providers/guardarian.svg'\nimport styles from './Sell.module.scss'\n\nconst Sell = ({ walletAddress, networkDetails, relayerURL, portfolio }) => {\n  const networks = ['ethereum', 'polygon', 'binance-smart-chain', 'fantom']\n\n  const { openGuardarian, isLoading } = useProviders({ walletAddress, selectedNetwork: networkDetails.id, relayerURL, portfolio })\n\n  const shouldBeDisabled = (networks) => networks.includes(networkDetails.id)\n\n  const handleSell = () => openGuardarian('sell')\n\n  return (\n    <div className={styles.wrapper}>\n      <div className={cn(styles.provider, { [styles.disabled]: !shouldBeDisabled(networks) })} onClick={handleSell}>\n          <div className={styles.logo}>\n            <img src={GUARDARIAN_LOGO} alt='guardarian-logo'></img>\n          </div>\n          { isLoading.includes('Guardarian') ? <div><Loading/></div> :\n          <div className={styles.details}>\n              <div className={styles.type}>\n                Buy with Bank Transfer, Credit/Debit Card, Sell Crypto\n              </div>\n              <div className={styles.fees}>\n                Fees: from 2%\n              </div>\n              <div className={styles.limits}>\n                Limits: up to 15k EUR/monthly on and off ramp\n              </div>\n              <div className={styles.currencies}>\n                Currencies: GBP, EUR, USD and many more\n              </div>\n          </div>\n          }\n      </div>\n    </div>\n  )\n}\n\nexport default Sell","import styles from './Addresses.module.scss'\n\nimport AddressList from 'components/common/AddressBook/AddressList/AddressList'\nimport { Button, Panel } from 'components/common'\nimport { isValidAddress } from 'ambire-common/src/services/address'\nimport AddAddressModal from 'components/Modals/AddAddressModal/AddAddressModal'\nimport { useModals } from 'hooks'\n\nconst Addresses = ({ addresses, addAddress, removeAddress, onSelectAddress, selectedNetwork }) => {\n    const { showModal } = useModals()\n\n    const modalInputs = [\n        { inputType: 'name', label: 'Name', placeholder: 'Address title' },\n        { inputType: 'address', label: 'Address / Unstoppable domainsⓇ / ENSⓇ', placeholder: 'Address / Unstoppable Domains / ENS', validate: value => isValidAddress(value) } \n    ]\n\n    const addAddressModal = <AddAddressModal \n            title=\"Add New Address\" \n            selectedNetwork={selectedNetwork} \n            inputs={modalInputs} \n            onClose={([name, address, type]) => addAddress(name, address, type)}\n        ></AddAddressModal>\n    const showInputModal = () => showModal(addAddressModal)\n\n    return (\n        <Panel title=\"Address Book\" titleClassName={styles.title} className={styles.wrapper}>\n            <AddressList\n                noAccounts={true}\n                addresses={addresses}\n                removeAddress={removeAddress}\n                onSelectAddress={onSelectAddress}\n                className={styles.addressList}\n            />\n            <Button onClick={showInputModal} className={styles.addressesButton}>Add Address</Button>\n        </Panel>\n    )\n}\n\nexport default Addresses","import cn from 'classnames'\nimport { useState } from 'react'\nimport Panel from 'components/common/Panel/Panel'\nimport styles from './Tabs.module.scss'\n\nconst Tabs = ({ \n  firstTabLabel, \n  secondTabLabel,\n  firstTab,\n  secondTab,\n  panelClassName,\n}) => {\n  const [currentTab, setCurrentTab] = useState(1)\n\n  const handleOpenFirst = () => setCurrentTab(1)\n  const handleOpenSecond = () => setCurrentTab(2)\n\n  return (\n    <Panel className={cn(panelClassName)}>\n      <div className={styles.tabs}>\n        <button \n          onClick={handleOpenFirst}\n          className={cn(styles.button, {[styles.active]: currentTab === 1})}\n        >\n          {firstTabLabel}\n        </button>\n        <button \n          onClick={handleOpenSecond}\n          className={cn(styles.button, {[styles.active]: currentTab === 2})}\n        >\n          {secondTabLabel}\n        </button>\n      </div>\n      {currentTab === 1 ? firstTab : secondTab}\n    </Panel>\n  )\n}\n\nexport default Tabs","import { useLocation } from 'react-router-dom'\nimport { useState } from 'react'\nimport { withRouter } from 'react-router'\nimport { useParams } from 'react-router'\nimport accountPresets from 'ambire-common/src/constants/accountPresets'\nimport { isValidAddress } from 'ambire-common/src/services/address'\n\nimport Send from './Send/Send'\nimport Sell from './Sell/Sell'\nimport Addresses from './Addresses/Addresses'\n\nimport networks from 'consts/networks'\n\nimport styles from './Transfer.module.scss'\nimport Tabs from 'components/common/Tabs/Tabs'\n\nconst Transfer = (props) => {\n    const { portfolio, selectedNetwork, addressBook, selectedAcc, relayerURL } = props\n    const { addresses, addAddress, removeAddress } = addressBook\n\n    const networkDetails = networks.find(({ id }) => id === selectedNetwork.id)\n    \n    const { state } = useLocation()\n    const { tokenAddressOrSymbol } = useParams()\n    \n    const tokenAddress = isValidAddress(tokenAddressOrSymbol) ? tokenAddressOrSymbol : portfolio.tokens.find(({ symbol }) => symbol === tokenAddressOrSymbol)?.address || null\n\n    const [asset, setAsset] = useState(tokenAddress)\n    const [gasTankDetails] = useState(state ? state : null)\n    const [address, setAddress] = useState(gasTankDetails ? accountPresets.feeCollector : '')\n    \n    const selectedAsset = portfolio?.tokens.find(({ address }) => address === asset)\n\n    return (\n        <div className={styles.wrapper} style={{ justifyContent: gasTankDetails ? 'center' : '' }}>\n            <Tabs \n                firstTabLabel='Send'\n                secondTabLabel='Sell Crypto'\n                firstTab={\n                    <Send \n                        {...props}\n                        address={address} \n                        setAddress={setAddress} \n                        gasTankDetails={gasTankDetails} \n                        asset={asset} \n                        setAsset={setAsset} \n                        tokenAddress={tokenAddress} \n                        selectedAsset={selectedAsset} \n                    />\n                }\n                secondTab={\n                    <Sell \n                        walletAddress={selectedAcc}\n                        networkDetails={networkDetails}\n                        relayerURL={relayerURL}\n                        portfolio={portfolio}\n                    />\n                }\n                panelClassName={styles.panel}\n            />\n           {!gasTankDetails && <Addresses\n                selectedAsset={selectedAsset}\n                selectedNetwork={selectedNetwork}\n                addresses={addresses}\n                addAddress={addAddress}\n                removeAddress={removeAddress}\n                onSelectAddress={address => setAddress(address)}\n            />}\n        </div>\n    )\n}\n\nexport default withRouter(Transfer)","const customIcons = {\n    '0xb468a1e5596cfbcdf561f21a10490d99b4bb7b68': 'https://upload.wikimedia.org/wikipedia/commons/thumb/5/5a/Jeff_Sessions_with_Elmo_and_Rosita_%28cropped%29.jpg/220px-Jeff_Sessions_with_Elmo_and_Rosita_%28cropped%29.jpg', // TEST Polygon ELMO token,\n    '0x88800092ff476844f74dc2fc427974bbee2794ae': 'https://raw.githubusercontent.com/AmbireTech/ambire-brand/main/logos/ambire_logo_white_bg_250x250.png', // Ambire Wallet Token\n    '0x47cd7e91c3cbaaf266369fe8518345fc4fc12935': 'https://raw.githubusercontent.com/AmbireTech/ambire-brand/main/logos/xwallet_250x250.png', //xWallet\n    '0xb6456b57f03352be48bf101b46c1752a0813491a': 'https://raw.githubusercontent.com/AmbireTech/adex-brand/master/logos/vaporwave-adex-2.png', // ADX-STAKING\n    '0xd9a4cb9dc9296e111c66dfacab8be034ee2e1c2c': 'https://raw.githubusercontent.com/AmbireTech/adex-brand/master/logos/ADX-loyalty%40256x256.png', // ADX-LOYALTY\n    '0xec3b10ce9cabab5dbf49f946a623e294963fbb4e': 'https://raw.githubusercontent.com/AmbireTech/ambire-brand/main/logos/xwallet_250x250.png', // Polygons test xWallet\n    '0xe9415e904143e42007865e6864f7f632bd054a08': 'https://raw.githubusercontent.com/AmbireTech/ambire-brand/main/logos/Ambire_logo_250x250.png', // Polygons test Wallet\n    '0xade00c28244d5ce17d72e40330b1c318cd12b7c3': 'https://raw.githubusercontent.com/AmbireTech/ambire-brand/main/official-logos/Ambire-AdEx/Ambire_AdEx_Symbol_color_white_bg.png' //ADX-TOKEN\n}\n\nconst zapperStorageTokenIcons = 'https://storage.googleapis.com/zapper-fi-assets/tokens'\n\nexport function getTokenIcon(networkId = '', address = '') {\n    const addr = address.toLowerCase()\n    const net = networkId.toLowerCase()\n    return customIcons[addr] || `${zapperStorageTokenIcons}/${net}/${addr}.png`\n}\n","export function formatFloatTokenAmount(amount, useGrouping = true, maximumFractionDigits = 18) {\n    if (isNaN(amount) || isNaN(parseFloat(amount)) || !(typeof amount === 'number' || typeof amount === 'string')) return amount\n\n    try {\n        const minimumFractionDigits = Math.min(2, maximumFractionDigits || 0)\n        return ((typeof amount === 'number') ? amount : parseFloat(amount))\n            .toLocaleString(undefined,\n                {\n                    useGrouping,\n                    maximumFractionDigits: Math.max(minimumFractionDigits, maximumFractionDigits),\n                    minimumFractionDigits\n                })\n    } catch (err) {\n        console.error(err)\n        return amount\n    }\n}\n\n// Round a floating point number to a specific decimal places, i.e. 1.156 => 1.16\nexport function roundFloatingNumber(number, places = 2) {\n  const decimals = Math.pow(10, places)\n\n  return Math.round((number + Number.EPSILON) * decimals) / decimals\n}\n","function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nmodule.exports = _defineProperty;","var defineProperty = require(\"./defineProperty\");\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nmodule.exports = _objectSpread2;","import { parseUnits } from 'ethers/lib/utils'\nimport { isValidAddress, isKnownTokenOrContract } from 'ambire-common/src/services/address'\nimport accountPresets from 'ambire-common/src/constants/accountPresets'\n\nconst validateAddress = address => {\n    if (!(address && address.length)) {\n        return {\n            success: false,\n            message: ''\n        }\n    }\n\n    if (!(address && isValidAddress(address))) {\n        return {\n            success: false,\n            message: 'Invalid address.'\n        }\n    }\n\n    return { success: true }\n}\n\nconst validateAddAuthSignerAddress = (address, selectedAcc) => {\n    const isValidAddr = validateAddress(address)\n    if (!isValidAddr.success) return isValidAddr\n\n    if (address && selectedAcc && (address === selectedAcc)) {\n        return {\n            success: false,\n            message: 'The entered address should be different than the your own account address.'\n        }\n    }\n    \n    return { success: true }\n}\n\nconst validateSendTransferAddress = (address, selectedAcc, addressConfirmed, isKnownAddress, isUDAddress, isEnsAddress) => {\n    const isValidAddr = validateAddress(address)\n    if (!isValidAddr.success) return isValidAddr\n\n    if (address && address === accountPresets.feeCollector) {\n        return {\n            success: true\n        }\n    }\n\n    if (address && selectedAcc && (address === selectedAcc)) {\n        return {\n            success: false,\n            message: 'The entered address should be different than the your own account address.'\n        }\n    }\n    \n    if (address && isKnownTokenOrContract(address)) {\n        return {\n            success: false,\n            message: 'You are trying to send tokens to a smart contract. Doing so would burn them.'\n        }\n    }\n\n    if (address && (!isKnownAddress(address) && !addressConfirmed && !isUDAddress && !isEnsAddress)) { \n        return {\n            success: false,\n            message: `You're trying to send to an unknown address. If you're really sure, confirm using the checkbox below.`\n        }\n    }\n\n    if (address && (!isKnownAddress(address) && !addressConfirmed && (isUDAddress || isEnsAddress))) { \n        const name = isUDAddress ? 'Unstoppable domain' : 'Ethereum Name Service'\n        return {\n            success: false,\n            message: `You're trying to send to an ${name}. If you really trust to the person who gave you, confirm using the checkbox below.`\n        }\n    }\n\n    return { success: true }\n}\n\nconst validateSendTransferAmount = (amount, selectedAsset) => {\n    if (!(amount && amount.length)) {\n        return {\n            success: false,\n            message: ''\n        }\n    }\n    \n    if (!(amount && (amount > 0))) {\n        return {\n            success: false,\n            message: 'The amount must be greater than 0.'\n        }\n    }\n\n    try {\n        if (amount && selectedAsset && selectedAsset.decimals) {\n            const parsedAmount = amount.slice(0, amount.indexOf('.') + selectedAsset.decimals + 1); // Fixed decimals in case amount is bigger than selectedAsset.decimals, otherwise would cause overflow error\n            const bigNumberAmount = parseUnits(parsedAmount, selectedAsset.decimals)\n            if (bigNumberAmount && selectedAsset.balanceRaw && bigNumberAmount.gt(selectedAsset.balanceRaw)) {\n                return {\n                    success: false,\n                    message: `The amount is greater than the asset's balance: ${selectedAsset?.balance} ${selectedAsset?.symbol}.`\n                }\n            }\n        }\n    } catch(e) {\n        console.error(e);\n    }\n\n    return { success: true }\n}\n\nconst validateSendNftAddress = (address, selectedAcc, addressConfirmed, isKnownAddress, metadata, selectedNetwork, network, isUDAddress, isEnsAddress) => {\n    const isValidAddr = validateSendTransferAddress(address, selectedAcc, addressConfirmed, isKnownAddress, isUDAddress, isEnsAddress)\n    if (!isValidAddr.success) return isValidAddr\n\n    if (metadata && selectedAcc && (metadata.owner?.address.toLowerCase() !== selectedAcc.toLowerCase())) {\n        return {\n            success: false,\n            message: `The NFT you're trying to send is not owned by you!`\n        }\n    }\n\n    if (selectedNetwork && network && (selectedNetwork.id !== network)) {\n        return {\n            success: false,\n            message: 'The selected network is not the correct one.'\n        }\n    }\n\n    return { success: true }\n}\n\nexport {\n    validateAddAuthSignerAddress,\n    validateSendNftAddress,\n    validateSendTransferAddress,\n    validateSendTransferAmount\n}\n","import './AddAddressModal.scss'\n\nimport { createRef, useRef, useState, useMemo } from 'react'\nimport { MdCheck, MdClose } from 'react-icons/md'\nimport { useModals } from 'hooks'\nimport { Modal, TextInput, Button, ToolTip } from \"components/common\"\nimport { resolveUDomain } from 'lib/unstoppableDomains'\nimport { resolveENSDomain } from 'lib/ensDomains'\n\nconst AddAddressModal = ({ title, inputs, selectedNetwork, onClose }) => {\n    const { hideModal } = useModals()\n    const [isDisabled, setDisabled] = useState(true)\n    const [uDAddress, setUDAddress] = useState('')\n    const [ensAddress, setEnsAddress] = useState('')\n    const timer = useRef(null)\n\n    const inputsFields = useMemo(() => inputs.map(input => ({ ...input, ref: createRef() })), [inputs])\n    const getUDomain = async (value) => {\n        return await resolveUDomain(value, null, selectedNetwork.unstoppableDomainsChain)\n    }\n\n    const onInput = () => {\n        if (timer.current) {\n            clearTimeout(timer.current)\n        }\n\n        const validateForm = async () => {\n            const isFound = inputsFields.find(item => item.inputType === 'address')\n            const domain = isFound && isFound.ref && isFound.ref.current.value\n            if (!domain) return\n            \n            let uDAddr = null\n            let ensAddr = null\n            if (isFound) {\n                uDAddr = await getUDomain(domain)\n                ensAddr = await resolveENSDomain(domain)\n                timer.current = null\n                if (uDAddr) setUDAddress(uDAddr)\n                else if (ensAddr) setEnsAddress(ensAddr)\n            }\n\n            const isFormValid = inputsFields\n                .map(({ ref, validate, inputType }) => {\n                    const isUDField = inputType === 'address'\n                    const value = isUDField && uDAddr ? uDAddr : isUDField && ensAddr ? ensAddr : ref.current.value\n                    if (!validate) return !!value\n\n                    return validate(value)\n                })\n                .every(v => v === true)\n\n            setDisabled(!isFormValid)\n        }\n\n        timer.current = setTimeout(async () => {\n            return validateForm().catch(console.error)\n        }, 500)\n    }\n\n    const onConfirm = () => {\n        let values = inputsFields.map(({ ref }) => ref.current.value)\n        if (uDAddress) values.push({ type: 'ud' })\n        else if (ensAddress) values.push({ type: 'ens' })\n        else values.push({ type: 'pub' })\n        \n        onClose && onClose(values)\n        hideModal()\n    }\n\n    const buttons = <>\n        <Button clear small icon={<MdClose />} onClick={hideModal}>Cancel</Button>\n        <Button small icon={<MdCheck />} disabled={isDisabled} onClick={onConfirm}>Confirm</Button>\n    </>\n\n    return (\n        <Modal id=\"input-modal\" title={title} buttons={buttons}>\n            {\n                inputsFields.map(({ id, label, placeholder, ref, type }) => (\n                    <div key={id + label}>\n                        <TextInput label={label} placeholder={placeholder} onInput={onInput} ref={ref} className='address-input' />\n                        {(type === 'address') &&\n                            <>\n                                <ToolTip label={!uDAddress ? 'You can use Unstoppable domainsⓇ' : 'Valid Unstoppable domainsⓇ domain'}>\n                                    <span id=\"udomains-logo\" className={ uDAddress ? 'ud-logo-active ' : '' } />\n                                </ToolTip>\n                                <ToolTip label={!ensAddress ? 'You can use Ethereum Name ServiceⓇ' : 'Valid Ethereum Name ServicesⓇ domain'}>\n                                    <div id=\"ens-logo\" className={ensAddress ? 'ens-logo-active ' : ''} />\n                                </ToolTip>\n                            </>\n                        }\n                    </div>\n                ))\n            }\n        </Modal>\n    )\n}\n\nexport default AddAddressModal\n","// @ts-nocheck TODO: Fill in all missing types before enabling the TS check again\n// It costs around 19k to send a token, if that token was interacted with before in the same transaction,\n// because of SLOAD costs - they depend on whether a slot has been read\n// however, it costs 30k if the token has not been interacted with\n// we may decrease it a bit and lean on the relayer failsafe values (cfg.gasAddedOnEstimate) later on\nconst ADDED_GAS_TOKEN = 30000\nconst ADDED_GAS_NATIVE = 12000\n\nexport function getAddedGas(token) {\n  return !token?.address || token?.address === '0x0000000000000000000000000000000000000000'\n    ? ADDED_GAS_NATIVE\n    : ADDED_GAS_TOKEN\n}\n\n// can't think of a less funny name for that\nexport function getFeePaymentConsequences(token, estimation, isGasTankEnabled) {\n  // Relayerless mode\n  if (!estimation?.feeInUSD || !token) return { multiplier: 1, addedGas: 0 }\n  // Relayer mode\n  const addedGas = getAddedGas(token)\n  // If Gas Tank enabled\n  if (isGasTankEnabled) return { addedGas: 0, multiplier: 1 }\n\n  return {\n    // otherwise we get very long floating point numbers with trailing .999999\n    multiplier: parseFloat(((estimation.gasLimit + addedGas) / estimation.gasLimit).toFixed(4)),\n    addedGas\n  }\n}\n\n// Returns feeToken data with all multipliers applied\nexport function getFeesData(feeToken, estimation, speed, isGasTankEnabled, network) {\n  const { addedGas, multiplier } = getFeePaymentConsequences(feeToken, estimation, isGasTankEnabled)\n  const savedGas = getAddedGas(feeToken)\n  const discountMultiplier = 1 - (feeToken?.discount || 0)\n  const totalMultiplier = multiplier * discountMultiplier\n  const nativeRate = feeToken?.nativeRate || 1\n  const isCrossChainNativeSelected =\n    isGasTankEnabled &&\n    feeToken.address === '0x0000000000000000000000000000000000000000' &&\n    network.id !== feeToken.network\n  // eslint-disable-next-line no-nested-ternary\n  const feeInNative = estimation.customFee\n    ? (estimation.customFee * discountMultiplier) / nativeRate\n    : !isCrossChainNativeSelected\n    ? estimation.feeInNative[speed] * totalMultiplier\n    : (((estimation.feeInNative[speed] * totalMultiplier) / nativeRate) *\n        estimation.nativeAssetPriceInUSD) /\n      feeToken.price\n  // eslint-disable-next-line no-nested-ternary\n  const feeInUSD = !Number.isNaN(estimation.nativeAssetPriceInUSD)\n    ? !isCrossChainNativeSelected\n      ? feeInNative * estimation.nativeAssetPriceInUSD\n      : feeInNative * feeToken.price\n    : undefined\n  const feeInFeeToken = feeInNative * nativeRate\n\n  return {\n    feeInNative,\n    feeInUSD,\n    feeInFeeToken,\n    addedGas, // use it bundle data\n    savedGas\n  }\n}\nexport function isTokenEligible(token, speed, estimation, isGasTankEnabled, network) {\n  if (estimation?.relayerless && token?.address === '0x0000000000000000000000000000000000000000')\n    return true\n  if (!token) return false\n  const { feeInFeeToken } = getFeesData(token, estimation, speed, isGasTankEnabled, network)\n  const balanceInFeeToken = parseInt(token.balance) / 10 ** token.decimals\n  return balanceInFeeToken > feeInFeeToken\n}\n\nconst contractErrors = [\n  'caller is a contract',\n  'contract not allowed',\n  'contract not supported',\n  'No contractz allowed',\n  /* no */ 'contracts allowed',\n  /* c or C */ 'ontract is not allowed'\n]\n\nexport function mapTxnErrMsg(msg: any) {\n  if (!msg) return\n  if (msg.includes('Router: EXPIRED')) return 'Swap expired'\n  if (msg.includes('Router: INSUFFICIENT_OUTPUT_AMOUNT'))\n    return 'Swap will suffer slippage higher than your requirements'\n  if (msg.includes('INSUFFICIENT_PRIVILEGE')) return 'Your signer address is not authorized.'\n  if (contractErrors.find((contractMsg) => msg.includes(contractMsg)))\n    return 'This dApp does not support smart wallets.'\n  return msg\n}\n\nexport function getErrHint(msg: any) {\n  if (!msg) return\n  if (msg.includes('Router: EXPIRED')) return 'Try performing the swap again'\n  if (msg.includes('Router: INSUFFICIENT_OUTPUT_AMOUNT'))\n    return 'Try performing the swap again or increase your slippage requirements'\n  if (msg.includes('INSUFFICIENT_PRIVILEGE'))\n    return 'If you set a new signer for this account, try re-adding the account.'\n  if (contractErrors.find((contractMsg) => msg.includes(contractMsg)))\n    return 'Contact the dApp developers to tell them to implement smart wallet support by not blocking contract interactions and/or implementing EIP1271.'\n  return 'Sending this transaction batch would have resulted in an error, so we prevented it.'\n}\n\nexport function toHexAmount(amnt: any, decimals: any) {\n  return `0x${Math.round(amnt * 10 ** decimals).toString(16)}`\n}\n\nexport function getDiscountApplied(amnt: any, discount = 0) {\n  if (!discount) return 0\n  if (!amnt) return 0\n  if (discount === 1) return amnt\n  return (amnt / (1 - discount)) * discount\n}\n","// @ts-nocheck TODO: Fill in all missing types before enabling the TS check again\nimport ERC20ABI from 'adex-protocol-eth/abi/ERC20.json'\nimport { BigNumber } from 'ethers'\nimport { Interface } from 'ethers/lib/utils'\n\nimport accountPresets from '../../constants/accountPresets'\n\nconst ERC20AbiInterface = new Interface(ERC20ABI)\nconst TRANSFER_SIGHASH = ERC20AbiInterface.getSighash(\n  ERC20AbiInterface.getFunction('transfer').format()\n)\nconst feeCollector = accountPresets.feeCollector\nconst NATIVE_ADDRESS = '0x0000000000000000000000000000000000000000'\n\nfunction getTxnTransferInfo(txn) {\n  try {\n    const res = ERC20AbiInterface.decodeFunctionData('transfer', txn)\n\n    return {\n      value: BigNumber.from(res._value),\n      ...res\n    }\n  } catch (e) {\n    console.error(e)\n    return {}\n  }\n}\n\nfunction isFeeCollectorTxn(txn) {\n  // is first call is to relayer this is native\n  if (txn[0] === feeCollector) return true\n  // transfer token to relayer\n  if (txn[2].startsWith(TRANSFER_SIGHASH) && getTxnTransferInfo(txn[2])._to === feeCollector)\n    return true\n  return false\n}\n\nconst getGasTankFilledTxns = (transactions) => {\n  const depositTxns: any = []\n  transactions.forEach(({ txId, txns, submittedAt, gasTankFee, identity, ...rest }) => {\n    const filteredTxns = txns\n      .filter((txnCall, i) => isFeeCollectorTxn(txnCall) && (gasTankFee || i < txns.length - 1))\n      .map((fillTxn) => {\n        if (fillTxn[0] === feeCollector) {\n          return {\n            submittedAt,\n            address: NATIVE_ADDRESS,\n            value: BigNumber.from(fillTxn[1]),\n            identity,\n            txId,\n            ...rest\n          }\n        }\n        if (\n          fillTxn[2].startsWith(TRANSFER_SIGHASH) &&\n          ERC20AbiInterface.decodeFunctionData('transfer', fillTxn[2])._to === feeCollector\n        ) {\n          return {\n            submittedAt,\n            address: fillTxn[0],\n            value: BigNumber.from(\n              ERC20AbiInterface.decodeFunctionData('transfer', fillTxn[2])._value\n            ),\n            identity,\n            txId,\n            ...rest\n          }\n        }\n        return null\n      })\n\n    if (filteredTxns.length) depositTxns.push(filteredTxns[0])\n  })\n\n  return depositTxns\n}\n\nexport { getGasTankFilledTxns }\n","import useGasTankData from './useGasTankData'\n\nexport default useGasTankData\n","import { formatUnits } from 'ethers/lib/utils'\nimport { useMemo } from 'react'\n\nimport { getAddedGas } from '../../helpers/sendTxnHelpers'\nimport { getGasTankFilledTxns } from '../../services/isFeeCollectorTxn'\nimport useCacheBreak from '../useCacheBreak'\nimport { UseGasTankDataProps, UseGasTankDataReturnType } from './types'\n\nexport default function useGasTankData({\n  relayerURL,\n  selectedAcc,\n  network,\n  portfolio,\n  useRelayerData\n}: UseGasTankDataProps): UseGasTankDataReturnType {\n  const { cacheBreak } = useCacheBreak()\n  const { tokens } = portfolio\n\n  const urlGetBalance = relayerURL\n    ? `${relayerURL}/gas-tank/${selectedAcc}/getBalance?cacheBreak=${cacheBreak}`\n    : null\n  const urlGetFeeAssets = relayerURL\n    ? `${relayerURL}/gas-tank/assets?cacheBreak=${cacheBreak}`\n    : null\n  const urlGetTransactions = relayerURL\n    ? `${relayerURL}/identity/${selectedAcc}/${network?.id}/transactions`\n    : null\n\n  const { data: balancesRes, isLoading } = useRelayerData({ url: urlGetBalance })\n  const { data: feeAssetsRes } = useRelayerData({ url: urlGetFeeAssets })\n  const { data: executedTxnsRes } = useRelayerData({ url: urlGetTransactions })\n\n  const gasTankBalances = useMemo(\n    () =>\n      balancesRes &&\n      balancesRes.length &&\n      balancesRes.map(({ balanceInUSD }: any) => balanceInUSD).reduce((a: any, b: any) => a + b, 0),\n    [balancesRes]\n  )\n\n  const gasTankTxns = useMemo(\n    () =>\n      executedTxnsRes &&\n      executedTxnsRes.txns.length &&\n      executedTxnsRes.txns.filter((item: any) => !!item.gasTankFee),\n    [executedTxnsRes]\n  )\n\n  const feeAssetsPerNetwork = useMemo(\n    () =>\n      feeAssetsRes &&\n      feeAssetsRes.length &&\n      feeAssetsRes.filter((item: any) => item.network === network?.id),\n    [feeAssetsRes, network?.id]\n  )\n\n  const executedTxns = executedTxnsRes && executedTxnsRes.txns.length && executedTxnsRes.txns\n  const gasTankFilledTxns = useMemo(\n    () => executedTxns && executedTxns.length && getGasTankFilledTxns(executedTxns),\n    [executedTxns]\n  )\n\n  const availableFeeAssets = useMemo(\n    () =>\n      feeAssetsPerNetwork?.map((item: any) => {\n        const isFound = tokens?.find((x) => x.address.toLowerCase() === item.address.toLowerCase())\n        if (isFound)\n          return {\n            ...isFound,\n            tokenImageUrl: item.icon,\n            decimals: item.decimals,\n            symbol: item.symbol,\n            balance: isFound.balance,\n            disableGasTankDeposit: !!item.disableGasTankDeposit,\n            balanceUSD:\n              parseFloat(isFound.balance) *\n              parseFloat(\n                feeAssetsPerNetwork.find(\n                  (x: any) => x.address.toLowerCase() === isFound.address.toLowerCase()\n                ).price || 0\n              )\n          }\n\n        return {\n          ...item,\n          tokenImageUrl: item.icon,\n          balance: 0,\n          balanceUSD: 0,\n          decimals: 0,\n          address: item.address.toLowerCase(),\n          symbol: item.symbol.toUpperCase()\n        }\n      }),\n    [feeAssetsPerNetwork, tokens]\n  )\n\n  const totalSavedResult = useMemo(\n    () =>\n      gasTankTxns &&\n      gasTankTxns.length &&\n      gasTankTxns.map((item: any) => {\n        const feeTokenDetails = feeAssetsRes\n          ? feeAssetsRes.find((i: any) => i.symbol === item.feeToken)\n          : null\n        const savedGas = feeTokenDetails ? getAddedGas(feeTokenDetails) : null\n        return {\n          saved: savedGas ? item.feeInUSDPerGas * savedGas : 0.0,\n          cashback:\n            item.gasTankFee && item.gasTankFee.cashback\n              ? // @ts-ignore FIXME: Figure out why TypeScript complains\n                formatUnits(\n                  item.gasTankFee.cashback.toString(),\n                  feeTokenDetails?.decimals\n                ).toString() * feeTokenDetails?.price\n              : 0.0\n        }\n      }),\n    [feeAssetsRes, gasTankTxns]\n  )\n\n  return {\n    balancesRes,\n    gasTankBalances,\n    isLoading,\n    gasTankTxns,\n    feeAssetsRes,\n    gasTankFilledTxns,\n    totalSavedResult,\n    availableFeeAssets\n  }\n}\n"],"sourceRoot":""}